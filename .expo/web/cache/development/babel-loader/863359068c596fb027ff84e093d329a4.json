{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar Geocoder;\nexport default Geocoder = {\n  apiKey: null,\n  options: {},\n  init: function init(apiKey) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.apiKey = apiKey;\n    this.options = options;\n  },\n\n  get isInit() {\n    return !!this.apiKey;\n  },\n\n  from: function () {\n    var _from = _asyncToGenerator(function* () {\n      if (!Geocoder.isInit) throw {\n        code: Geocoder.Errors.NOT_INITIATED,\n        message: \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\"\n      };\n      var queryParams;\n\n      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n        params[_key] = arguments[_key];\n      }\n\n      if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n        latlng: params[0] + \",\" + params[1]\n      };else if (params[0] instanceof Array) queryParams = {\n        latlng: params[0][0] + \",\" + params[0][1]\n      };else if (params[0] instanceof Object) queryParams = {\n        latlng: (params[0].lat || params[0].latitude) + \",\" + (params[0].lng || params[0].longitude)\n      };else if (typeof params[0] === 'string' && params[1] instanceof Object) queryParams = {\n        address: params[0],\n        bounds: params[1]\n      };else if (typeof params[0] === 'string') queryParams = {\n        address: params[0]\n      };\n      if (!queryParams) throw {\n          code: Geocoder.Errors.INVALID_PARAMETERS,\n          message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n        };\n      queryParams = _objectSpread(_objectSpread({\n        key: this.apiKey\n      }, this.options), queryParams);\n      var url = \"https://maps.google.com/maps/api/geocode/json?\" + toQueryParams(queryParams);\n      var response, data;\n\n      try {\n        response = yield fetch(url);\n      } catch (error) {\n        throw {\n          code: Geocoder.Errors.FETCHING,\n          message: \"Error while fetching. Check your network.\",\n          origin: error\n        };\n      }\n\n      try {\n        data = yield response.json();\n      } catch (error) {\n        throw {\n          code: Geocoder.Errors.PARSING,\n          message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n          origin: response\n        };\n      }\n\n      if (data.status !== 'OK') throw {\n        code: Geocoder.Errors.SERVER,\n        message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n        origin: data\n      };\n      return data;\n    });\n\n    function from() {\n      return _from.apply(this, arguments);\n    }\n\n    return from;\n  }(),\n  Errors: {\n    NOT_INITIATED: 0,\n    INVALID_PARAMETERS: 1,\n    FETCHING: 2,\n    PARSING: 3,\n    SERVER: 4\n  }\n};\n\nfunction encodeBounds(bounds) {\n  var southwest = bounds.southwest;\n  var northeast = bounds.northeast;\n  return encodeURIComponent(southwest.lat) + \",\" + encodeURIComponent(southwest.lng) + \"|\" + encodeURIComponent(northeast.lat) + \",\" + encodeURIComponent(northeast.lng);\n}\n\nfunction encodeComponent(key, value) {\n  if (key === 'bounds') {\n    return encodeBounds(value);\n  }\n\n  return encodeURIComponent(value);\n}\n\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(function (key) {\n    return !!object[key];\n  }).map(function (key) {\n    return key + \"=\" + encodeComponent(key, object[key]);\n  }).join(\"&\");\n}","map":{"version":3,"names":["Geocoder","apiKey","options","init","isInit","from","code","Errors","NOT_INITIATED","message","queryParams","params","isNaN","latlng","Array","Object","lat","latitude","lng","longitude","address","bounds","INVALID_PARAMETERS","JSON","stringify","key","url","toQueryParams","response","data","fetch","error","FETCHING","origin","json","PARSING","status","SERVER","encodeBounds","southwest","northeast","encodeURIComponent","encodeComponent","value","object","keys","filter","map","join"],"sources":["/Users/jeongin/mapsee_2/node_modules/react-native-geocoding/Geocoder.js"],"sourcesContent":["/**\n * Module to use google's geocoding & reverse geocoding.\n */\nlet Geocoder;\nexport default Geocoder = {\n\tapiKey : null,\n\toptions : {},\n\t\n\t/**\n\t * Initialize the module.\n\t * @param {String} apiKey The api key of your application in google.\n\t * @param {Object} [options] extra options for your geocoding request.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#geocoding\n\t */\n\tinit(apiKey, options = {}) {\n\t\tthis.apiKey = apiKey;\n\t\tthis.options = options;\n\t},\n\n\t/**\n\t * @returns {boolean} True if the module has been initiated. False otherwise.\n\t */\n\tget isInit() {\n\t\treturn !!this.apiKey;\n\t},\n\n\t/**\n\t * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address & vice-versa.\n\t * Accepted parameters:\n\t * <ul>\n\t *     <li>from(Number latitude, Number longitude)</li>\n\t *     <li>from(Array [latitude, longitude])</li>\n\t *     <li>from(Object {latitude, longitude})</li>\n\t *     <li>from(Object {lat, lng})</li>\n\t *     <li>from(String address)</li>\n\t * </ul>\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n\t */\n\tasync from(...params) {\n\t\t// check api key\n\t\tif (!Geocoder.isInit)\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.NOT_INITIATED,\n\t\t\t\tmessage : \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\",\n\t\t\t};\n\n\t\t// --- convert parameters ---\n\t\tlet queryParams;\n\n\t\t// (latitude, longitude)\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]))\n\t\t\tqueryParams = {latlng : `${params[0]},${params[1]}`};\n\n\t\t// [latitude, longitude]\n\t\telse if (params[0] instanceof Array)\n\t\t\tqueryParams = {latlng : `${params[0][0]},${params[0][1]}`};\n\n\t\t// {latitude, longitude}  or {lat, lng}\n\t\telse if (params[0] instanceof Object)\n\t\t\tqueryParams = {latlng : `${params[0].lat || params[0].latitude},${params[0].lng || params[0].longitude}`};\n\n\t\t// address, {bounds: {northeast: {lat, lng}, southwest: {lan, lng}}}\n\t\telse if (typeof params[0] === 'string' && params[1] instanceof Object)\n\t\t\tqueryParams = {address : params[0], bounds : params[1]};\n\n\t\t// address\n\t\telse if (typeof params[0] === 'string')\n\t\t\tqueryParams = {address : params[0]};\n\n\t\t// --- start geocoding ---\n\n\t\t// check query params\n\t\tif (!queryParams)\n\t\t// no query params, means parameters where invalid\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.INVALID_PARAMETERS,\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\n\t\t\t};\n\n\t\tqueryParams = { key: this.apiKey, ...this.options, ...queryParams }\n\t\t// build url\n\t\tconst url = `https://maps.google.com/maps/api/geocode/json?${toQueryParams(queryParams)}`;\n\n\t\tlet response, data;\n\n\t\t// fetch\n\t\ttry {\n\t\t\tresponse = await fetch(url);\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.FETCHING,\n\t\t\t\tmessage : \"Error while fetching. Check your network.\",\n\t\t\t\torigin : error,\n\t\t\t};\n\t\t}\n\n\t\t// parse\n\t\ttry {\n\t\t\tdata = await response.json();\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.PARSING,\n\t\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n\t\t\t\torigin : response,\n\t\t\t};\n\t\t}\n\n\t\t// check response's data\n\t\tif (data.status !== 'OK')\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.SERVER,\n\t\t\t\tmessage : \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n\t\t\t\torigin : data,\n\t\t\t};\n\n\t\treturn data;\n\t},\n\n\t/**\n\t * All possible errors.\n\t */\n\tErrors : {\n\t\t/**\n\t\t * Module hasn't been initiated. Call {@link Geocoder.init}.\n\t\t */\n\t\tNOT_INITIATED : 0,\n\n\t\t/**\n\t\t * Parameters are invalid.\n\t\t */\n\t\tINVALID_PARAMETERS : 1,\n\n\t\t/**\n\t\t * Error wile fetching to server.\n\t\t * The error.origin property contains the original fetch error.\n\t\t */\n\t\tFETCHING : 2,\n\n\t\t/**\n\t\t * Error while parsing server response.\n\t\t * The error.origin property contains the response.\n\t\t */\n\t\tPARSING : 3,\n\n\t\t/**\n\t\t * Error from the server.\n\t\t * The error.origin property contains the response's body.\n\t\t */\n\t\tSERVER : 4,\n\t},\n}\n\n/**\n * Encodes a bounds object into a URL encoded-string.\n */\nfunction encodeBounds(bounds) {\n\tconst southwest = bounds.southwest;\n\tconst northeast = bounds.northeast;\n\treturn `${encodeURIComponent(southwest.lat)},${encodeURIComponent(southwest.lng)}|${encodeURIComponent(northeast.lat)},${encodeURIComponent(northeast.lng)}`;\n}\n\n/**\n * Encodes a component so it can be used safely inside a URL.\n */\nfunction encodeComponent(key, value) {\n\tif (key === 'bounds') {\n\t\treturn encodeBounds(value);\n\t}\n\treturn encodeURIComponent(value);\n}\n\n/**\n * Convert an object into query parameters.\n * @param {Object} object Object to convert.\n * @returns {string} Encoded query parameters.\n */\nfunction toQueryParams(object) {\n\treturn Object.keys(object)\n\t\t.filter(key => !!object[key])\n\t\t.map(key => key + \"=\" + encodeComponent(key, object[key]))\n\t\t.join(\"&\")\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}