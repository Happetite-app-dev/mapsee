{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\", \"isLeading\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport { black } from \"../../styles/themes/v2/colors\";\nimport IconButton from \"../IconButton/IconButton\";\nvar AppbarAction = React.forwardRef(function (_ref, ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      iconColor = _ref.color,\n      icon = _ref.icon,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      isLeading = _ref.isLeading,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useInternalTheme();\n  var actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : color(black).alpha(0.54).rgb().string();\n  return React.createElement(IconButton, _extends({\n    size: size,\n    onPress: onPress,\n    iconColor: actionIconColor,\n    icon: icon,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    animated: true,\n    ref: ref\n  }, rest));\n});\nAppbarAction.displayName = 'Appbar.Action';\nexport default AppbarAction;\nexport { AppbarAction };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT;AACA,SAASC,KAAT;AAEA,OAAOC,UAAP;AA8DA,IAAMC,YAAY,GAAGL,KAAK,CAACM,UAANN,CACnB,gBAWEO,GAXF,EAYK;EAAA,gBAFKC,IAEL,CAVDC,IAUC;EAAA,IAVDA,IAUC,0BAVM,EAUN;EAAA,IATMC,SASN,GAFKF,IAEL,CATDP,KASC;EAAA,IARDU,IAQC,GAFKH,IAEL,CARDG,IAQC;EAAA,IAPDC,QAOC,GAFKJ,IAEL,CAPDI,QAOC;EAAA,IANDC,OAMC,GAFKL,IAEL,CANDK,OAMC;EAAA,IALDC,kBAKC,GAFKN,IAEL,CALDM,kBAKC;EAAA,IAJDC,SAIC,GAFKP,IAEL,CAJDO,SAIC;EAAA,IAHEC,IAGF,4BAFKR,IAEL;;EACH,IAAMS,KAAK,GAAGf,gBAAgB,EAA9B;EAEA,IAAMgB,eAAe,GAAGR,SAAS,GAC7BA,SAD6B,GAE7BO,KAAK,CAACE,IAANF,GACAF,SAAS,GACPE,KAAK,CAACG,MAANH,CAAaI,SADN,GAEPJ,KAAK,CAACG,MAANH,CAAaK,gBAHfL,GAIAhB,KAAK,CAACE,KAAD,CAALF,CAAasB,KAAbtB,CAAmB,IAAnBA,EAAyBuB,GAAzBvB,GAA+BwB,MAA/BxB,EANJ;EAQA,OACED,oBAACI,UAAD,EAAWsB;IACTjB,IAAI,EAAEA,IADG;IAETI,OAAO,EAAEA,OAFA;IAGTH,SAAS,EAAEQ,eAHF;IAITP,IAAI,EAAEA,IAJG;IAKTC,QAAQ,EAAEA,QALD;IAMTE,kBAAkB,EAAEA,kBANX;IAOTa,QAAQ,MAPC;IAQTpB,GAAG,EAAEA;EARI,GASLS,IATK,CAAX,CADF;AAaD,CArCkBhB,CAArB;AAwCAK,YAAY,CAACuB,WAAbvB,GAA2B,eAA3BA;AAEA,eAAeA,YAAf;AAGA,SAASA,YAAT","names":["React","color","useInternalTheme","black","IconButton","AppbarAction","forwardRef","ref","_ref","size","iconColor","icon","disabled","onPress","accessibilityLabel","isLeading","rest","theme","actionIconColor","isV3","colors","onSurface","onSurfaceVariant","alpha","rgb","string","_extends","animated","displayName"],"sources":["AppbarAction.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { StyleProp, ViewStyle, View } from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { black } from '../../styles/themes/v2/colors';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Whether it's the leading button.\n   */\n  isLeading?: boolean;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar-action-android.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = React.forwardRef<View, Props>(\n  (\n    {\n      size = 24,\n      color: iconColor,\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      isLeading,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme();\n\n    const actionIconColor = iconColor\n      ? iconColor\n      : theme.isV3\n      ? isLeading\n        ? theme.colors.onSurface\n        : theme.colors.onSurfaceVariant\n      : color(black).alpha(0.54).rgb().string();\n\n    return (\n      <IconButton\n        size={size}\n        onPress={onPress}\n        iconColor={actionIconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        ref={ref}\n        {...rest}\n      />\n    );\n  }\n);\n\nAppbarAction.displayName = 'Appbar.Action';\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n"]},"metadata":{},"sourceType":"module"}