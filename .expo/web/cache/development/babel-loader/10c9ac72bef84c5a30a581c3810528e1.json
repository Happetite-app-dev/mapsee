{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { getAssetByID } from \"./AssetRegistry\";\nimport AssetSourceResolver from \"./AssetSourceResolver\";\n\nvar _customSourceTransformer;\n\nvar _serverURL;\n\nvar _sourceCodeScriptURL;\n\nfunction getSourceCodeScriptURL() {\n  var _sourceCode;\n\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  var sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n\n  if (!sourceCode) {\n    sourceCode = NativeModules == null ? void 0 : NativeModules.SourceCode;\n  }\n\n  _sourceCodeScriptURL = (_sourceCode = sourceCode) == null ? void 0 : _sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL() {\n  if (_serverURL === undefined) {\n    var sourceCodeScriptURL = getSourceCodeScriptURL();\n    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n\n    if (match) {\n      _serverURL = match[0];\n    } else {\n      _serverURL = null;\n    }\n  }\n\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  var asset = getAssetByID(source);\n\n  if (!asset) {\n    return undefined;\n  }\n\n  var resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get: function get() {\n    return setCustomSourceTransformer;\n  }\n});\nvar pickScale = AssetSourceResolver.pickScale;\nexport { pickScale };","map":{"version":3,"mappings":";AAEA,SAASA,YAAT;AACA,OAAOC,mBAAP;;AAIA,IAAIC,wBAAJ;;AACA,IAAIC,UAAJ;;AACA,IAAIC,oBAAJ;;AAEA,SAASC,sBAAT,GAA+B;EAAA;;EAC7B,IAAID,oBAAJ,EAA0B;IACxB,OAAOA,oBAAP;EACD;;EAED,IAAIE,UAAU,GAAG,OAAOC,gBAAP,KAA4B,WAA5B,GAA0CA,gBAAgB,CAACC,UAA3D,GAAwE,IAAzF;;EACA,IAAI,CAACF,UAAL,EAAiB;IACfA,UAAU,GAAGG,aAAH,oBAAGA,aAAa,CAAED,UAA5B;EACD;;EACDJ,oBAAoB,kBAAGE,UAAH,qBAAG,YAAYI,SAAnC;EACA,OAAON,oBAAP;AACD;;AAED,SAASO,eAAT,GAAwB;EACtB,IAAIR,UAAU,KAAKS,SAAnB,EAA8B;IAC5B,IAAMC,mBAAmB,GAAGR,sBAAsB,EAAlD;IACA,IAAMS,KAAK,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACC,KAApB,CAA0B,mBAA1B,CAArC;;IACA,IAAIA,KAAJ,EAAW;MAETX,UAAU,GAAGW,KAAK,CAAC,CAAD,CAAlB;IACD,CAHD,MAGO;MAELX,UAAU,GAAG,IAAb;IACD;EACF;;EACD,OAAOA,UAAP;AACD;;AAED,OAAM,SAAUY,0BAAV,CACJC,WADI,EAC+D;EAEnEd,wBAAwB,GAAGc,WAA3B;AACD;AAMD,eAAc,SAAUC,kBAAV,CAA6BC,MAA7B,EAAwC;EACpD,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;IAC9B,OAAOA,MAAP;EACD;;EAED,IAAMC,KAAK,GAAGnB,YAAY,CAACkB,MAAD,CAA1B;;EACA,IAAI,CAACC,KAAL,EAAY;IACV,OAAOP,SAAP;EACD;;EAED,IAAMQ,QAAQ,GAAG,IAAInB,mBAAJ,CAAwBU,eAAe,EAAvC,EAA2C,IAA3C,EAAiDQ,KAAjD,CAAjB;;EACA,IAAIjB,wBAAJ,EAA8B;IAC5B,OAAOA,wBAAwB,CAACkB,QAAD,CAA/B;EACD;;EACD,OAAOA,QAAQ,CAACC,YAAT,EAAP;AACD;AAEDC,MAAM,CAACC,cAAP,CAAsBN,kBAAtB,EAA0C,4BAA1C,EAAwE;EACtEO,GADsE,iBACnE;IACD,OAAOT,0BAAP;EACD;AAHqE,CAAxE;AAMO,IAAQU,SAAR,GAAsBxB,mBAAtB,CAAQwB,SAAR","names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","_serverURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","nativeExtensions","SourceCode","NativeModules","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sourceRoot":"","sources":["../src/resolveAssetSource.web.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare let nativeExtensions: { SourceCode?: { scriptURL: string } } | undefined;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules?.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode?.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"]},"metadata":{},"sourceType":"module"}