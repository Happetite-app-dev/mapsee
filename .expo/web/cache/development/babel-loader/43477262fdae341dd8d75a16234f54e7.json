{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/themes/v2/colors\";\nimport IconButton from \"../IconButton/IconButton\";\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { getToggleButtonColor } from \"./utils\";\nvar ToggleButton = React.forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n      size = _ref.size,\n      theme = _ref.theme,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      value = _ref.value,\n      status = _ref.status,\n      _onPress = _ref.onPress,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var borderRadius = theme.roundness;\n  return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n    var checked = context && context.value === value || status === 'checked';\n    var backgroundColor = getToggleButtonColor({\n      theme: theme,\n      checked: checked\n    });\n    var borderColor = theme.isV3 ? theme.colors.outline : color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    return React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: borderColor\n      }, style],\n      ref: ref\n    }, rest));\n  });\n});\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withInternalTheme(ToggleButton);\nvar ToggleButtonWithTheme = withInternalTheme(ToggleButton);\nexport { ToggleButtonWithTheme as ToggleButton };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AASA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,iBAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;AAGA,OAAOC,UAAP;AACA,SAASC,wBAAT;AACA,SAASC,oBAAT;AA6EA,IAAMC,YAAY,GAAGR,KAAK,CAACS,UAANT,CACnB,gBAaEU,GAbF,EAcK;EAAA,IAZDC,IAYC,GAFKC,IAEL,CAZDD,IAYC;EAAA,IAXDE,IAWC,GAFKD,IAEL,CAXDC,IAWC;EAAA,IAVDC,KAUC,GAFKF,IAEL,CAVDE,KAUC;EAAA,IATDC,kBASC,GAFKH,IAEL,CATDG,kBASC;EAAA,IARDC,QAQC,GAFKJ,IAEL,CARDI,QAQC;EAAA,IAPDC,KAOC,GAFKL,IAEL,CAPDK,KAOC;EAAA,IANDC,KAMC,GAFKN,IAEL,CANDM,KAMC;EAAA,IALDC,MAKC,GAFKP,IAEL,CALDO,MAKC;EAAA,IAJDC,QAIC,GAFKR,IAEL,CAJDQ,OAIC;EAAA,IAHEC,IAGF,4BAFKT,IAEL;;EACH,IAAMU,YAAY,GAAGR,KAAK,CAACS,SAA3B;EAEA,OACEvB,oBAACM,wBAAwB,CAACkB,QAA1B,EAAkC,IAAlC,EAEIC,iBAAiE,EAC9D;IACH,IAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAACP,KAARO,KAAkBP,KAA7BO,IAAuCN,MAAM,KAAK,SADrD;IAGA,IAAMQ,eAAe,GAAGpB,oBAAoB,CAAC;MAAEO,KAAK,EAALA,KAAF;MAASY;IAAT,CAAD,CAA5C;IACA,IAAME,WAAW,GAAGd,KAAK,CAACe,IAANf,GAChBA,KAAK,CAACgB,MAANhB,CAAaiB,OADGjB,GAEhBb,KAAK,CAACa,KAAK,CAACkB,IAANlB,GAAaV,KAAbU,GAAqBX,KAAtB,CAALF,CACGgC,KADHhC,CACS,IADTA,EAEGiC,GAFHjC,GAGGkC,MAHHlC,EAFJ;IAOA,OACED,oBAACK,UAAD,EAAW+B;MACTC,UAAU,EAAE,KADH;MAET1B,IAAI,EAAEA,IAFG;MAGTS,OAAO,EAAGkB,kBAAkC,EAAK;QAC/C,IAAIlB,QAAJ,EAAa;UACXA,QAAO,CAACkB,CAAD,CAAPlB;QACF;;QAEA,IAAIK,OAAJ,EAAa;UACXA,OAAO,CAACc,aAARd,CAAsB,CAACC,OAAD,GAAWR,KAAX,GAAmB,IAAzCO;QACF;MACA,CAXO;MAYTZ,IAAI,EAAEA,IAZG;MAaTE,kBAAkB,EAAEA,kBAbX;MAcTyB,kBAAkB,EAAE;QAAExB,QAAQ,EAARA,QAAF;QAAYyB,QAAQ,EAAEf;MAAtB,CAdX;MAeTV,QAAQ,EAAEA,QAfD;MAgBTC,KAAK,EAAE,CACLyB,MAAM,CAACC,OADF,EAEL;QACEhB,eAAe,EAAfA,eADF;QAEEL,YAAY,EAAZA,YAFF;QAGEM;MAHF,CAFK,EAOLX,KAPK,CAhBE;MAyBTP,GAAG,EAAEA;IAzBI,GA0BLW,IA1BK,CAAX,CADF;EA8BD,CA7CH,CADF;AAiDD,CAnEkBrB,CAArB;AAsEA,IAAM0C,MAAM,GAAGE,UAAU,CAACC,MAAXD,CAAkB;EAC/BD,OAAO,EAAE;IACPG,KAAK,EAAE,EADA;IAEPC,MAAM,EAAE,EAFD;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlBJ,CAAf;AAQA,eAAe1C,iBAAiB,CAACM,YAAD,CAAhC;AAGA,IAAMyC,qBAAqB,GAAG/C,iBAAiB,CAACM,YAAD,CAA/C;AAEA,SAASyC,qBAAqB,IAAIzC,YAAlC","names":["React","color","withInternalTheme","black","white","IconButton","ToggleButtonGroupContext","getToggleButtonColor","ToggleButton","forwardRef","ref","icon","_ref","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","Consumer","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","_extends","borderless","e","onValueChange","accessibilityState","selected","styles","content","StyleSheet","create","width","height","margin","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  ref?: React.RefObject<View>;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = React.forwardRef<View, Props>(\n  (\n    {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(\n          context: { value: string | null; onValueChange: Function } | null\n        ) => {\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          const backgroundColor = getToggleButtonColor({ theme, checked });\n          const borderColor = theme.isV3\n            ? theme.colors.outline\n            : color(theme.dark ? white : black)\n                .alpha(0.29)\n                .rgb()\n                .string();\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityState={{ disabled, selected: checked }}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor,\n                },\n                style,\n              ]}\n              ref={ref}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withInternalTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withInternalTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"module"}