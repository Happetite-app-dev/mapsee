{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"style\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Icon from \"../Icon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getIconButtonColor } from \"./utils\";\nvar PADDING = 8;\nvar IconButton = React.forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n      customIconColor = _ref.iconColor,\n      customContainerColor = _ref.containerColor,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$selected = _ref.selected,\n      selected = _ref$selected === void 0 ? false : _ref$selected,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      mode = _ref.mode,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useInternalTheme();\n  var isV3 = theme.isV3;\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n\n  var _getIconButtonColor = getIconButtonColor({\n    theme: theme,\n    disabled: disabled,\n    selected: selected,\n    mode: mode,\n    customIconColor: customIconColor,\n    customContainerColor: customContainerColor\n  }),\n      iconColor = _getIconButtonColor.iconColor,\n      rippleColor = _getIconButtonColor.rippleColor,\n      backgroundColor = _getIconButtonColor.backgroundColor,\n      borderColor = _getIconButtonColor.borderColor;\n\n  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  var borderStyles = {\n    borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius: buttonSize / 2,\n    borderColor: borderColor\n  };\n  return React.createElement(Surface, _extends({\n    ref: ref,\n    style: [{\n      backgroundColor: backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: styles.touchable,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default IconButton;","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","CrossFadeIcon","Icon","Surface","TouchableRipple","getIconButtonColor","PADDING","IconButton","forwardRef","ref","icon","_ref","customIconColor","iconColor","customContainerColor","containerColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","style","rest","theme","isV3","IconComponent","rippleColor","backgroundColor","borderColor","buttonSize","borderStyles","borderWidth","borderRadius","_extends","width","height","styles","container","elevation","borderless","centered","touchable","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","color","source","StyleSheet","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"sources":["IconButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getIconButtonColor } from './utils';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * @supported Available in v5.x\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Default icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Contained icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-3.png\" />\n *     <figcaption>Contained-tonal icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-4.png\" />\n *     <figcaption>Outlined icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = React.forwardRef<View, Props>(\n  (\n    {\n      icon,\n      iconColor: customIconColor,\n      containerColor: customContainerColor,\n      size = 24,\n      accessibilityLabel,\n      disabled,\n      onPress,\n      selected = false,\n      animated = false,\n      mode,\n      style,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme();\n    const { isV3 } = theme;\n\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n\n    const { iconColor, rippleColor, backgroundColor, borderColor } =\n      getIconButtonColor({\n        theme,\n        disabled,\n        selected,\n        mode,\n        customIconColor,\n        customContainerColor,\n      });\n\n    const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n    const borderStyles = {\n      borderWidth: isV3 && mode === 'outlined' && !selected ? 1 : 0,\n      borderRadius: buttonSize / 2,\n      borderColor,\n    };\n\n    return (\n      <Surface\n        ref={ref}\n        style={\n          [\n            {\n              backgroundColor,\n              width: buttonSize,\n              height: buttonSize,\n            },\n            styles.container,\n            borderStyles,\n            !isV3 && disabled && styles.disabled,\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...(isV3 && { elevation: 0 })}\n      >\n        <TouchableRipple\n          borderless\n          centered\n          onPress={onPress}\n          rippleColor={rippleColor}\n          accessibilityLabel={accessibilityLabel}\n          style={styles.touchable}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ disabled }}\n          disabled={disabled}\n          hitSlop={\n            TouchableRipple.supported\n              ? { top: 10, left: 10, bottom: 10, right: 10 }\n              : { top: 6, left: 6, bottom: 6, right: 6 }\n          }\n          {...rest}\n        >\n          <IconComponent color={iconColor} source={icon} size={size} />\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default IconButton;\n"]},"metadata":{},"sourceType":"module"}