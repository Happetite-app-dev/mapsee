{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { EventTypes, MouseButtons } from \"../interfaces\";\n\nvar EventManager = function () {\n  function EventManager(view) {\n    _classCallCheck(this, EventManager);\n\n    _defineProperty(this, \"activePointers\", []);\n\n    _defineProperty(this, \"view\", void 0);\n\n    this.view = view;\n  }\n\n  _createClass(EventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this = this;\n\n      this.view.addEventListener('pointerdown', function (event) {\n        if (!_this.isPointerInBounds({\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.DOWN);\n\n        var target = event.target;\n        target.setPointerCapture(adaptedEvent.pointerId);\n\n        _this.addActivePointer(adaptedEvent.pointerId);\n\n        _this.onPointerDown(adaptedEvent);\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        var adaptedEvent = _this.mapEvent(event, EventTypes.UP);\n\n        var target = event.target;\n\n        _this.onPointerUp(adaptedEvent);\n\n        target.releasePointerCapture(adaptedEvent.pointerId);\n\n        _this.removeActivePointer(adaptedEvent.pointerId);\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === 'mouse' && event.buttons !== MouseButtons.LEFT) {\n          return;\n        }\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.MOVE);\n\n        var inBounds = _this.isPointerInBounds({\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n\n        var pointerIndex = _this.activePointers.indexOf(adaptedEvent.pointerId);\n\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n\n            _this.onPointerEnter(adaptedEvent);\n\n            _this.addActivePointer(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n\n            _this.onPointerOut(adaptedEvent);\n\n            _this.removeActivePointer(adaptedEvent.pointerId);\n          } else {\n            _this.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        event.preventDefault();\n\n        var adaptedEvent = _this.mapEvent(event, EventTypes.CANCEL);\n\n        _this.onPointerCancel(adaptedEvent);\n      });\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(_event) {}\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(_event) {}\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(_event) {}\n  }, {\n    key: \"onPointerOut\",\n    value: function onPointerOut(_event) {}\n  }, {\n    key: \"onPointerEnter\",\n    value: function onPointerEnter(_event) {}\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(_event) {}\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(_event) {}\n  }, {\n    key: \"setOnPointerDown\",\n    value: function setOnPointerDown(callback) {\n      this.onPointerDown = callback;\n    }\n  }, {\n    key: \"setOnPointerUp\",\n    value: function setOnPointerUp(callback) {\n      this.onPointerUp = callback;\n    }\n  }, {\n    key: \"setOnPointerMove\",\n    value: function setOnPointerMove(callback) {\n      this.onPointerMove = callback;\n    }\n  }, {\n    key: \"setOnPointerOut\",\n    value: function setOnPointerOut(callback) {\n      this.onPointerOut = callback;\n    }\n  }, {\n    key: \"setOnPointerEnter\",\n    value: function setOnPointerEnter(callback) {\n      this.onPointerEnter = callback;\n    }\n  }, {\n    key: \"setOnPointerCancel\",\n    value: function setOnPointerCancel(callback) {\n      this.onPointerCancel = callback;\n    }\n  }, {\n    key: \"setOnPointerOutOfBounds\",\n    value: function setOnPointerOutOfBounds(callback) {\n      this.onPointerOutOfBounds = callback;\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }, {\n    key: \"isPointerInBounds\",\n    value: function isPointerInBounds(_ref) {\n      var x = _ref.x,\n          y = _ref.y;\n\n      if (!this.view) {\n        return false;\n      }\n\n      var rect = this.view.getBoundingClientRect();\n      return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    }\n  }, {\n    key: \"addActivePointer\",\n    value: function addActivePointer(pointerId) {\n      if (this.activePointers.indexOf(pointerId) >= 0) {\n        return;\n      }\n\n      this.activePointers.push(pointerId);\n    }\n  }, {\n    key: \"removeActivePointer\",\n    value: function removeActivePointer(pointerId) {\n      var index = this.activePointers.indexOf(pointerId);\n\n      if (index < 0) {\n        return;\n      }\n\n      this.activePointers.splice(index, 1);\n    }\n  }]);\n\n  return EventManager;\n}();\n\nexport { EventManager as default };","map":{"version":3,"mappings":"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","names":["EventTypes","MouseButtons","EventManager","constructor","view","_defineProperty","setListeners","addEventListener","event","isPointerInBounds","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","setPointerCapture","pointerId","addActivePointer","onPointerDown","UP","onPointerUp","releasePointerCapture","removeActivePointer","pointerType","buttons","LEFT","MOVE","inBounds","pointerIndex","activePointers","indexOf","eventType","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","onPointerOutOfBounds","preventDefault","CANCEL","onPointerCancel","_event","setOnPointerDown","callback","setOnPointerUp","setOnPointerMove","setOnPointerOut","setOnPointerEnter","setOnPointerCancel","setOnPointerOutOfBounds","offsetX","offsetY","time","timeStamp","rect","getBoundingClientRect","left","right","top","bottom","push","index","splice"],"sources":["EventManager.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-empty-function */\n\nimport { EventTypes, AdaptedPointerEvent, MouseButtons } from '../interfaces';\n\nexport default class EventManager {\n  private activePointers: number[] = [];\n  private readonly view: HTMLElement;\n\n  constructor(view: HTMLElement) {\n    this.view = view;\n  }\n\n  public setListeners() {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (\n        !this.isPointerInBounds({\n          x: event.clientX,\n          y: event.clientY,\n        })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.DOWN\n      );\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.addActivePointer(adaptedEvent.pointerId);\n      this.onPointerDown(adaptedEvent);\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.UP\n      );\n      const target = event.target as HTMLElement;\n\n      this.onPointerUp(adaptedEvent);\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.removeActivePointer(adaptedEvent.pointerId);\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (\n        event.pointerType === 'mouse' &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.MOVE\n      );\n\n      const inBounds: boolean = this.isPointerInBounds({\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.activePointers.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.addActivePointer(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.removeActivePointer(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      event.preventDefault();\n\n      const adaptedEvent: AdaptedPointerEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n    });\n  }\n\n  private onPointerDown(_event: AdaptedPointerEvent): void {}\n  private onPointerUp(_event: AdaptedPointerEvent): void {}\n  private onPointerMove(_event: AdaptedPointerEvent): void {}\n  private onPointerOut(_event: AdaptedPointerEvent): void {}\n  private onPointerEnter(_event: AdaptedPointerEvent): void {}\n  private onPointerCancel(_event: AdaptedPointerEvent): void {}\n  private onPointerOutOfBounds(_event: AdaptedPointerEvent): void {}\n\n  public setOnPointerDown(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerDown = callback;\n  }\n  public setOnPointerUp(callback: (event: AdaptedPointerEvent) => void): void {\n    this.onPointerUp = callback;\n  }\n  public setOnPointerMove(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerMove = callback;\n  }\n  public setOnPointerOut(callback: (event: AdaptedPointerEvent) => void): void {\n    this.onPointerOut = callback;\n  }\n  public setOnPointerEnter(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerEnter = callback;\n  }\n  public setOnPointerCancel(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerCancel = callback;\n  }\n  public setOnPointerOutOfBounds(\n    callback: (event: AdaptedPointerEvent) => void\n  ): void {\n    this.onPointerOutOfBounds = callback;\n  }\n\n  private mapEvent(\n    event: PointerEvent,\n    eventType: EventTypes\n  ): AdaptedPointerEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    if (!this.view) {\n      return false;\n    }\n\n    const rect: DOMRect = this.view.getBoundingClientRect();\n\n    return (\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom\n    );\n  }\n\n  private addActivePointer(pointerId: number): void {\n    if (this.activePointers.indexOf(pointerId) >= 0) {\n      return;\n    }\n\n    this.activePointers.push(pointerId);\n  }\n\n  private removeActivePointer(pointerId: number): void {\n    const index: number = this.activePointers.indexOf(pointerId);\n\n    if (index < 0) {\n      return;\n    }\n\n    this.activePointers.splice(index, 1);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}