{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { getSwitchColor } from \"./utils\";\nvar version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\n\nvar Switch = function Switch(_ref) {\n  var value = _ref.value,\n      disabled = _ref.disabled,\n      onValueChange = _ref.onValueChange,\n      color = _ref.color,\n      theme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _getSwitchColor = getSwitchColor({\n    theme: theme,\n    disabled: disabled,\n    value: value,\n    color: color\n  }),\n      checkedColor = _getSwitchColor.checkedColor,\n      onTintColor = _getSwitchColor.onTintColor,\n      thumbTintColor = _getSwitchColor.thumbTintColor;\n\n  var props = version && version.major === 0 && version.minor <= 56 ? {\n    onTintColor: onTintColor,\n    thumbTintColor: thumbTintColor\n  } : Platform.OS === 'web' ? {\n    activeTrackColor: onTintColor,\n    thumbColor: thumbTintColor,\n    activeThumbColor: checkedColor\n  } : {\n    thumbColor: thumbTintColor,\n    trackColor: {\n      true: onTintColor,\n      false: onTintColor\n    }\n  };\n  return React.createElement(NativeSwitch, _extends({\n    value: value,\n    disabled: disabled,\n    onValueChange: disabled ? undefined : onValueChange\n  }, props, rest));\n};\n\nexport default withInternalTheme(Switch);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AASA,SAASC,iBAAT;AAEA,SAASC,cAAT;AAEA,IAAMC,OAAO,GAAGC,aAAa,CAACC,iBAAdD,GACZA,aAAa,CAACC,iBAAdD,CAAgCE,kBADpBF,GAEZG,SAFJ;;AAkEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAOF;EAAA,IANXC,KAMW,GAALC,IAAK,CANXD,KAMW;EAAA,IALXE,QAKW,GAALD,IAAK,CALXC,QAKW;EAAA,IAJXC,aAIW,GAALF,IAAK,CAJXE,aAIW;EAAA,IAHXC,KAGW,GAALH,IAAK,CAHXG,KAGW;EAAA,IAFXC,KAEW,GAALJ,IAAK,CAFXI,KAEW;EAAA,IADRC,IACQ,4BAALL,IAAK;;EACX,sBAAsDR,cAAc,CAAC;IACnEY,KAAK,EAALA,KADmE;IAEnEH,QAAQ,EAARA,QAFmE;IAGnEF,KAAK,EAALA,KAHmE;IAInEI;EAJmE,CAAD,CAApE;EAAA,IAAQG,YAAR,mBAAQA,YAAR;EAAA,IAAsBC,WAAtB,mBAAsBA,WAAtB;EAAA,IAAmCC,cAAnC,mBAAmCA,cAAnC;;EAOA,IAAMC,KAAK,GACThB,OAAO,IAAIA,OAAO,CAACiB,KAARjB,KAAkB,CAA7BA,IAAkCA,OAAO,CAACkB,KAARlB,IAAiB,EAAnDA,GACI;IACEc,WAAW,EAAXA,WADF;IAEEC;EAFF,CADJf,GAKImB,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GACA;IACEE,gBAAgB,EAAEP,WADpB;IAEEQ,UAAU,EAAEP,cAFd;IAGEQ,gBAAgB,EAAEV;EAHpB,CADAM,GAMA;IACEG,UAAU,EAAEP,cADd;IAEES,UAAU,EAAE;MACVC,IAAI,EAAEX,WADI;MAEVY,KAAK,EAAEZ;IAFG;EAFd,CAZN;EAoBA,OACEjB,oBAAC8B,YAAD,EAAaC;IACXtB,KAAK,EAAEA,KADI;IAEXE,QAAQ,EAAEA,QAFC;IAGXC,aAAa,EAAED,QAAQ,GAAGJ,SAAH,GAAeK;EAH3B,GAIPO,KAJO,EAKPJ,IALO,CAAb,CADF;AASD,CA5CD;;AA8CA,eAAed,iBAAiB,CAACO,MAAD,CAAhC","names":["React","withInternalTheme","getSwitchColor","version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","value","_ref","disabled","onValueChange","color","theme","rest","checkedColor","onTintColor","thumbTintColor","props","major","minor","Platform","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","NativeSwitch","_extends"],"sources":["Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport { getSwitchColor } from './utils';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const { checkedColor, onTintColor, thumbTintColor } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color,\n  });\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: onTintColor,\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withInternalTheme(Switch);\n"]},"metadata":{},"sourceType":"module"}