{"ast":null,"code":"import StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\n\nvar isDark = function isDark(_ref) {\n  var dark = _ref.dark,\n      backgroundColor = _ref.backgroundColor;\n\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nvar getButtonBackgroundColor = function getButtonBackgroundColor(_ref2) {\n  var isMode = _ref2.isMode,\n      theme = _ref2.theme,\n      disabled = _ref2.disabled,\n      customButtonColor = _ref2.customButtonColor;\n\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nvar getButtonTextColor = function getButtonTextColor(_ref3) {\n  var isMode = _ref3.isMode,\n      theme = _ref3.theme,\n      disabled = _ref3.disabled,\n      customTextColor = _ref3.customTextColor,\n      backgroundColor = _ref3.backgroundColor,\n      dark = _ref3.dark;\n\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (isMode('contained') || isMode('contained-tonal') || isMode('elevated')) {\n        return isDark({\n          dark: dark,\n          backgroundColor: backgroundColor\n        }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({\n      dark: dark,\n      backgroundColor: backgroundColor\n    }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nvar getButtonBorderColor = function getButtonBorderColor(_ref4) {\n  var isMode = _ref4.isMode,\n      disabled = _ref4.disabled,\n      theme = _ref4.theme;\n\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black).alpha(0.29).rgb().string();\n  }\n\n  return 'transparent';\n};\n\nvar getButtonBorderWidth = function getButtonBorderWidth(_ref5) {\n  var isMode = _ref5.isMode,\n      theme = _ref5.theme;\n\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport var getButtonColors = function getButtonColors(_ref6) {\n  var theme = _ref6.theme,\n      mode = _ref6.mode,\n      customButtonColor = _ref6.customButtonColor,\n      customTextColor = _ref6.customTextColor,\n      disabled = _ref6.disabled,\n      dark = _ref6.dark;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  var backgroundColor = getButtonBackgroundColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customButtonColor: customButtonColor\n  });\n  var textColor = getButtonTextColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled,\n    customTextColor: customTextColor,\n    backgroundColor: backgroundColor,\n    dark: dark\n  });\n  var borderColor = getButtonBorderColor({\n    isMode: isMode,\n    theme: theme,\n    disabled: disabled\n  });\n  var borderWidth = getButtonBorderWidth({\n    isMode: isMode,\n    theme: theme\n  });\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    textColor: textColor,\n    borderWidth: borderWidth\n  };\n};","map":{"version":3,"mappings":"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","names":["color","black","white","isDark","dark","_ref","backgroundColor","isLight","getButtonBackgroundColor","isMode","_ref2","theme","disabled","customButtonColor","isV3","colors","surfaceDisabled","elevation","level1","primary","secondaryContainer","alpha","rgb","string","getButtonTextColor","_ref3","customTextColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","getButtonBorderColor","_ref4","outline","getButtonBorderWidth","_ref5","StyleSheet","hairlineWidth","getButtonColors","_ref6","mode","modeToCompare","textColor","borderColor","borderWidth"],"sources":["utils.tsx"],"sourcesContent":["import { StyleSheet } from 'react-native';\n\nimport color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\nexport type ButtonMode =\n  | 'text'\n  | 'outlined'\n  | 'contained'\n  | 'elevated'\n  | 'contained-tonal';\n\ntype BaseProps = {\n  isMode: (mode: ButtonMode) => boolean;\n  theme: InternalTheme;\n  disabled?: boolean;\n};\n\nconst isDark = ({\n  dark,\n  backgroundColor,\n}: {\n  dark?: boolean;\n  backgroundColor?: string;\n}) => {\n  if (typeof dark === 'boolean') {\n    return dark;\n  }\n\n  if (backgroundColor === 'transparent') {\n    return false;\n  }\n\n  if (backgroundColor !== 'transparent') {\n    return !color(backgroundColor).isLight();\n  }\n\n  return false;\n};\n\nconst getButtonBackgroundColor = ({\n  isMode,\n  theme,\n  disabled,\n  customButtonColor,\n}: BaseProps & {\n  customButtonColor?: string;\n}) => {\n  if (customButtonColor && !disabled) {\n    return customButtonColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('outlined') || isMode('text')) {\n        return 'transparent';\n      }\n\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('elevated')) {\n      return theme.colors.elevation.level1;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.secondaryContainer;\n    }\n  }\n\n  if (isMode('contained')) {\n    if (disabled) {\n      return color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    }\n\n    return theme.colors.primary;\n  }\n\n  return 'transparent';\n};\n\nconst getButtonTextColor = ({\n  isMode,\n  theme,\n  disabled,\n  customTextColor,\n  backgroundColor,\n  dark,\n}: BaseProps & {\n  customTextColor?: string;\n  backgroundColor: string;\n  dark?: boolean;\n}) => {\n  if (customTextColor && !disabled) {\n    return customTextColor;\n  }\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof dark === 'boolean') {\n      if (\n        isMode('contained') ||\n        isMode('contained-tonal') ||\n        isMode('elevated')\n      ) {\n        return isDark({ dark, backgroundColor }) ? white : black;\n      }\n    }\n\n    if (isMode('outlined') || isMode('text') || isMode('elevated')) {\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained')) {\n      return theme.colors.onPrimary;\n    }\n\n    if (isMode('contained-tonal')) {\n      return theme.colors.onSecondaryContainer;\n    }\n  }\n\n  if (disabled) {\n    return color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  }\n\n  if (isMode('contained')) {\n    return isDark({ dark, backgroundColor }) ? white : black;\n  }\n\n  return theme.colors.primary;\n};\n\nconst getButtonBorderColor = ({ isMode, disabled, theme }: BaseProps) => {\n  if (theme.isV3) {\n    if (disabled && isMode('outlined')) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.outline;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n  }\n\n  return 'transparent';\n};\n\nconst getButtonBorderWidth = ({\n  isMode,\n  theme,\n}: Omit<BaseProps, 'disabled'>) => {\n  if (theme.isV3) {\n    if (isMode('outlined')) {\n      return 1;\n    }\n  }\n\n  if (isMode('outlined')) {\n    return StyleSheet.hairlineWidth;\n  }\n\n  return 0;\n};\n\nexport const getButtonColors = ({\n  theme,\n  mode,\n  customButtonColor,\n  customTextColor,\n  disabled,\n  dark,\n}: {\n  theme: InternalTheme;\n  mode: ButtonMode;\n  customButtonColor?: string;\n  customTextColor?: string;\n  disabled?: boolean;\n  dark?: boolean;\n}) => {\n  const isMode = (modeToCompare: ButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const backgroundColor = getButtonBackgroundColor({\n    isMode,\n    theme,\n    disabled,\n    customButtonColor,\n  });\n\n  const textColor = getButtonTextColor({\n    isMode,\n    theme,\n    disabled,\n    customTextColor,\n    backgroundColor,\n    dark,\n  });\n\n  const borderColor = getButtonBorderColor({ isMode, theme, disabled });\n\n  const borderWidth = getButtonBorderWidth({ isMode, theme });\n\n  return {\n    backgroundColor,\n    borderColor,\n    textColor,\n    borderWidth,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}