{"ast":null,"code":"import InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport PanGestureHandler from \"./web/handlers/PanGestureHandler\";\nimport TapGestureHandler from \"./web/handlers/TapGestureHandler\";\nimport LongPressGestureHandler from \"./web/handlers/LongPressGestureHandler\";\nimport PinchGestureHandler from \"./web/handlers/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/handlers/RotationGestureHandler\";\nimport FlingGestureHandler from \"./web/handlers/FlingGestureHandler\";\nimport NativeViewGestureHandler from \"./web/handlers/NativeViewGestureHandler\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport HammerNativeViewGestureHandler from \"./web_hammer/NativeViewGestureHandler\";\nimport HammerPanGestureHandler from \"./web_hammer/PanGestureHandler\";\nimport HammerTapGestureHandler from \"./web_hammer/TapGestureHandler\";\nimport HammerLongPressGestureHandler from \"./web_hammer/LongPressGestureHandler\";\nimport HammerPinchGestureHandler from \"./web_hammer/PinchGestureHandler\";\nimport HammerRotationGestureHandler from \"./web_hammer/RotationGestureHandler\";\nimport HammerFlingGestureHandler from \"./web_hammer/FlingGestureHandler\";\nimport { isExperimentalWebImplementationEnabled } from \"./EnableExperimentalWebImplementation\";\nexport var Gestures = {\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  PanGestureHandler: PanGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  FlingGestureHandler: FlingGestureHandler\n};\nexport var HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler\n};\nvar interactionManager = new InteractionManager();\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      interactionManager.configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"mappings":"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","names":["InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","isExperimentalWebImplementationEnabled","Gestures","HammerGestures","interactionManager","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["RNGestureHandlerModule.web.ts"],"sourcesContent":["import { ActionType } from './ActionType';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nconst interactionManager = new InteractionManager();\n\nexport default {\n  // Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        (config as unknown) as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, (config as unknown) as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      interactionManager.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}