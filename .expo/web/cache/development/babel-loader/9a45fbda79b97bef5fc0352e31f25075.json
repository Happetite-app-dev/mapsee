{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar VELOCITY_FACTOR = 0.2;\n\nvar PointerTracker = function () {\n  function PointerTracker() {\n    _classCallCheck(this, PointerTracker);\n\n    _defineProperty(this, \"trackedPointers\", new Map());\n  }\n\n  _createClass(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n\n      var newElement = {\n        lastX: event.x,\n        lastY: event.y,\n        timeStamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var element = this.trackedPointers.get(event.pointerId);\n\n      if (!element) {\n        return;\n      }\n\n      var dx = event.x - element.lastX;\n      var dy = event.y - element.lastY;\n      var dt = event.time - element.timeStamp;\n      element.velocityX = dx / dt * 1000 * VELOCITY_FACTOR;\n      element.velocityY = dy / dt * 1000 * VELOCITY_FACTOR;\n      element.lastX = event.x;\n      element.lastY = event.y;\n      this.trackedPointers.set(event.pointerId, element);\n    }\n  }, {\n    key: \"getVelocityX\",\n    value: function getVelocityX(pointerId) {\n      var _this$trackedPointers;\n\n      return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n    }\n  }, {\n    key: \"getVelocityY\",\n    value: function getVelocityY(pointerId) {\n      var _this$trackedPointers2;\n\n      return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n    }\n  }, {\n    key: \"getLastX\",\n    value: function getLastX(pointerId) {\n      var _this$trackedPointers3;\n\n      return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n    }\n  }, {\n    key: \"getLastY\",\n    value: function getLastY(pointerId) {\n      var _this$trackedPointers4;\n\n      return (_this$trackedPointers4 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastY;\n    }\n  }, {\n    key: \"getLastAvgX\",\n    value: function getLastAvgX() {\n      return this.getSumX() / this.trackedPointers.size;\n    }\n  }, {\n    key: \"getLastAvgY\",\n    value: function getLastAvgY() {\n      return this.getSumY() / this.trackedPointers.size;\n    }\n  }, {\n    key: \"getSumX\",\n    value: function getSumX(ignoredPointer) {\n      var sumX = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumX += value.lastX;\n        }\n      });\n      return sumX;\n    }\n  }, {\n    key: \"getSumY\",\n    value: function getSumY(ignoredPointer) {\n      var sumY = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumY += value.lastY;\n        }\n      });\n      return sumY;\n    }\n  }, {\n    key: \"getTrackedPointersCount\",\n    value: function getTrackedPointersCount() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.trackedPointers;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.trackedPointers.clear();\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n\n  return PointerTracker;\n}();\n\nexport { PointerTracker as default };","map":{"version":3,"mappings":"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","names":["VELOCITY_FACTOR","PointerTracker","_defineProperty","Map","addToTracker","event","trackedPointers","has","pointerId","newElement","lastX","x","lastY","y","timeStamp","time","velocityX","velocityY","set","removeFromTracker","delete","track","element","get","dx","dy","dt","getVelocityX","_this$trackedPointers","getVelocityY","_this$trackedPointers2","getLastX","_this$trackedPointers3","getLastY","_this$trackedPointers4","getLastAvgX","getSumX","size","getLastAvgY","getSumY","ignoredPointer","sumX","forEach","value","key","sumY","getTrackedPointersCount","getTrackedPointersID","keys","_value","push","getData","resetTracker","clear","stPointers","ndPointers","some","includes"],"sources":["PointerTracker.ts"],"sourcesContent":["import { AdaptedPointerEvent } from '../interfaces';\n\ninterface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\nconst VELOCITY_FACTOR = 0.2;\n\nexport default class PointerTracker {\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  public addToTracker(event: AdaptedPointerEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n  }\n\n  public track(event: AdaptedPointerEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    const dx = event.x - element.lastX;\n    const dy = event.y - element.lastY;\n    const dt = event.time - element.timeStamp;\n\n    element.velocityX = (dx / dt) * 1000 * VELOCITY_FACTOR;\n    element.velocityY = (dy / dt) * 1000 * VELOCITY_FACTOR;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n  public getLastX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.lastX as number;\n  }\n  public getLastY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.lastY as number;\n  }\n  public getLastAvgX(): number {\n    return this.getSumX() / this.trackedPointers.size;\n  }\n  public getLastAvgY(): number {\n    return this.getSumY() / this.trackedPointers.size;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.trackedPointers.clear();\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}