{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { State } from \"../../State\";\nimport { DEFAULT_TOUCH_SLOP } from \"../constants\";\nimport { EventTypes } from \"../interfaces\";\nimport GestureHandler from \"./GestureHandler\";\nimport ScaleGestureDetector from \"../detectors/ScaleGestureDetector\";\n\nvar PinchGestureHandler = function (_GestureHandler) {\n  _inherits(PinchGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(PinchGestureHandler);\n\n  function PinchGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, PinchGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"scale\", 1);\n\n    _defineProperty(_assertThisInitialized(_this), \"velocity\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"startingSpan\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"spanSlop\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scaleDetectorListener\", {\n      onScaleBegin: function onScaleBegin(detector) {\n        _this.startingSpan = detector.getCurrentSpan();\n        return true;\n      },\n      onScale: function onScale(detector, event) {\n        var prevScaleFactor = _this.scale;\n        _this.scale *= detector.getScaleFactor(_this.tracker.getTrackedPointersCount());\n        var delta = detector.getTimeDelta();\n\n        if (delta > 0) {\n          _this.velocity = (_this.scale - prevScaleFactor) / delta;\n        }\n\n        if (Math.abs(_this.startingSpan - detector.getCurrentSpan()) >= _this.spanSlop && _this.currentState === State.BEGAN) {\n          _this.activate(event);\n        }\n\n        return true;\n      },\n      onScaleEnd: function onScaleEnd(_detector, _event) {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scaleGestureDetector\", new ScaleGestureDetector(_this.scaleDetectorListener));\n\n    return _this;\n  }\n\n  _createClass(PinchGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n\n      this.setShouldCancelWhenOutside(false);\n      this.spanSlop = DEFAULT_TOUCH_SLOP;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n          enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        enabled: enabled\n      }, props));\n\n      this.enabled = enabled;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {\n        focalX: this.scaleGestureDetector.getFocusX(),\n        focalY: this.scaleGestureDetector.getFocusY(),\n        velocity: this.velocity,\n        scale: this.scale\n      };\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n\n      this.tracker.addToTracker(event);\n\n      if (this.tracker.getTrackedPointersCount() < 2) {\n        return;\n      }\n\n      if (this.tracker.getTrackedPointersCount() > 1) {\n        this.tryBegin(event);\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n      }\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      if (this.tracker.getTrackedPointersCount() > 1) {\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        this.tracker.removeFromTracker(event.pointerId);\n      } else {\n        this.tracker.removeFromTracker(event.pointerId);\n\n        if (this.currentState !== State.ACTIVE) {\n          return;\n        }\n\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n      }\n\n      if (this.currentState === State.ACTIVE && this.tracker.getTrackedPointersCount() < 2) {\n        this.end(event);\n      } else if (event.eventType === EventTypes.UP && this.currentState !== State.BEGAN) {\n        this.fail(event);\n      }\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      if (this.tracker.getTrackedPointersCount() < 2) {\n        return;\n      }\n\n      this.tracker.track(event);\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"onPointerMove\", this).call(this, event);\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(_event) {}\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(_event) {\n      this.reset();\n    }\n  }, {\n    key: \"tryBegin\",\n    value: function tryBegin(event) {\n      if (this.currentState !== State.UNDETERMINED) {\n        return;\n      }\n\n      this.resetProgress();\n      this.begin(event);\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(event, force) {\n      if (this.currentState !== State.ACTIVE) {\n        this.resetProgress();\n      }\n\n      _get(_getPrototypeOf(PinchGestureHandler.prototype), \"activate\", this).call(this, event, force);\n    }\n  }, {\n    key: \"onReset\",\n    value: function onReset() {\n      this.resetProgress();\n    }\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {\n      if (this.currentState === State.ACTIVE) {\n        return;\n      }\n\n      this.velocity = 0;\n      this.scale = 1;\n    }\n  }]);\n\n  return PinchGestureHandler;\n}(GestureHandler);\n\nexport { PinchGestureHandler as default };","map":{"version":3,"mappings":"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","names":["State","DEFAULT_TOUCH_SLOP","EventTypes","GestureHandler","ScaleGestureDetector","PinchGestureHandler","args","_defineProperty","onScaleBegin","detector","startingSpan","getCurrentSpan","onScale","event","prevScaleFactor","scale","getScaleFactor","tracker","getTrackedPointersCount","delta","getTimeDelta","velocity","Math","abs","spanSlop","currentState","BEGAN","activate","onScaleEnd","_detector","_event","scaleDetectorListener","init","ref","propsRef","setShouldCancelWhenOutside","updateGestureConfig","enabled","props","transformNativeEvent","focalX","scaleGestureDetector","getFocusX","focalY","getFocusY","onPointerDown","addToTracker","tryBegin","onTouchEvent","onPointerUp","removeFromTracker","pointerId","ACTIVE","end","eventType","UP","fail","onPointerMove","track","onPointerOutOfBounds","onPointerCancel","reset","UNDETERMINED","resetProgress","begin","force","onReset"],"sources":["PinchGestureHandler.ts"],"sourcesContent":["import { State } from '../../State';\nimport { DEFAULT_TOUCH_SLOP } from '../constants';\nimport { AdaptedPointerEvent, EventTypes } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\nimport ScaleGestureDetector, {\n  ScaleGestureListener,\n} from '../detectors/ScaleGestureDetector';\n\nexport default class PinchGestureHandler extends GestureHandler {\n  private scale = 1;\n  private velocity = 0;\n\n  private startingSpan = 0;\n  private spanSlop = 0;\n\n  private scaleDetectorListener: ScaleGestureListener = {\n    onScaleBegin: (detector: ScaleGestureDetector): boolean => {\n      this.startingSpan = detector.getCurrentSpan();\n      return true;\n    },\n    onScale: (\n      detector: ScaleGestureDetector,\n      event: AdaptedPointerEvent\n    ): boolean => {\n      const prevScaleFactor: number = this.scale;\n      this.scale *= detector.getScaleFactor(\n        this.tracker.getTrackedPointersCount()\n      );\n\n      const delta = detector.getTimeDelta();\n      if (delta > 0) {\n        this.velocity = (this.scale - prevScaleFactor) / delta;\n      }\n\n      if (\n        Math.abs(this.startingSpan - detector.getCurrentSpan()) >=\n          this.spanSlop &&\n        this.currentState === State.BEGAN\n      ) {\n        this.activate(event);\n      }\n      return true;\n    },\n    onScaleEnd: (\n      _detector: ScaleGestureDetector,\n      _event: AdaptedPointerEvent\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ): void => {},\n  };\n\n  private scaleGestureDetector: ScaleGestureDetector = new ScaleGestureDetector(\n    this.scaleDetectorListener\n  );\n\n  public init(ref: number, propsRef: React.RefObject<unknown>) {\n    super.init(ref, propsRef);\n\n    this.setShouldCancelWhenOutside(false);\n    this.spanSlop = DEFAULT_TOUCH_SLOP;\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    this.enabled = enabled;\n  }\n\n  protected transformNativeEvent(_event: AdaptedPointerEvent) {\n    return {\n      focalX: this.scaleGestureDetector.getFocusX(),\n      focalY: this.scaleGestureDetector.getFocusY(),\n      velocity: this.velocity,\n      scale: this.scale,\n    };\n  }\n\n  protected onPointerDown(event: AdaptedPointerEvent): void {\n    super.onPointerDown(event);\n\n    this.tracker.addToTracker(event);\n\n    if (this.tracker.getTrackedPointersCount() < 2) {\n      return;\n    }\n\n    if (this.tracker.getTrackedPointersCount() > 1) {\n      this.tryBegin(event);\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    }\n  }\n  protected onPointerUp(event: AdaptedPointerEvent): void {\n    if (this.tracker.getTrackedPointersCount() > 1) {\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n      this.tracker.removeFromTracker(event.pointerId);\n    } else {\n      this.tracker.removeFromTracker(event.pointerId);\n      if (this.currentState !== State.ACTIVE) {\n        return;\n      }\n      this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    }\n    if (\n      this.currentState === State.ACTIVE &&\n      this.tracker.getTrackedPointersCount() < 2\n    ) {\n      this.end(event);\n    } else if (\n      event.eventType === EventTypes.UP &&\n      this.currentState !== State.BEGAN\n    ) {\n      this.fail(event);\n    }\n  }\n  protected onPointerMove(event: AdaptedPointerEvent): void {\n    if (this.tracker.getTrackedPointersCount() < 2) {\n      return;\n    }\n    this.tracker.track(event);\n\n    this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    super.onPointerMove(event);\n  }\n  protected onPointerOutOfBounds(_event: AdaptedPointerEvent): void {\n    //\n  }\n\n  protected onPointerCancel(_event: AdaptedPointerEvent): void {\n    this.reset();\n  }\n\n  private tryBegin(event: AdaptedPointerEvent): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.resetProgress();\n\n    this.begin(event);\n  }\n\n  protected activate(event: AdaptedPointerEvent, force?: boolean): void {\n    if (this.currentState !== State.ACTIVE) {\n      this.resetProgress();\n    }\n\n    super.activate(event, force);\n  }\n\n  protected onReset(): void {\n    this.resetProgress();\n  }\n\n  protected resetProgress(): void {\n    if (this.currentState === State.ACTIVE) {\n      return;\n    }\n\n    this.velocity = 0;\n    this.scale = 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}