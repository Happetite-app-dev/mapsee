{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { typescale } from \"./themes/v3/tokens\";\nexport var fontConfig = {\n  web: {\n    regular: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '400'\n    },\n    medium: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '500'\n    },\n    light: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '300'\n    },\n    thin: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '100'\n    }\n  },\n  ios: {\n    regular: {\n      fontFamily: 'System',\n      fontWeight: '400'\n    },\n    medium: {\n      fontFamily: 'System',\n      fontWeight: '500'\n    },\n    light: {\n      fontFamily: 'System',\n      fontWeight: '300'\n    },\n    thin: {\n      fontFamily: 'System',\n      fontWeight: '100'\n    }\n  },\n  default: {\n    regular: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'normal'\n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n      fontWeight: 'normal'\n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n      fontWeight: 'normal'\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n      fontWeight: 'normal'\n    }\n  }\n};\n\nfunction configureV2Fonts(config) {\n  var fonts = Platform.select(_objectSpread(_objectSpread({}, fontConfig), config));\n  return fonts;\n}\n\nfunction configureV3Fonts(config) {\n  if (!config) {\n    return typescale;\n  }\n\n  var isFlatConfig = Object.keys(config).every(function (key) {\n    return typeof config[key] !== 'object';\n  });\n\n  if (isFlatConfig) {\n    return Object.fromEntries(Object.entries(typescale).map(function (_ref) {\n      var _ref3 = _slicedToArray(_ref, 2),\n          variantName = _ref3[0],\n          variantProperties = _ref3[1];\n\n      return [variantName, _objectSpread(_objectSpread({}, variantProperties), config)];\n    }));\n  }\n\n  return Object.assign.apply(Object, [typescale].concat(_toConsumableArray(Object.entries(config).map(function (_ref2) {\n    var _ref4 = _slicedToArray(_ref2, 2),\n        variantName = _ref4[0],\n        variantProperties = _ref4[1];\n\n    return _defineProperty({}, variantName, _objectSpread(_objectSpread({}, typescale[variantName]), variantProperties));\n  }))));\n}\n\nexport default function configureFonts(params) {\n  var _ref6 = params || {},\n      _ref6$isV = _ref6.isV3,\n      isV3 = _ref6$isV === void 0 ? true : _ref6$isV,\n      config = _ref6.config;\n\n  if (isV3) {\n    return configureV3Fonts(config);\n  }\n\n  return configureV2Fonts(config);\n}","map":{"version":3,"mappings":"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","names":["typescale","fontConfig","web","regular","fontFamily","fontWeight","medium","light","thin","ios","default","configureV2Fonts","config","fonts","Platform","select","configureV3Fonts","isFlatConfig","Object","keys","every","key","fromEntries","entries","map","_ref","variantName","variantProperties","assign","_ref2","configureFonts","params","isV3"],"sources":["fonts.tsx"],"sourcesContent":["import { Platform, PlatformOSType } from 'react-native';\n\nimport type { Fonts, MD3Type, MD3Typescale, MD3TypescaleKey } from '../types';\nimport { typescale } from './themes/v3/tokens';\n\nexport const fontConfig = {\n  web: {\n    regular: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '400' as '400',\n    },\n    medium: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '500' as '500',\n    },\n    light: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '300' as '300',\n    },\n    thin: {\n      fontFamily: 'Roboto, \"Helvetica Neue\", Helvetica, Arial, sans-serif',\n      fontWeight: '100' as '100',\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: 'System',\n      fontWeight: '400' as '400',\n    },\n    medium: {\n      fontFamily: 'System',\n      fontWeight: '500' as '500',\n    },\n    light: {\n      fontFamily: 'System',\n      fontWeight: '300' as '300',\n    },\n    thin: {\n      fontFamily: 'System',\n      fontWeight: '100' as '100',\n    },\n  },\n  default: {\n    regular: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'normal' as 'normal',\n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n      fontWeight: 'normal' as 'normal',\n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n      fontWeight: 'normal' as 'normal',\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n      fontWeight: 'normal' as 'normal',\n    },\n  },\n};\n\ntype MD2FontsConfig = {\n  [platform in PlatformOSType | 'default']?: Fonts;\n};\n\ntype MD3FontsConfig =\n  | {\n      [key in MD3TypescaleKey]: Partial<MD3Type>;\n    }\n  | {\n      [key: string]: MD3Type;\n    }\n  | Partial<MD3Type>;\n\nfunction configureV2Fonts(config: MD2FontsConfig): Fonts {\n  const fonts = Platform.select({ ...fontConfig, ...config }) as Fonts;\n  return fonts;\n}\n\nfunction configureV3Fonts(\n  config: MD3FontsConfig\n): MD3Typescale | (MD3Typescale & { [key: string]: MD3Type }) {\n  if (!config) {\n    return typescale;\n  }\n\n  const isFlatConfig = Object.keys(config).every(\n    (key) => typeof config[key as keyof typeof config] !== 'object'\n  );\n\n  if (isFlatConfig) {\n    return Object.fromEntries(\n      Object.entries(typescale).map(([variantName, variantProperties]) => [\n        variantName,\n        { ...variantProperties, ...config },\n      ])\n    ) as MD3Typescale;\n  }\n\n  return Object.assign(\n    typescale,\n    ...Object.entries(config).map(([variantName, variantProperties]) => ({\n      [variantName]: {\n        ...typescale[variantName as MD3TypescaleKey],\n        ...variantProperties,\n      },\n    }))\n  );\n}\n\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: { isV3: false }): Fonts;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: {\n  config?: MD2FontsConfig;\n  isV3: false;\n}): Fonts;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: {\n  config?: Partial<MD3Type>;\n  isV3?: true;\n}): MD3Typescale;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: {\n  config?: Partial<Record<MD3TypescaleKey, Partial<MD3Type>>>;\n  isV3?: true;\n}): MD3Typescale;\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params: {\n  config: Record<string, MD3Type>;\n  isV3?: true;\n}): MD3Typescale & { [key: string]: MD3Type };\n// eslint-disable-next-line no-redeclare\nexport default function configureFonts(params?: any) {\n  const { isV3 = true, config } = params || {};\n\n  if (isV3) {\n    return configureV3Fonts(config);\n  }\n  return configureV2Fonts(config);\n}\n"]},"metadata":{},"sourceType":"module"}