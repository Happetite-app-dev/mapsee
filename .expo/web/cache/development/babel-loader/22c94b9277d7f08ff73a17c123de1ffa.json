{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useRef, useEffect, useState } from 'react';\nimport { askAsync, getAsync } from \"./Permissions\";\nexport function usePermissions(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isMounted = useRef(true);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _options$ask = options.ask,\n      ask = _options$ask === void 0 ? false : _options$ask,\n      _options$get = options.get,\n      get = _options$get === void 0 ? true : _options$get;\n  var types = Array.isArray(type) ? type : [type];\n  var askPermissions = useCallback(function () {\n    return askAsync.apply(void 0, _toConsumableArray(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  var getPermissions = useCallback(function () {\n    return getAsync.apply(void 0, _toConsumableArray(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  useEffect(function () {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return [data, askPermissions, getPermissions];\n}","map":{"version":3,"mappings":";;AAAA,SAASA,WAAT,EAAsBC,MAAtB,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAyD,OAAzD;AAEA,SAASC,QAAT,EAAmBC,QAAnB;AAmBA,OAAM,SAAUC,cAAV,CACJC,IADI,EAE4B;EAAA,IAAhCC,OAAgC,uEAAF,EAAE;EAEhC,IAAMC,SAAS,GAAGR,MAAM,CAAC,IAAD,CAAxB;;EACA,gBAAwBE,QAAQ,EAAhC;EAAA;EAAA,IAAOO,IAAP;EAAA,IAAaC,OAAb;;EACA,mBAAoCH,OAApC,CAAQI,GAAR;EAAA,IAAQA,GAAR,6BAAc,KAAd;EAAA,mBAAoCJ,OAApC,CAAqBK,GAArB;EAAA,IAAqBA,GAArB,6BAA2B,IAA3B;EACA,IAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcT,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA3C;EAMA,IAAMU,cAAc,GAAGjB,WAAW,CAChC;IAAA,OACEI,QAAQ,MAAR,4BAAYU,KAAZ,GAAmBI,IAAnB,CAAwB,UAACC,QAAD,EAAa;MACnC,IAAIV,SAAS,CAACW,OAAd,EAAuB;QACrBT,OAAO,CAACQ,QAAD,CAAP;MACD;IACF,CAJD,CADF;EAAA,CADgC,EAOhC,CAACZ,IAAD,CAPgC,CAAlC;EAUA,IAAMc,cAAc,GAAGrB,WAAW,CAChC;IAAA,OACEK,QAAQ,MAAR,4BAAYS,KAAZ,GAAmBI,IAAnB,CAAwB,UAACC,QAAD,EAAa;MACnC,IAAIV,SAAS,CAACW,OAAd,EAAuB;QACrBT,OAAO,CAACQ,QAAD,CAAP;MACD;IACF,CAJD,CADF;EAAA,CADgC,EAOhC,CAACZ,IAAD,CAPgC,CAAlC;EAUAL,SAAS,CAAC,YAAK;IACb,IAAIU,GAAJ,EAAS;MACPK,cAAc;IACf;;IAED,IAAI,CAACL,GAAD,IAAQC,GAAZ,EAAiB;MACfQ,cAAc;IACf;EACF,CARQ,EAQN,CAACT,GAAD,EAAMK,cAAN,EAAsBJ,GAAtB,EAA2BQ,cAA3B,CARM,CAAT;EAUAnB,SAAS,CAAC,YAAK;IACbO,SAAS,CAACW,OAAV,GAAoB,IAApB;IACA,OAAO,YAAK;MACVX,SAAS,CAACW,OAAV,GAAoB,KAApB;IACD,CAFD;EAGD,CALQ,EAKN,EALM,CAAT;EAOA,OAAO,CAACV,IAAD,EAAOO,cAAP,EAAuBI,cAAvB,CAAP;AACD","names":["useCallback","useRef","useEffect","useState","askAsync","getAsync","usePermissions","type","options","isMounted","data","setData","ask","get","types","Array","isArray","askPermissions","then","response","current","getPermissions"],"sourceRoot":"","sources":["../src/PermissionsHooks.ts"],"sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\nimport { askAsync, getAsync } from './Permissions';\nimport { PermissionResponse, PermissionType } from './Permissions.types';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.dev/versions/latest/sdk/permissions/\n * @example\n * ```tsx\n * const [permission, askPermission, getPermission] = usePermissions(Permissions.CAMERA);\n *\n * return permission?.granted\n *   ? <Camera ... />\n *   : <Button onPress={askPermission} />;\n * ```\n */\nexport function usePermissions(\n  type: PermissionType | PermissionType[],\n  options: PermissionsOptions = {}\n): [PermissionResponse | undefined, () => Promise<void>, () => Promise<void>] {\n  const isMounted = useRef(true);\n  const [data, setData] = useState<PermissionResponse>();\n  const { ask = false, get = true } = options;\n  const types = Array.isArray(type) ? type : [type];\n\n  // note: its intentional to listen to `type`, not `types`.\n  // when `type` is casted to an array, it possible creates a new one on every render.\n  // to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n  const askPermissions = useCallback(\n    () =>\n      askAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  const getPermissions = useCallback(\n    () =>\n      getAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  useEffect(() => {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n  /** If it should ask the permissions when mounted, defaults to `false` */\n  ask?: boolean;\n  /** If it should fetch information about the permissions when mounted, defaults to `true` */\n  get?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}