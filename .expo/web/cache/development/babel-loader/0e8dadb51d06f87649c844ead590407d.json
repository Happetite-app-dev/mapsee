{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nvar GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nvar googleApiKey;\nexport function setGoogleApiKey(apiKey) {\n  googleApiKey = apiKey;\n}\nexport function googleGeocodeAsync(_x) {\n  return _googleGeocodeAsync.apply(this, arguments);\n}\n\nfunction _googleGeocodeAsync() {\n  _googleGeocodeAsync = _asyncToGenerator(function* (address) {\n    assertGoogleApiKey();\n    var result = yield requestGoogleApiAsync({\n      address: address\n    });\n\n    if (result.status === 'ZERO_RESULTS') {\n      return [];\n    }\n\n    assertGeocodeResults(result);\n    return result.results.map(geocodingResultToLocation);\n  });\n  return _googleGeocodeAsync.apply(this, arguments);\n}\n\nexport function googleReverseGeocodeAsync(_x2) {\n  return _googleReverseGeocodeAsync.apply(this, arguments);\n}\n\nfunction _googleReverseGeocodeAsync() {\n  _googleReverseGeocodeAsync = _asyncToGenerator(function* (options) {\n    assertGoogleApiKey();\n    var result = yield requestGoogleApiAsync({\n      latlng: options.latitude + \",\" + options.longitude\n    });\n\n    if (result.status === 'ZERO_RESULTS') {\n      return [];\n    }\n\n    assertGeocodeResults(result);\n    return result.results.map(reverseGeocodingResultToAddress);\n  });\n  return _googleReverseGeocodeAsync.apply(this, arguments);\n}\n\nfunction assertGeocodeResults(resultObject) {\n  var status = resultObject.status,\n      error_message = resultObject.error_message;\n\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(status, 'the request could not be processed due to a server error. The request may succeed if you try again.');\n    }\n\n    throw new CodedError(status, \"An error occurred during geocoding.\");\n  }\n}\n\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error('Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.');\n  }\n}\n\nfunction requestGoogleApiAsync(_x3) {\n  return _requestGoogleApiAsync.apply(this, arguments);\n}\n\nfunction _requestGoogleApiAsync() {\n  _requestGoogleApiAsync = _asyncToGenerator(function* (params) {\n    var query = Object.entries(params).map(function (entry) {\n      return entry[0] + \"=\" + encodeURI(entry[1]);\n    }).join('&');\n    var result = yield fetch(GOOGLE_API_URL + \"?key=\" + googleApiKey + \"&\" + query);\n    return yield result.json();\n  });\n  return _requestGoogleApiAsync.apply(this, arguments);\n}\n\nfunction geocodingResultToLocation(result) {\n  var location = result.geometry.location;\n  return {\n    latitude: location.lat,\n    longitude: location.lng\n  };\n}\n\nfunction reverseGeocodingResultToAddress(result) {\n  var address = {};\n\n  for (var _ref of result.address_components) {\n    var long_name = _ref.long_name;\n    var short_name = _ref.short_name;\n    var types = _ref.types;\n\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n\n  return address;\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AAIA,IAAMC,cAAc,GAAG,mDAAvB;AACA,IAAIC,YAAJ;AAiCA,OAAM,SAAUC,eAAV,CAA0BC,MAA1B,EAAwC;EAC5CF,YAAY,GAAGE,MAAf;AACD;AAED,gBAAsBC,kBAAtB;EAAA;AAAA;;;0CAAO,WAAkCC,OAAlC,EAAiD;IACtDC,kBAAkB;IAElB,IAAMC,MAAM,SAASC,qBAAqB,CAAC;MAAEH,OAAO,EAAPA;IAAF,CAAD,CAA1C;;IAEA,IAAIE,MAAM,CAACE,MAAP,KAAkB,cAAtB,EAAsC;MACpC,OAAO,EAAP;IACD;;IACDC,oBAAoB,CAACH,MAAD,CAApB;IACA,OAAOA,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAmBC,yBAAnB,CAAP;EACD,C;;;;AAED,gBAAsBC,yBAAtB;EAAA;AAAA;;;iDAAO,WAAyCC,OAAzC,EAGN;IACCT,kBAAkB;IAElB,IAAMC,MAAM,SAASC,qBAAqB,CAAC;MACzCQ,MAAM,EAAKD,OAAO,CAACE,QAAb,SAAyBF,OAAO,CAACG;IADE,CAAD,CAA1C;;IAIA,IAAIX,MAAM,CAACE,MAAP,KAAkB,cAAtB,EAAsC;MACpC,OAAO,EAAP;IACD;;IACDC,oBAAoB,CAACH,MAAD,CAApB;IACA,OAAOA,MAAM,CAACI,OAAP,CAAeC,GAAf,CAAmBO,+BAAnB,CAAP;EACD,C;;;;AAGD,SAAST,oBAAT,CAA8BU,YAA9B,EAA+C;EAC7C,IAAQX,MAAR,GAAkCW,YAAlC,CAAQX,MAAR;EAAA,IAAgBY,aAAhB,GAAkCD,YAAlC,CAAgBC,aAAhB;;EACA,IAAIZ,MAAM,KAAK,cAAX,IAA6BA,MAAM,KAAK,IAA5C,EAAkD;IAChD,IAAIY,aAAJ,EAAmB;MACjB,MAAM,IAAItB,UAAJ,CAAeU,MAAf,EAAuBY,aAAvB,CAAN;IACD,CAFD,MAEO,IAAIZ,MAAM,KAAK,eAAf,EAAgC;MACrC,MAAM,IAAIV,UAAJ,CACJU,MADI,EAEJ,qGAFI,CAAN;IAID;;IACD,MAAM,IAAIV,UAAJ,CAAeU,MAAf,wCAAN;EACD;AACF;;AAKD,SAASH,kBAAT,GAA2B;EACzB,IAAI,CAACL,YAAL,EAAmB;IACjB,MAAM,IAAIqB,KAAJ,CACJ,4FADI,CAAN;EAGD;AACF;;SAKcd,qB;;;;;6CAAf,WACEe,MADF,EACkD;IAEhD,IAAMC,KAAK,GAAGC,MAAM,CAACC,OAAP,CAAeH,MAAf,EACXX,GADW,CACP,UAACe,KAAD;MAAA,OAAcA,KAAK,CAAC,CAAD,CAAnB,SAA0BC,SAAS,CAACD,KAAK,CAAC,CAAD,CAAN,CAAnC;IAAA,CADO,EAEXE,IAFW,CAEN,GAFM,CAAd;IAGA,IAAMtB,MAAM,SAASuB,KAAK,CAAI9B,cAAJ,aAA0BC,YAA1B,SAA0CuB,KAA1C,CAA1B;IACA,aAAajB,MAAM,CAACwB,IAAP,EAAb;EACD,C;;;;AAKD,SAASlB,yBAAT,CAAmCN,MAAnC,EAAmE;EACjE,IAAQyB,QAAR,GAAqBzB,MAAM,CAAC0B,QAA5B,CAAQD,QAAR;EACA,OAAO;IACLf,QAAQ,EAAEe,QAAQ,CAACE,GADd;IAELhB,SAAS,EAAEc,QAAQ,CAACG;EAFf,CAAP;AAID;;AAKD,SAAShB,+BAAT,CACEZ,MADF,EACkC;EAEhC,IAAMF,OAAO,GAAqC,EAAlD;;EAEA,iBAA+CE,MAAM,CAAC6B,kBAAtD,EAA0E;IAAA,IAA7DC,SAA6D,QAA7DA,SAA6D;IAAA,IAAlDC,UAAkD,QAAlDA,UAAkD;IAAA,IAAtCC,KAAsC,QAAtCA,KAAsC;;IACxE,IAAIA,KAAK,CAACC,QAAN,CAAe,UAAf,CAAJ,EAAgC;MAC9BnC,OAAO,CAACoC,IAAR,GAAeJ,SAAf;MACA;IACD;;IACD,IAAIE,KAAK,CAACC,QAAN,CAAe,aAAf,CAAJ,EAAmC;MACjCnC,OAAO,CAACqC,QAAR,GAAmBL,SAAnB;MACA;IACD;;IACD,IAAIE,KAAK,CAACC,QAAN,CAAe,eAAf,CAAJ,EAAqC;MACnCnC,OAAO,CAACsC,YAAR,GAAuBN,SAAvB;MACA;IACD;;IACD,IAAIE,KAAK,CAACC,QAAN,CAAe,gBAAf,KAAoCD,KAAK,CAACC,QAAN,CAAe,OAAf,CAAxC,EAAiE;MAC/DnC,OAAO,CAACuC,MAAR,GAAiBP,SAAjB;MACA;IACD;;IACD,IAAIE,KAAK,CAACC,QAAN,CAAe,6BAAf,CAAJ,EAAmD;MACjDnC,OAAO,CAACwC,MAAR,GAAiBR,SAAjB;MACA;IACD;;IACD,IAAIE,KAAK,CAACC,QAAN,CAAe,6BAAf,CAAJ,EAAmD;MACjDnC,OAAO,CAACyC,SAAR,GAAoBT,SAApB;MACA;IACD;;IACD,IAAIE,KAAK,CAACC,QAAN,CAAe,SAAf,CAAJ,EAA+B;MAC7BnC,OAAO,CAAC0C,OAAR,GAAkBV,SAAlB;MACAhC,OAAO,CAAC2C,cAAR,GAAyBV,UAAzB;MACA;IACD;;IACD,IAAIC,KAAK,CAACC,QAAN,CAAe,aAAf,CAAJ,EAAmC;MACjCnC,OAAO,CAAC4C,UAAR,GAAqBZ,SAArB;MACA;IACD;;IACD,IAAIE,KAAK,CAACC,QAAN,CAAe,mBAAf,CAAJ,EAAyC;MACvCnC,OAAO,CAAC6C,IAAR,GAAeb,SAAf;MACA;IACD;EACF;;EACD,IAAI,CAAChC,OAAO,CAAC6C,IAAb,EAAmB;IACjB7C,OAAO,CAAC6C,IAAR,GAAe3C,MAAM,CAAC4C,iBAAP,CAAyBC,OAAzB,CAAiC,MAAjC,EAAyC,EAAzC,CAAf;EACD;;EACD,OAAO/C,OAAP;AACD","names":["CodedError","GOOGLE_API_URL","googleApiKey","setGoogleApiKey","apiKey","googleGeocodeAsync","address","assertGoogleApiKey","result","requestGoogleApiAsync","status","assertGeocodeResults","results","map","geocodingResultToLocation","googleReverseGeocodeAsync","options","latlng","latitude","longitude","reverseGeocodingResultToAddress","resultObject","error_message","Error","params","query","Object","entries","entry","encodeURI","join","fetch","json","location","geometry","lat","lng","address_components","long_name","short_name","types","includes","city","district","streetNumber","street","region","subregion","country","isoCountryCode","postalCode","name","formatted_address","replace"],"sourceRoot":"","sources":["../src/LocationGoogleGeocoding.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { LocationGeocodedAddress, LocationGeocodedLocation } from './Location.types';\n\nconst GOOGLE_API_URL = 'https://maps.googleapis.com/maps/api/geocode/json';\nlet googleApiKey;\n\ntype GoogleApiGeocodingAddressComponent = {\n  long_name: string;\n  short_name: string;\n  types: string[];\n};\n\ntype GoogleApiGeocodingResult = {\n  address_components: GoogleApiGeocodingAddressComponent[];\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n  };\n};\n\ntype GoogleApiGeocodingResponse = {\n  results: GoogleApiGeocodingResult[];\n  status: string;\n};\n\n// @needsAudit\n/**\n * Sets a Google API Key for using Google Maps Geocoding API which is used by default on Web\n * platform and can be enabled through `useGoogleMaps` option of `geocodeAsync` and `reverseGeocodeAsync`\n * methods. It might be useful for Android devices that do not have Google Play Services, hence no\n * Geocoder Service.\n * @param apiKey Google API key obtained from Google API Console. This API key must have `Geocoding API`\n * enabled, otherwise your geocoding requests will be denied.\n */\nexport function setGoogleApiKey(apiKey: string) {\n  googleApiKey = apiKey;\n}\n\nexport async function googleGeocodeAsync(address: string): Promise<LocationGeocodedLocation[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({ address });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(geocodingResultToLocation);\n}\n\nexport async function googleReverseGeocodeAsync(options: {\n  latitude: number;\n  longitude: number;\n}): Promise<LocationGeocodedAddress[]> {\n  assertGoogleApiKey();\n\n  const result = await requestGoogleApiAsync({\n    latlng: `${options.latitude},${options.longitude}`,\n  });\n\n  if (result.status === 'ZERO_RESULTS') {\n    return [];\n  }\n  assertGeocodeResults(result);\n  return result.results.map(reverseGeocodingResultToAddress);\n}\n\n// https://developers.google.com/maps/documentation/geocoding/intro\nfunction assertGeocodeResults(resultObject: any): void {\n  const { status, error_message } = resultObject;\n  if (status !== 'ZERO_RESULTS' && status !== 'OK') {\n    if (error_message) {\n      throw new CodedError(status, error_message);\n    } else if (status === 'UNKNOWN_ERROR') {\n      throw new CodedError(\n        status,\n        'the request could not be processed due to a server error. The request may succeed if you try again.'\n      );\n    }\n    throw new CodedError(status, `An error occurred during geocoding.`);\n  }\n}\n\n/**\n * Makes sure the Google API key is set.\n */\nfunction assertGoogleApiKey() {\n  if (!googleApiKey) {\n    throw new Error(\n      'Google API key is required to use geocoding. Please set it using `setGoogleApiKey` method.'\n    );\n  }\n}\n\n/**\n * Generic and handy method for sending requests to Google Maps API endpoint.\n */\nasync function requestGoogleApiAsync(\n  params: { address: string } | { latlng: string }\n): Promise<GoogleApiGeocodingResponse> {\n  const query = Object.entries(params)\n    .map((entry) => `${entry[0]}=${encodeURI(entry[1])}`)\n    .join('&');\n  const result = await fetch(`${GOOGLE_API_URL}?key=${googleApiKey}&${query}`);\n  return await result.json();\n}\n\n/**\n * Converts Google's result to the location object.\n */\nfunction geocodingResultToLocation(result: GoogleApiGeocodingResult): LocationGeocodedLocation {\n  const { location } = result.geometry;\n  return {\n    latitude: location.lat,\n    longitude: location.lng,\n  };\n}\n\n/**\n * Converts Google's result to address object.\n */\nfunction reverseGeocodingResultToAddress(\n  result: GoogleApiGeocodingResult\n): LocationGeocodedAddress {\n  const address: Partial<LocationGeocodedAddress> = {};\n\n  for (const { long_name, short_name, types } of result.address_components) {\n    if (types.includes('locality')) {\n      address.city = long_name;\n      continue;\n    }\n    if (types.includes('sublocality')) {\n      address.district = long_name;\n      continue;\n    }\n    if (types.includes('street_number')) {\n      address.streetNumber = long_name;\n      continue;\n    }\n    if (types.includes('street_address') || types.includes('route')) {\n      address.street = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_1')) {\n      address.region = long_name;\n      continue;\n    }\n    if (types.includes('administrative_area_level_2')) {\n      address.subregion = long_name;\n      continue;\n    }\n    if (types.includes('country')) {\n      address.country = long_name;\n      address.isoCountryCode = short_name;\n      continue;\n    }\n    if (types.includes('postal_code')) {\n      address.postalCode = long_name;\n      continue;\n    }\n    if (types.includes('point_of_interest')) {\n      address.name = long_name;\n      continue;\n    }\n  }\n  if (!address.name) {\n    address.name = result.formatted_address.replace(/,.*$/, '');\n  }\n  return address as LocationGeocodedAddress;\n}\n"]},"metadata":{},"sourceType":"module"}