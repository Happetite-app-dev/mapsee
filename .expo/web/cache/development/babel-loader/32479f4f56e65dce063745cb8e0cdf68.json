{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"focusedIcon\", \"unfocusedIcon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"badge\", \"testID\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport Badge from \"../Badge\";\nimport Icon from \"../Icon\";\nimport Text from \"../Typography/Text\";\nvar badgeSize = 8;\nvar iconSize = 24;\nvar itemSize = 56;\nvar outlineHeight = 32;\n\nvar DrawerCollapsedItem = function DrawerCollapsedItem(_ref) {\n  var focusedIcon = _ref.focusedIcon,\n      unfocusedIcon = _ref.unfocusedIcon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      _ref$badge = _ref.badge,\n      badge = _ref$badge === void 0 ? false : _ref$badge,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? 'drawer-collapsed-item' : _ref$testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isV3 = theme.isV3;\n  var scale = theme.animation.scale;\n\n  var _React$useState = React.useState(1),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      numOfLines = _React$useState2[0],\n      setNumOfLines = _React$useState2[1];\n\n  var _React$useRef = React.useRef(new Animated.Value(active ? 1 : 0.5)),\n      animScale = _React$useRef.current;\n\n  React.useEffect(function () {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  var handlePressOut = function handlePressOut() {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n  var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';\n  var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;\n  var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;\n\n  var onTextLayout = function onTextLayout(_ref2) {\n    var nativeEvent = _ref2.nativeEvent;\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  var androidLetterSpacingStyle = Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  var labelTextStyle = _objectSpread({\n    color: labelColor\n  }, isV3 ? theme.fonts.labelMedium : {});\n\n  var icon = !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;\n  return React.createElement(View, rest, React.createElement(TouchableWithoutFeedback, {\n    onPress: onPress,\n    onPressOut: onPress ? handlePressOut : undefined,\n    accessibilityTraits: active ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel,\n    testID: testID\n  }, React.createElement(View, {\n    style: styles.wrapper\n  }, React.createElement(Animated.View, {\n    style: [styles.outline, !label && styles.roundedOutline, {\n      transform: [label ? {\n        scaleX: animScale\n      } : {\n        scale: animScale\n      }],\n      backgroundColor: backgroundColor\n    }, style],\n    testID: testID + \"-outline\"\n  }), React.createElement(View, {\n    style: [styles.icon, {\n      top: iconPadding\n    }],\n    testID: testID + \"-container\"\n  }, badge && React.createElement(View, {\n    style: styles.badgeContainer\n  }, typeof badge === 'boolean' ? React.createElement(Badge, {\n    visible: badge,\n    size: badgeSize\n  }) : React.createElement(Badge, {\n    visible: badge != null,\n    size: 2 * badgeSize\n  }, badge)), React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: iconColor\n  })), label ? React.createElement(Text, {\n    variant: \"labelMedium\",\n    selectable: false,\n    numberOfLines: 2,\n    onTextLayout: onTextLayout,\n    style: [styles.label, androidLetterSpacingStyle, labelTextStyle]\n  }, label) : null)));\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\nvar styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center'\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  roundedOutline: {\n    height: itemSize\n  },\n  icon: {\n    position: 'absolute'\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch'\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center'\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2\n  }\n});\nexport default withInternalTheme(DrawerCollapsedItem);","map":{"version":3,"mappings":"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","names":["React","withInternalTheme","Badge","Icon","Text","badgeSize","iconSize","itemSize","outlineHeight","DrawerCollapsedItem","focusedIcon","_ref","unfocusedIcon","label","active","theme","style","onPress","accessibilityLabel","badge","testID","rest","isV3","scale","animation","useState","numOfLines","setNumOfLines","useRef","Animated","Value","animScale","current","useEffect","setValue","handlePressOut","timing","toValue","duration","useNativeDriver","start","iconPadding","backgroundColor","colors","secondaryContainer","labelColor","onSurface","onSurfaceVariant","iconColor","onSecondaryContainer","onTextLayout","nativeEvent","_ref2","lines","length","androidLetterSpacingStyle","Platform","OS","styles","letterSpacing","labelTextStyle","color","fonts","labelMedium","icon","undefined","View","TouchableWithoutFeedback","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","outline","roundedOutline","transform","scaleX","top","badgeContainer","visible","size","source","variant","selectable","numberOfLines","displayName","StyleSheet","create","width","marginBottom","minHeight","alignItems","height","borderRadius","justifyContent","position","alignSelf","marginHorizontal","marginTop","textAlign","left","bottom","zIndex"],"sources":["DrawerCollapsedItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextLayoutEventData,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport Badge from '../Badge';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label?: string;\n  /**\n   * Badge to show on the icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  badge?: string | number | boolean;\n  /**\n   * Icon to use as the focused destination icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   */\n  focusedIcon?: IconSource;\n  /**\n   * Icon to use as the unfocused destination icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   */\n  unfocusedIcon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst badgeSize = 8;\nconst iconSize = 24;\nconst itemSize = 56;\nconst outlineHeight = 32;\n\n/**\n * @supported Available in v5.x with theme version 3\n * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/drawer-collapsed.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.CollapsedItem\n *      focusedIcon=\"inbox\"\n *      unfocusedIcon=\"inbox-outline\"\n *      label=\"Inbox\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerCollapsedItem = ({\n  focusedIcon,\n  unfocusedIcon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  badge = false,\n  testID = 'drawer-collapsed-item',\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const { scale } = theme.animation;\n\n  const [numOfLines, setNumOfLines] = React.useState(1);\n\n  const { current: animScale } = React.useRef<Animated.Value>(\n    new Animated.Value(active ? 1 : 0.5)\n  );\n\n  React.useEffect(() => {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  const handlePressOut = () => {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n\n  const backgroundColor = active\n    ? theme.colors.secondaryContainer\n    : 'transparent';\n  const labelColor = active\n    ? theme.colors.onSurface\n    : theme.colors.onSurfaceVariant;\n  const iconColor = active\n    ? theme.colors.onSecondaryContainer\n    : theme.colors.onSurfaceVariant;\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  // Label is cut off on Android, when centered \"labelMedium\" text\n  // has more than 4 lines, so there is a need to decrease the letter spacing.\n  const androidLetterSpacingStyle =\n    Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  const labelTextStyle = {\n    color: labelColor,\n    ...(isV3 ? theme.fonts.labelMedium : {}),\n  };\n\n  const icon =\n    !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;\n\n  return (\n    <View {...rest}>\n      {/* eslint-disable-next-line react-native-a11y/has-accessibility-props */}\n      <TouchableWithoutFeedback\n        onPress={onPress}\n        onPressOut={onPress ? handlePressOut : undefined}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n        testID={testID}\n      >\n        <View style={styles.wrapper}>\n          <Animated.View\n            style={[\n              styles.outline,\n              !label && styles.roundedOutline,\n              {\n                transform: [\n                  label\n                    ? {\n                        scaleX: animScale,\n                      }\n                    : { scale: animScale },\n                ],\n                backgroundColor,\n              },\n              style,\n            ]}\n            testID={`${testID}-outline`}\n          />\n\n          <View\n            style={[styles.icon, { top: iconPadding }]}\n            testID={`${testID}-container`}\n          >\n            {badge && (\n              <View style={styles.badgeContainer}>\n                {typeof badge === 'boolean' ? (\n                  <Badge visible={badge} size={badgeSize} />\n                ) : (\n                  <Badge visible={badge != null} size={2 * badgeSize}>\n                    {badge}\n                  </Badge>\n                )}\n              </View>\n            )}\n            <Icon source={icon} size={iconSize} color={iconColor} />\n          </View>\n\n          {label ? (\n            <Text\n              variant=\"labelMedium\"\n              selectable={false}\n              numberOfLines={2}\n              onTextLayout={onTextLayout}\n              style={[styles.label, androidLetterSpacingStyle, labelTextStyle]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center',\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  roundedOutline: {\n    height: itemSize,\n  },\n  icon: {\n    position: 'absolute',\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch',\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2,\n  },\n});\n\nexport default withInternalTheme(DrawerCollapsedItem);\n"]},"metadata":{},"sourceType":"module"}