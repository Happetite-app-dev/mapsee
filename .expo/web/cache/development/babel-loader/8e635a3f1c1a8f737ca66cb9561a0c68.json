{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { ref, onValue, set, push, remove, off } from \"firebase/database\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { database } from \"../firebase\";\nvar db = database;\n\nvar saveToken = function () {\n  var _ref = _asyncToGenerator(function* (token, myUID) {\n    var reference1 = ref(db, \"/users/\" + myUID + \"/pushToken\");\n    set(reference1, token);\n  });\n\n  return function saveToken(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true\n      };\n    });\n\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n\n    return handleNotification;\n  }()\n});\n\nvar GeneratePushToken = function GeneratePushToken(myUID) {\n  registerForPushNotificationsAsync().then(function (token) {\n    return saveToken(token, myUID);\n  });\n\n  function registerForPushNotificationsAsync() {\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n\n  function _registerForPushNotificationsAsync() {\n    _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n      var token;\n\n      if (Device.isDevice) {\n        var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n            existingStatus = _yield$Notifications$.status;\n\n        var finalStatus = existingStatus;\n\n        if (existingStatus !== \"granted\") {\n          var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n              status = _yield$Notifications$2.status;\n\n          finalStatus = status;\n        }\n\n        if (finalStatus !== \"granted\") {\n          alert(\"Failed to get push token for push notification!\");\n          return;\n        }\n\n        token = (yield Notifications.getExpoPushTokenAsync()).data;\n      } else {\n        alert(\"Must use physical device for Push Notifications\");\n      }\n\n      if (Platform.OS === \"android\") {\n        Notifications.setNotificationChannelAsync(\"default\", {\n          name: \"default\",\n          importance: Notifications.AndroidImportance.MAX,\n          vibrationPattern: [0, 250, 250, 250],\n          lightColor: \"#FF231F7C\"\n        });\n      }\n\n      return token;\n    });\n    return _registerForPushNotificationsAsync.apply(this, arguments);\n  }\n};\n\nexport default GeneratePushToken;","map":{"version":3,"names":["Device","Notifications","ref","onValue","set","push","remove","off","database","db","saveToken","token","myUID","reference1","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","GeneratePushToken","registerForPushNotificationsAsync","then","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","data","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"sources":["/Users/jeongin/mapsee_2/modules/GeneratePushToken.js"],"sourcesContent":["import * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { ref, onValue, set, push, remove, off } from \"firebase/database\";\nimport { Platform } from \"react-native\";\n\nimport { database } from \"../firebase\";\nconst db = database;\nconst saveToken = async (token, myUID) => {\n  const reference1 = ref(db, \"/users/\" + myUID + \"/pushToken\");\n  set(reference1, token);\n};\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nconst GeneratePushToken = (myUID) => {\n  // const myContext = useContext(AppContext);\n  // const myUID = myContext.myUID;\n  // const [expoPushToken, setExpoPushToken] = useState(\"\");\n  // const [notification, setNotification] = useState(false);\n  // const notificationListener = useRef();\n  // const responseListener = useRef();\n  registerForPushNotificationsAsync().then((token) => saveToken(token, myUID));\n  // useEffect(() => {\n  //   //expoPushToken에 token 저장\n  //   registerForPushNotificationsAsync().then((token) =>\n  //     setExpoPushToken(token)\n  //   );\n\n  //   // This listener is fired whenever a notification is received while the app is foregrounded\n  //   notificationListener.current =\n  //     Notifications.addNotificationReceivedListener((notification) => {\n  //       setNotification(notification);\n  //     });\n\n  //   // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n  //   responseListener.current =\n  //     Notifications.addNotificationResponseReceivedListener((response) => {\n  //       console.log(response);\n  //     });\n\n  //   return () => {\n  //     Notifications.removeNotificationSubscription(\n  //       notificationListener.current\n  //     );\n  //     Notifications.removeNotificationSubscription(responseListener.current);\n  //   };\n  // }, []);\n\n  //token을 device에서 갖고옴.\n  async function registerForPushNotificationsAsync() {\n    let token;\n    if (Device.isDevice) {\n      const { status: existingStatus } =\n        await Notifications.getPermissionsAsync();\n      let finalStatus = existingStatus;\n      if (existingStatus !== \"granted\") {\n        //useState를 만들어서 existingStatus가 \"granted\"가 아니라면, 나중에 saveToken할 때 sendPushNotification을 스스로한테 해주기\n        const { status } = await Notifications.requestPermissionsAsync();\n        finalStatus = status;\n      }\n      if (finalStatus !== \"granted\") {\n        alert(\"Failed to get push token for push notification!\");\n        return;\n      }\n      token = (await Notifications.getExpoPushTokenAsync()).data;\n      //console.log(token);\n    } else {\n      alert(\"Must use physical device for Push Notifications\");\n    }\n\n    if (Platform.OS === \"android\") {\n      Notifications.setNotificationChannelAsync(\"default\", {\n        name: \"default\",\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: \"#FF231F7C\",\n      });\n    }\n\n    //myUID에 token을 새롭게 저장.-->계정이 로그인된 가장 최근 기기에 push 알림이 오는것이 자연스럽다!\n    //saveToken(token, myUID);\n\n    return token;\n  }\n};\n\nexport default GeneratePushToken;\n"],"mappings":";AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkCC,MAAlC,EAA0CC,GAA1C,QAAqD,mBAArD;;AAGA,SAASC,QAAT;AACA,IAAMC,EAAE,GAAGD,QAAX;;AACA,IAAME,SAAS;EAAA,6BAAG,WAAOC,KAAP,EAAcC,KAAd,EAAwB;IACxC,IAAMC,UAAU,GAAGX,GAAG,CAACO,EAAD,EAAK,YAAYG,KAAZ,GAAoB,YAAzB,CAAtB;IACAR,GAAG,CAACS,UAAD,EAAaF,KAAb,CAAH;EACD,CAHc;;EAAA,gBAATD,SAAS;IAAA;EAAA;AAAA,GAAf;;AAKAT,aAAa,CAACa,sBAAd,CAAqC;EACnCC,kBAAkB;IAAA,4CAAE;MAAA,OAAa;QAC/BC,eAAe,EAAE,IADc;QAE/BC,eAAe,EAAE,IAFc;QAG/BC,cAAc,EAAE;MAHe,CAAb;IAAA,CAAF;;IAAA;MAAA;IAAA;;IAAA;EAAA;AADiB,CAArC;;AAQA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACP,KAAD,EAAW;EAOnCQ,iCAAiC,GAAGC,IAApC,CAAyC,UAACV,KAAD;IAAA,OAAWD,SAAS,CAACC,KAAD,EAAQC,KAAR,CAApB;EAAA,CAAzC;;EAPmC,SAmCpBQ,iCAnCoB;IAAA;EAAA;;EAAA;IAAA,uDAmCnC,aAAmD;MACjD,IAAIT,KAAJ;;MACA,IAAIX,MAAM,CAACsB,QAAX,EAAqB;QACnB,kCACQrB,aAAa,CAACsB,mBAAd,EADR;QAAA,IAAgBC,cAAhB,yBAAQC,MAAR;;QAEA,IAAIC,WAAW,GAAGF,cAAlB;;QACA,IAAIA,cAAc,KAAK,SAAvB,EAAkC;UAEhC,mCAAyBvB,aAAa,CAAC0B,uBAAd,EAAzB;UAAA,IAAQF,MAAR,0BAAQA,MAAR;;UACAC,WAAW,GAAGD,MAAd;QACD;;QACD,IAAIC,WAAW,KAAK,SAApB,EAA+B;UAC7BE,KAAK,CAAC,iDAAD,CAAL;UACA;QACD;;QACDjB,KAAK,GAAG,OAAOV,aAAa,CAAC4B,qBAAd,EAAP,EAA8CC,IAAtD;MAED,CAfD,MAeO;QACLF,KAAK,CAAC,iDAAD,CAAL;MACD;;MAED,IAAIG,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;QAC7B/B,aAAa,CAACgC,2BAAd,CAA0C,SAA1C,EAAqD;UACnDC,IAAI,EAAE,SAD6C;UAEnDC,UAAU,EAAElC,aAAa,CAACmC,iBAAd,CAAgCC,GAFO;UAGnDC,gBAAgB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAHiC;UAInDC,UAAU,EAAE;QAJuC,CAArD;MAMD;;MAKD,OAAO5B,KAAP;IACD,CArEkC;IAAA;EAAA;AAsEpC,CAtED;;AAwEA,eAAeQ,iBAAf"},"metadata":{},"sourceType":"module"}