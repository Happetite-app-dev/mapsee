{"ast":null,"code":"import color from 'color';\n\nvar getUnderlayColor = function getUnderlayColor(_ref) {\n  var theme = _ref.theme,\n      calculatedRippleColor = _ref.calculatedRippleColor,\n      underlayColor = _ref.underlayColor;\n\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nvar getRippleColor = function getRippleColor(_ref2) {\n  var theme = _ref2.theme,\n      rippleColor = _ref2.rippleColor;\n\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport var getTouchableRippleColors = function getTouchableRippleColors(_ref3) {\n  var theme = _ref3.theme,\n      rippleColor = _ref3.rippleColor,\n      underlayColor = _ref3.underlayColor;\n  var calculatedRippleColor = getRippleColor({\n    theme: theme,\n    rippleColor: rippleColor\n  });\n  return {\n    calculatedRippleColor: calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme: theme,\n      calculatedRippleColor: calculatedRippleColor,\n      underlayColor: underlayColor\n    })\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAQnB;EAAA,IAPJC,KAOI,GAALC,IAAK,CAPJD,KAOI;EAAA,IANJE,qBAMI,GAALD,IAAK,CANJC,qBAMI;EAAA,IALJC,aAKI,GAALF,IAAK,CALJE,aAKI;;EACJ,IAAIA,aAAa,IAAI,IAArB,EAA2B;IACzB,OAAOA,aAAP;EACF;;EAEA,IAAIH,KAAK,CAACI,IAAV,EAAgB;IACd,OAAON,KAAK,CAACI,qBAAD,CAALJ,CAA6BO,GAA7BP,GAAmCQ,MAAnCR,EAAP;EACF;;EAEA,OAAOA,KAAK,CAACI,qBAAD,CAALJ,CAA6BS,IAA7BT,CAAkC,GAAlCA,EAAuCO,GAAvCP,GAA6CQ,MAA7CR,EAAP;AACD,CAlBD;;AAoBA,IAAMU,cAAc,GAAG,SAAjBA,cAAiB,QAMjB;EAAA,IALJR,KAKI,GAALS,KAAK,CALJT,KAKI;EAAA,IAJJU,WAII,GAALD,KAAK,CAJJC,WAII;;EACJ,IAAIA,WAAJ,EAAiB;IACf,OAAOA,WAAP;EACF;;EAEA,IAAIV,KAAK,CAACI,IAAV,EAAgB;IACd,OAAON,KAAK,CAACE,KAAK,CAACW,MAANX,CAAaY,SAAd,CAALd,CAA8Be,KAA9Bf,CAAoC,IAApCA,EAA0CO,GAA1CP,GAAgDQ,MAAhDR,EAAP;EACF;;EAEA,IAAIE,KAAK,CAACc,IAAV,EAAgB;IACd,OAAOhB,KAAK,CAACE,KAAK,CAACW,MAANX,CAAae,IAAd,CAALjB,CAAyBe,KAAzBf,CAA+B,IAA/BA,EAAqCO,GAArCP,GAA2CQ,MAA3CR,EAAP;EACF;;EACA,OAAOA,KAAK,CAACE,KAAK,CAACW,MAANX,CAAae,IAAd,CAALjB,CAAyBe,KAAzBf,CAA+B,GAA/BA,EAAoCO,GAApCP,GAA0CQ,MAA1CR,EAAP;AACD,CAnBD;;AAqBA,OAAO,IAAMkB,wBAAwB,GAAG,SAA3BA,wBAA2B,QAQlC;EAAA,IAPJhB,KAOI,GAALiB,KAAK,CAPJjB,KAOI;EAAA,IANJU,WAMI,GAALO,KAAK,CANJP,WAMI;EAAA,IALJP,aAKI,GAALc,KAAK,CALJd,aAKI;EACJ,IAAMD,qBAAqB,GAAGM,cAAc,CAAC;IAAER,KAAK,EAALA,KAAF;IAASU;EAAT,CAAD,CAA5C;EACA,OAAO;IACLR,qBAAqB,EAArBA,qBADK;IAELgB,uBAAuB,EAAEnB,gBAAgB,CAAC;MACxCC,KAAK,EAALA,KADwC;MAExCE,qBAAqB,EAArBA,qBAFwC;MAGxCC;IAHwC,CAAD;EAFpC,CAAP;AAQD,CAlBM","names":["color","getUnderlayColor","theme","_ref","calculatedRippleColor","underlayColor","isV3","rgb","string","fade","getRippleColor","_ref2","rippleColor","colors","onSurface","alpha","dark","text","getTouchableRippleColors","_ref3","calculatedUnderlayColor"],"sources":["utils.ts"],"sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\nconst getUnderlayColor = ({\n  theme,\n  calculatedRippleColor,\n  underlayColor,\n}: {\n  theme: InternalTheme;\n  calculatedRippleColor: string;\n  underlayColor?: string;\n}) => {\n  if (underlayColor != null) {\n    return underlayColor;\n  }\n\n  if (theme.isV3) {\n    return color(calculatedRippleColor).rgb().string();\n  }\n\n  return color(calculatedRippleColor).fade(0.5).rgb().string();\n};\n\nconst getRippleColor = ({\n  theme,\n  rippleColor,\n}: {\n  theme: InternalTheme;\n  rippleColor?: string;\n}) => {\n  if (rippleColor) {\n    return rippleColor;\n  }\n\n  if (theme.isV3) {\n    return color(theme.colors.onSurface).alpha(0.12).rgb().string();\n  }\n\n  if (theme.dark) {\n    return color(theme.colors.text).alpha(0.32).rgb().string();\n  }\n  return color(theme.colors.text).alpha(0.2).rgb().string();\n};\n\nexport const getTouchableRippleColors = ({\n  theme,\n  rippleColor,\n  underlayColor,\n}: {\n  theme: InternalTheme;\n  rippleColor?: string;\n  underlayColor?: string;\n}) => {\n  const calculatedRippleColor = getRippleColor({ theme, rippleColor });\n  return {\n    calculatedRippleColor,\n    calculatedUnderlayColor: getUnderlayColor({\n      theme,\n      calculatedRippleColor,\n      underlayColor,\n    }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}