{"ast":null,"code":"import URL from 'url-parse';\nexport function getFilename(url) {\n  var _URL = new URL(url, {}),\n      pathname = _URL.pathname;\n\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\nexport function getFileExtension(url) {\n  var filename = getFilename(url);\n  var dotIndex = filename.lastIndexOf('.');\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\nexport function getManifestBaseUrl(manifestUrl) {\n  var urlObject = new URL(manifestUrl, {});\n\n  if (urlObject.protocol === 'exp:') {\n    urlObject.set('protocol', 'http:');\n  } else if (urlObject.protocol === 'exps:') {\n    urlObject.set('protocol', 'https:');\n  }\n\n  var directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.set('pathname', directory);\n  urlObject.set('query', '');\n  urlObject.set('hash', '');\n  return urlObject.href;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,GAAP,MAAgB,WAAhB;AAEA,OAAM,SAAUC,WAAV,CAAsBC,GAAtB,EAAiC;EACrC,WAAqB,IAAIF,GAAJ,CAAQE,GAAR,EAAa,EAAb,CAArB;EAAA,IAAQC,QAAR,QAAQA,QAAR;;EACA,OAAOA,QAAQ,CAACC,SAAT,CAAmBD,QAAQ,CAACE,WAAT,CAAqB,GAArB,IAA4B,CAA/C,CAAP;AACD;AAED,OAAM,SAAUC,gBAAV,CAA2BJ,GAA3B,EAAsC;EAC1C,IAAMK,QAAQ,GAAGN,WAAW,CAACC,GAAD,CAA5B;EACA,IAAMM,QAAQ,GAAGD,QAAQ,CAACF,WAAT,CAAqB,GAArB,CAAjB;EAEA,OAAOG,QAAQ,GAAG,CAAX,GAAeD,QAAQ,CAACH,SAAT,CAAmBI,QAAnB,CAAf,GAA8C,EAArD;AACD;AAaD,OAAM,SAAUC,kBAAV,CAA6BC,WAA7B,EAAgD;EACpD,IAAMC,SAAS,GAAG,IAAIX,GAAJ,CAAQU,WAAR,EAAqB,EAArB,CAAlB;;EAGA,IAAIC,SAAS,CAACC,QAAV,KAAuB,MAA3B,EAAmC;IACjCD,SAAS,CAACE,GAAV,CAAc,UAAd,EAA0B,OAA1B;EACD,CAFD,MAEO,IAAIF,SAAS,CAACC,QAAV,KAAuB,OAA3B,EAAoC;IACzCD,SAAS,CAACE,GAAV,CAAc,UAAd,EAA0B,QAA1B;EACD;;EAGD,IAAMC,SAAS,GAAGH,SAAS,CAACR,QAAV,CAAmBC,SAAnB,CAA6B,CAA7B,EAAgCO,SAAS,CAACR,QAAV,CAAmBE,WAAnB,CAA+B,GAA/B,IAAsC,CAAtE,CAAlB;EACAM,SAAS,CAACE,GAAV,CAAc,UAAd,EAA0BC,SAA1B;EACAH,SAAS,CAACE,GAAV,CAAc,OAAd,EAAuB,EAAvB;EACAF,SAAS,CAACE,GAAV,CAAc,MAAd,EAAsB,EAAtB;EAEA,OAAOF,SAAS,CAACI,IAAjB;AACD","names":["URL","getFilename","url","pathname","substring","lastIndexOf","getFileExtension","filename","dotIndex","getManifestBaseUrl","manifestUrl","urlObject","protocol","set","directory","href"],"sourceRoot":"","sources":["../src/AssetUris.ts"],"sourcesContent":["import URL from 'url-parse';\n\nexport function getFilename(url: string): string {\n  const { pathname } = new URL(url, {});\n  return pathname.substring(pathname.lastIndexOf('/') + 1);\n}\n\nexport function getFileExtension(url: string): string {\n  const filename = getFilename(url);\n  const dotIndex = filename.lastIndexOf('.');\n  // Ignore leading dots for hidden files\n  return dotIndex > 0 ? filename.substring(dotIndex) : '';\n}\n\n/**\n * Returns the base URL from a manifest's URL. For example, given a manifest hosted at\n * https://example.com/app/manifest.json, the base URL would be https://example.com/app/. Query\n * parameters and fragments also are removed.\n *\n * For an Expo-hosted project with a manifest hosted at https://exp.host/@user/project/index.exp, the\n * base URL would be https://exp.host/@user/project.\n *\n * We also normalize the \"exp\" protocol to \"http\" to handle internal URLs with the Expo schemes used\n * to tell the OS to open the URLs in the the Expo client.\n */\nexport function getManifestBaseUrl(manifestUrl: string): string {\n  const urlObject = new URL(manifestUrl, {});\n\n  // Change the scheme to http(s) if it is exp(s)\n  if (urlObject.protocol === 'exp:') {\n    urlObject.set('protocol', 'http:');\n  } else if (urlObject.protocol === 'exps:') {\n    urlObject.set('protocol', 'https:');\n  }\n\n  // Trim filename, query parameters, and fragment, if any\n  const directory = urlObject.pathname.substring(0, urlObject.pathname.lastIndexOf('/') + 1);\n  urlObject.set('pathname', directory);\n  urlObject.set('query', '');\n  urlObject.set('hash', '');\n\n  return urlObject.href;\n}\n"]},"metadata":{},"sourceType":"module"}