{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"size\", \"style\", \"theme\", \"labelStyle\", \"color\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/themes/v2/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nimport Text from \"../Typography/Text\";\nvar defaultSize = 64;\n\nvar AvatarText = function AvatarText(_ref) {\n  var _theme$colors;\n\n  var label = _ref.label,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      labelStyle = _ref.labelStyle,\n      customColor = _ref.color,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var textColor = customColor !== null && customColor !== void 0 ? customColor : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  var _useWindowDimensions = useWindowDimensions(),\n      fontScale = _useWindowDimensions.fontScale;\n\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size / fontScale\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\n\nAvatarText.displayName = 'Avatar.Text';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default withInternalTheme(AvatarText);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAUA,SAASC,iBAAT;AACA,SAASC,KAAT;AAEA,OAAOC,mBAAP;AACA,OAAOC,IAAP;AAEA,IAAMC,WAAW,GAAG,EAApB;;AAgDA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAQN;EAAA;;EAAA,IAPXC,KAOW,GAALC,IAAK,CAPXD,KAOW;EAAA,gBAALC,IAAK,CANXC,IAMW;EAAA,IANXA,IAMW,0BANJJ,WAMI;EAAA,IALXK,KAKW,GAALF,IAAK,CALXE,KAKW;EAAA,IAJXC,KAIW,GAALH,IAAK,CAJXG,KAIW;EAAA,IAHXC,UAGW,GAALJ,IAAK,CAHXI,UAGW;EAAA,IAFJC,WAEI,GAALL,IAAK,CAFXM,KAEW;EAAA,IADRC,IACQ,4BAALP,IAAK;;EACX,YACEQ,UAAU,CAACC,OAAXD,CAAmBN,KAAnBM,KAA6B,EAD/B;EAAA,kCAAQE,eAAR;EAAA,IAAQA,eAAR,sCAAuB,iBAAGP,KAAK,CAACQ,MAAT,MAAe,IAAf,IAAeC,wBAAf,GAAe,MAAf,GAAGA,cAAcC,OAAxC;EAAA,IAAoDC,SAApD;;EAEA,IAAMC,SAAS,GACbV,WAAW,SAAXA,eAAW,WAAXA,iBACAV,mBAAmB,CAACe,eAAD,EAAkBhB,KAAlB,EAAyB,oBAAzB,CAFrB;;EAGA,2BAAsBsB,mBAAmB,EAAzC;EAAA,IAAQC,SAAR,wBAAQA,SAAR;;EAEA,OACEzB,oBAAC0B,IAAD,EAAKC;IACHjB,KAAK,EAAE,CACL;MACEkB,KAAK,EAAEnB,IADT;MAEEoB,MAAM,EAAEpB,IAFV;MAGEqB,YAAY,EAAErB,IAAI,GAAG,CAHvB;MAIES;IAJF,CADK,EAOLa,MAAM,CAACC,SAPF,EAQLV,SARK;EADJ,GAWCP,IAXD,CAAL,EAaEf,oBAACI,IAAD,EAAK;IACHM,KAAK,EAAE,CACLqB,MAAM,CAACE,IADF,EAEL;MACEnB,KAAK,EAAES,SADT;MAEEW,QAAQ,EAAEzB,IAAI,GAAG,CAFnB;MAGE0B,UAAU,EAAE1B,IAAI,GAAGgB;IAHrB,CAFK,EAOLb,UAPK,CADJ;IAUHwB,aAAa,EAAE;EAVZ,CAAL,EAYG7B,KAZH,CAbF,CADF;AA8BD,CA9CD;;AAgDAD,UAAU,CAAC+B,WAAX/B,GAAyB,aAAzBA;AAEA,IAAMyB,MAAM,GAAGf,UAAU,CAACsB,MAAXtB,CAAkB;EAC/BgB,SAAS,EAAE;IACTO,cAAc,EAAE,QADP;IAETC,UAAU,EAAE;EAFH,CADoB;EAK/BP,IAAI,EAAE;IACJQ,SAAS,EAAE,QADP;IAEJC,iBAAiB,EAAE;EAFf;AALyB,CAAlB1B,CAAf;AAWA,eAAef,iBAAiB,CAACK,UAAD,CAAhC","names":["React","withInternalTheme","white","getContrastingColor","Text","defaultSize","AvatarText","label","_ref","size","style","theme","labelStyle","customColor","color","rest","StyleSheet","flatten","backgroundColor","colors","_theme$colors","primary","restStyle","textColor","useWindowDimensions","fontScale","View","_extends","width","height","borderRadius","styles","container","text","fontSize","lineHeight","numberOfLines","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"sources":["AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  useWindowDimensions,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport Text from '../Typography/Text';\n\nconst defaultSize = 64;\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  theme,\n  labelStyle,\n  color: customColor,\n  ...rest\n}: Props) => {\n  const { backgroundColor = theme.colors?.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  const { fontScale } = useWindowDimensions();\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size / fontScale,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withInternalTheme(AvatarText);\n"]},"metadata":{},"sourceType":"module"}