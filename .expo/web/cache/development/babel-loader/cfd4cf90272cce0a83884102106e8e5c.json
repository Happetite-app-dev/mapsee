{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from \"./ProviderConstants\";\nexport var SUPPORTED = 'SUPPORTED';\nexport var USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport var NOT_SUPPORTED = 'NOT_SUPPORTED';\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n\n  return 'AIRMap';\n}\n\nfunction getAirComponentName(provider, component) {\n  return \"\" + getAirMapName(provider) + component;\n}\n\nexport var contextTypes = {\n  provider: PropTypes.string\n};\nexport var createNotSupportedComponent = function createNotSupportedComponent(message) {\n  return function () {\n    console.error(message);\n    return null;\n  };\n};\n\nfunction getViewManagerConfig(viewManagerName) {\n  var UIManager = NativeModules.UIManager;\n\n  if (!UIManager.getViewManagerConfig) {\n    return UIManager[viewManagerName];\n  }\n\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\nexport var googleMapIsInstalled = !!getViewManagerConfig(getAirMapName(PROVIDER_GOOGLE));\nexport default function decorateMapComponent(Component, _ref) {\n  var componentType = _ref.componentType,\n      providers = _ref.providers;\n  var components = {};\n\n  var getDefaultComponent = function getDefaultComponent() {\n    return requireNativeComponent(getAirComponentName(null, componentType), Component);\n  };\n\n  Component.contextTypes = contextTypes;\n\n  Component.prototype.getAirComponent = function getAirComponent() {\n    var provider = this.context.provider || PROVIDER_DEFAULT;\n\n    if (components[provider]) {\n      return components[provider];\n    }\n\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n\n    var providerInfo = providers[provider];\n    var platformSupport = providerInfo[Platform.OS];\n    var componentName = getAirComponentName(provider, componentType);\n\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(\"react-native-maps: \" + componentName + \" is not supported on \" + Platform.OS);\n    } else if (platformSupport === SUPPORTED) {\n      if (provider !== PROVIDER_GOOGLE || Platform.OS === 'ios' && googleMapIsInstalled) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else {\n      if (!components[PROVIDER_DEFAULT]) {\n        components[PROVIDER_DEFAULT] = getDefaultComponent();\n      }\n\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n\n    return components[provider];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    var componentName = getAirComponentName(this.context.provider, componentType);\n    return getViewManagerConfig(componentName).Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(name) {\n    var airComponentName = getAirComponentName(this.context.provider, componentType) + \"Manager\";\n    return NativeModules[airComponentName][name];\n  };\n\n  return Component;\n}","map":{"version":3,"names":["PropTypes","requireNativeComponent","PROVIDER_DEFAULT","PROVIDER_GOOGLE","SUPPORTED","USES_DEFAULT_IMPLEMENTATION","NOT_SUPPORTED","getAirMapName","provider","Platform","OS","getAirComponentName","component","contextTypes","string","createNotSupportedComponent","message","console","error","getViewManagerConfig","viewManagerName","UIManager","NativeModules","googleMapIsInstalled","decorateMapComponent","Component","componentType","providers","components","getDefaultComponent","prototype","getAirComponent","context","providerInfo","platformSupport","componentName","getUIManagerCommand","name","Commands","getMapManagerCommand","airComponentName"],"sources":["/Users/jeongin/mapsee_2/node_modules/react-native-maps/src/decorateMapComponent.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { requireNativeComponent, NativeModules, Platform } from 'react-native';\nimport { PROVIDER_DEFAULT, PROVIDER_GOOGLE } from './ProviderConstants';\n\nexport const SUPPORTED = 'SUPPORTED';\nexport const USES_DEFAULT_IMPLEMENTATION = 'USES_DEFAULT_IMPLEMENTATION';\nexport const NOT_SUPPORTED = 'NOT_SUPPORTED';\n\nexport function getAirMapName(provider) {\n  if (Platform.OS === 'android') {\n    return 'AIRMap';\n  }\n  if (provider === PROVIDER_GOOGLE) {\n    return 'AIRGoogleMap';\n  }\n  return 'AIRMap';\n}\n\nfunction getAirComponentName(provider, component) {\n  return `${getAirMapName(provider)}${component}`;\n}\n\nexport const contextTypes = {\n  provider: PropTypes.string,\n};\n\nexport const createNotSupportedComponent = (message) => () => {\n  console.error(message);\n  return null;\n};\n\nfunction getViewManagerConfig(viewManagerName) {\n  const UIManager = NativeModules.UIManager;\n  if (!UIManager.getViewManagerConfig) {\n    // RN < 0.58\n    return UIManager[viewManagerName];\n  }\n  // RN >= 0.58\n  return UIManager.getViewManagerConfig(viewManagerName);\n}\n\nexport const googleMapIsInstalled = !!getViewManagerConfig(\n  getAirMapName(PROVIDER_GOOGLE)\n);\n\nexport default function decorateMapComponent(\n  Component,\n  { componentType, providers }\n) {\n  const components = {};\n\n  const getDefaultComponent = () =>\n    requireNativeComponent(getAirComponentName(null, componentType), Component);\n\n  Component.contextTypes = contextTypes;\n\n  Component.prototype.getAirComponent = function getAirComponent() {\n    const provider = this.context.provider || PROVIDER_DEFAULT;\n    if (components[provider]) {\n      return components[provider];\n    }\n\n    if (provider === PROVIDER_DEFAULT) {\n      components[PROVIDER_DEFAULT] = getDefaultComponent();\n      return components[PROVIDER_DEFAULT];\n    }\n\n    const providerInfo = providers[provider];\n    const platformSupport = providerInfo[Platform.OS];\n    const componentName = getAirComponentName(provider, componentType);\n    if (platformSupport === NOT_SUPPORTED) {\n      components[provider] = createNotSupportedComponent(\n        `react-native-maps: ${componentName} is not supported on ${Platform.OS}`\n      );\n    } else if (platformSupport === SUPPORTED) {\n      if (\n        provider !== PROVIDER_GOOGLE ||\n        (Platform.OS === 'ios' && googleMapIsInstalled)\n      ) {\n        components[provider] = requireNativeComponent(componentName, Component);\n      }\n    } else {\n      // (platformSupport === USES_DEFAULT_IMPLEMENTATION)\n      if (!components[PROVIDER_DEFAULT]) {\n        components[PROVIDER_DEFAULT] = getDefaultComponent();\n      }\n      components[provider] = components[PROVIDER_DEFAULT];\n    }\n\n    return components[provider];\n  };\n\n  Component.prototype.getUIManagerCommand = function getUIManagerCommand(name) {\n    const componentName = getAirComponentName(\n      this.context.provider,\n      componentType\n    );\n    return getViewManagerConfig(componentName).Commands[name];\n  };\n\n  Component.prototype.getMapManagerCommand = function getMapManagerCommand(\n    name\n  ) {\n    const airComponentName = `${getAirComponentName(\n      this.context.provider,\n      componentType\n    )}Manager`;\n    return NativeModules[airComponentName][name];\n  };\n\n  return Component;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}