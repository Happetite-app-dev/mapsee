{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nfunction getBasePath(_ref) {\n  var httpServerLocation = _ref.httpServerLocation;\n\n  if (httpServerLocation[0] === '/') {\n    return httpServerLocation.substr(1);\n  }\n\n  return httpServerLocation;\n}\n\nfunction getScale() {\n  return Dimensions.get('window').scale;\n}\n\nfunction getScaledAssetPath(asset) {\n  var scale = AssetSourceResolver.pickScale(asset.scales, getScale());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + (asset.type ? \".\" + asset.type : '');\n}\n\nvar AssetSourceResolver = function () {\n  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {\n    _classCallCheck(this, AssetSourceResolver);\n\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  _createClass(AssetSourceResolver, [{\n    key: \"isLoadedFromServer\",\n    value: function isLoadedFromServer() {\n      return !!this.serverUrl;\n    }\n  }, {\n    key: \"isLoadedFromFileSystem\",\n    value: function isLoadedFromFileSystem() {\n      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n    }\n  }, {\n    key: \"defaultAsset\",\n    value: function defaultAsset() {\n      if (this.isLoadedFromServer()) {\n        return this.assetServerURL();\n      }\n\n      return this.scaledAssetURLNearBundle();\n    }\n  }, {\n    key: \"assetServerURL\",\n    value: function assetServerURL() {\n      invariant(!!this.serverUrl, 'need server to load from');\n      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n    }\n  }, {\n    key: \"scaledAssetPath\",\n    value: function scaledAssetPath() {\n      return this.fromSource(getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"scaledAssetURLNearBundle\",\n    value: function scaledAssetURLNearBundle() {\n      var path = this.jsbundleUrl || '';\n      return this.fromSource(path + getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"resourceIdentifierWithoutScale\",\n    value: function resourceIdentifierWithoutScale() {\n      throw new UnavailabilityError('react-native', 'resourceIdentifierWithoutScale()');\n    }\n  }, {\n    key: \"drawableFolderInBundle\",\n    value: function drawableFolderInBundle() {\n      throw new UnavailabilityError('react-native', 'drawableFolderInBundle()');\n    }\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      return {\n        __packager_asset: true,\n        width: this.asset.width,\n        height: this.asset.height,\n        uri: source,\n        scale: AssetSourceResolver.pickScale(this.asset.scales, getScale())\n      };\n    }\n  }], [{\n    key: \"pickScale\",\n    value: function pickScale(scales, deviceScale) {\n      for (var i = 0; i < scales.length; i++) {\n        if (scales[i] >= deviceScale) {\n          return scales[i];\n        }\n      }\n\n      return scales[scales.length - 1] || 1;\n    }\n  }]);\n\n  return AssetSourceResolver;\n}();\n\nexport { AssetSourceResolver as default };","map":{"version":3,"mappings":"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","names":["Platform","UnavailabilityError","invariant","getBasePath","httpServerLocation","substr","getScale","Dimensions","get","scale","getScaledAssetPath","asset","AssetSourceResolver","pickScale","scales","scaleSuffix","assetDir","name","type","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","scaledAssetURLNearBundle","fromSource","OS","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length"],"sourceRoot":"","sources":["../src/AssetSourceResolver.web.ts"],"sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport { Dimensions } from 'react-native';\n\ntype PackagerAsset = {\n  __packager_asset: boolean;\n  fileSystemLocation: string;\n  httpServerLocation: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  hash: string;\n  name: string;\n  type: string;\n};\n\nfunction getBasePath({ httpServerLocation }: PackagerAsset): string {\n  if (httpServerLocation[0] === '/') {\n    return httpServerLocation.substr(1);\n  }\n  return httpServerLocation;\n}\n\nexport type ResolvedAssetSource = {\n  __packager_asset: boolean;\n  width?: number;\n  height?: number;\n  uri: string;\n  scale: number;\n};\n\nfunction getScale(): number {\n  return Dimensions.get('window').scale;\n}\n\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, getScale());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + (asset.type ? `.${asset.type}` : '');\n}\n\nexport default class AssetSourceResolver {\n  serverUrl?: string | null;\n  // where the jsbundle is being run from\n  jsbundleUrl?: string | null;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(\n    serverUrl: string | undefined | null,\n    jsbundleUrl: string | undefined | null,\n    asset: PackagerAsset\n  ) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    return this.scaledAssetURLNearBundle();\n  }\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash\n    );\n  }\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || '';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    throw new UnavailabilityError('react-native', 'resourceIdentifierWithoutScale()');\n  }\n  drawableFolderInBundle(): ResolvedAssetSource {\n    throw new UnavailabilityError('react-native', 'drawableFolderInBundle()');\n  }\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, getScale()),\n    };\n  }\n\n  static pickScale(scales: number[], deviceScale: number): number {\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n    return scales[scales.length - 1] || 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}