{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\"],\n    _excluded2 = [\"visible\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var _Screens, _Screens$screensEnabl;\n\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if ((_Screens = Screens) !== null && _Screens !== void 0 && (_Screens$screensEnabl = _Screens.screensEnabled) !== null && _Screens$screensEnabl !== void 0 && _Screens$screensEnabl.call(_Screens)) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return React.createElement(View, rest);\n};\nexport function MaybeScreen(_ref2) {\n  var _Screens2, _Screens2$screensEnab;\n\n  var visible = _ref2.visible,\n      children = _ref2.children,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  if ((_Screens2 = Screens) !== null && _Screens2 !== void 0 && (_Screens2$screensEnab = _Screens2.screensEnabled) !== null && _Screens2$screensEnab !== void 0 && _Screens2$screensEnab.call(_Screens2)) {\n    return React.createElement(Screens.Screen, _extends({\n      activityState: visible ? 2 : 0\n    }, rest), children);\n  }\n\n  return React.createElement(ResourceSavingView, _extends({\n    visible: visible\n  }, rest), children);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,kBAAT,QAAmC,4BAAnC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAUA,IAAIC,OAAJ;;AAEA,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAjBD;AADF,EAEE,OAAOE,CAAP,EAAU,CAEX;;AAED,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAO9B;EAAA;;EAAA,IANJC,OAMI,QANJA,OAMI;EAAA,IALDC,IAKC;;EACJ,gBAAIL,OAAJ,8DAAIM,SAASC,cAAb,kDAAIC,oCAAJ,EAAiC;IAC/B,OAAOT,oBAACC,OAAD,CAASS,eAAT;MAAyBL,OAAO,EAAEA;IAAlC,GAA+CC,IAA/C,EAAP;EACD;;EAED,OAAON,oBAACW,IAAD,EAAUL,IAAV,CAAP;AAZK;AAeP,OAAO,SAASM,WAAT,QAA4D;EAAA;;EAAA,IAArCC,OAAqC,SAArCA,OAAqC;EAAA,IAA5BC,QAA4B,SAA5BA,QAA4B;EAAA,IAAfR,IAAe;;EACjE,iBAAIL,OAAJ,+DAAIc,UAASP,cAAb,kDAAIQ,qCAAJ,EAAiC;IAC/B,OACEhB,oBAACC,OAAD,CAASgB,MAAT;MAAgBC,aAAa,EAAEL,OAAO,GAAG,CAAH,GAAO;IAA7C,GAAoDP,IAApD,GACGQ,QADH,CADF;EAKD;;EAED,OACEd,oBAACD,kBAAD;IAAoBc,OAAO,EAAEA;EAA7B,GAA0CP,IAA1C,GACGQ,QADH,CADF;AAKD","names":["ResourceSavingView","React","Screens","require","e","MaybeScreenContainer","enabled","rest","_Screens","screensEnabled","_Screens$screensEnabl","ScreenContainer","View","MaybeScreen","visible","children","_Screens2","_Screens2$screensEnab","Screen","activityState"],"sources":["ScreenFallback.tsx"],"sourcesContent":["import { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { StyleProp, View, ViewProps, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  hasTwoStates: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens?.screensEnabled?.()) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport function MaybeScreen({ visible, children, ...rest }: Props) {\n  if (Screens?.screensEnabled?.()) {\n    return (\n      <Screens.Screen activityState={visible ? 2 : 0} {...rest}>\n        {children}\n      </Screens.Screen>\n    );\n  }\n\n  return (\n    <ResourceSavingView visible={visible} {...rest}>\n      {children}\n    </ResourceSavingView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}