{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport color from 'color';\n\nvar getBorderColor = function getBorderColor(_ref) {\n  var theme = _ref.theme,\n      disabled = _ref.disabled;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nvar getBackgroundColor = function getBackgroundColor(_ref2) {\n  var theme = _ref2.theme,\n      isMode = _ref2.isMode,\n      disabled = _ref2.disabled,\n      selected = _ref2.selected,\n      customContainerColor = _ref2.customContainerColor;\n\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nvar getIconColor = function getIconColor(_ref3) {\n  var theme = _ref3.theme,\n      isMode = _ref3.isMode,\n      disabled = _ref3.disabled,\n      selected = _ref3.selected,\n      customIconColor = _ref3.customIconColor;\n\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nvar getRippleColor = function getRippleColor(_ref4) {\n  var theme = _ref4.theme,\n      iconColor = _ref4.iconColor;\n\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport var getIconButtonColor = function getIconButtonColor(_ref5) {\n  var theme = _ref5.theme,\n      disabled = _ref5.disabled,\n      mode = _ref5.mode,\n      selected = _ref5.selected,\n      customIconColor = _ref5.customIconColor,\n      customContainerColor = _ref5.customContainerColor;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  var baseIconColorProps = {\n    theme: theme,\n    isMode: isMode,\n    disabled: disabled,\n    selected: selected\n  };\n  var iconColor = getIconColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n    customIconColor: customIconColor\n  }));\n  return {\n    iconColor: iconColor,\n    backgroundColor: getBackgroundColor(_objectSpread(_objectSpread({}, baseIconColorProps), {}, {\n      customContainerColor: customContainerColor\n    })),\n    rippleColor: getRippleColor({\n      theme: theme,\n      iconColor: iconColor\n    }),\n    borderColor: getBorderColor({\n      theme: theme,\n      disabled: disabled\n    })\n  };\n};","map":{"version":3,"mappings":"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","names":["color","getBorderColor","theme","_ref","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","_ref2","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","_ref3","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","_ref4","iconColor","alpha","rgb","string","getIconButtonColor","_ref5","mode","modeToCompare","baseIconColorProps","backgroundColor","rippleColor","borderColor"],"sources":["utils.ts"],"sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n}: {\n  theme: InternalTheme;\n  iconColor: string;\n}) => {\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}