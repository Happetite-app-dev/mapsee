{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"statusBarHeight\", \"style\", \"dark\", \"mode\", \"elevated\"],\n    _excluded2 = [\"height\", \"elevation\", \"backgroundColor\", \"zIndex\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { withInternalTheme } from \"../../core/theming\";\nimport shadow from \"../../styles/shadow\";\nimport { Appbar } from \"./Appbar\";\nimport { DEFAULT_APPBAR_HEIGHT, getAppbarColor, modeAppbarHeight } from \"./utils\";\n\nvar AppbarHeader = function AppbarHeader(_ref) {\n  var statusBarHeight = _ref.statusBarHeight,\n      style = _ref.style,\n      dark = _ref.dark,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? Platform.OS === 'ios' ? 'center-aligned' : 'small' : _ref$mode,\n      _ref$elevated = _ref.elevated,\n      elevated = _ref$elevated === void 0 ? false : _ref$elevated,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isV3 = rest.theme.isV3;\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$height = _ref2.height,\n      height = _ref2$height === void 0 ? isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT : _ref2$height,\n      _ref2$elevation = _ref2.elevation,\n      elevation = _ref2$elevation === void 0 ? isV3 ? elevated ? 2 : 0 : 4 : _ref2$elevation,\n      customBackground = _ref2.backgroundColor,\n      _ref2$zIndex = _ref2.zIndex,\n      zIndex = _ref2$zIndex === void 0 ? isV3 && elevated ? 1 : 0 : _ref2$zIndex,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var backgroundColor = getAppbarColor(rest.theme, elevation, customBackground, elevated);\n\n  var _useSafeAreaInsets = useSafeAreaInsets(),\n      top = _useSafeAreaInsets.top,\n      left = _useSafeAreaInsets.left,\n      right = _useSafeAreaInsets.right;\n\n  return React.createElement(View, {\n    style: [{\n      backgroundColor: backgroundColor,\n      zIndex: zIndex,\n      elevation: elevation,\n      paddingTop: statusBarHeight !== null && statusBarHeight !== void 0 ? statusBarHeight : top,\n      paddingHorizontal: Math.max(left, right)\n    }, shadow(elevation)]\n  }, React.createElement(Appbar, _extends({\n    style: [{\n      height: height,\n      backgroundColor: backgroundColor\n    }, styles.appbar, restStyle],\n    dark: dark\n  }, isV3 && {\n    mode: mode\n  }, rest)));\n};\n\nAppbarHeader.displayName = 'Appbar.Header';\nvar styles = StyleSheet.create({\n  appbar: {\n    elevation: 0\n  }\n});\nexport default withInternalTheme(AppbarHeader);\nvar AppbarHeaderWithTheme = withInternalTheme(AppbarHeader);\nexport { AppbarHeaderWithTheme as AppbarHeader };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAGA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA,SAASC,iBAAT;AACA,OAAOC,MAAP;AAEA,SAASC,MAAT;AACA,SACEC,qBADF,EAEEC,cAFF,EAGEC,gBAHF;;AA4FA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAQR;EAAA,IANXC,eAMW,GAALC,IAAK,CANXD,eAMW;EAAA,IALXE,KAKW,GAALD,IAAK,CALXC,KAKW;EAAA,IAJXC,IAIW,GAALF,IAAK,CAJXE,IAIW;EAAA,gBAALF,IAAK,CAHXG,IAGW;EAAA,IAHXA,IAGW,0BAHJC,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GAAwB,gBAAxBA,GAA2C,OAGvC;EAAA,oBAALJ,IAAK,CAFXM,QAEW;EAAA,IAFXA,QAEW,8BAFA,KAEA;EAAA,IADRC,IACQ,4BAALP,IAAK;;EACX,IAAQQ,IAAR,GAAiBD,IAAI,CAACE,KAAtB,CAAQD,IAAR;;EAEA,YAMeE,UAAU,CAACC,OAAXD,CAAmBT,KAAnBS,KAA6B,EAN5C;EAAA,yBACEE,MADF;EAAA,IACEA,MADF,6BACWJ,IAAI,GAAGX,gBAAgB,CAACM,IAAD,CAAnB,GAA4BR,qBAD3C;EAAA,4BAEEkB,SAFF;EAAA,IAEEA,SAFF,gCAEcL,IAAI,GAAIF,QAAQ,GAAG,CAAH,GAAO,CAAnB,GAAwB,CAF1C;EAAA,IAGmBQ,gBAHnB,SAGEC,eAHF;EAAA,yBAIEC,MAJF;EAAA,IAIEA,MAJF,6BAIWR,IAAI,IAAIF,QAARE,GAAmB,CAAnBA,GAAuB,CAJlC;EAAA,IAKKS,SALL;;EAQA,IAAMF,eAAe,GAAGnB,cAAc,CACpCW,IAAI,CAACE,KAD+B,EAEpCI,SAFoC,EAGpCC,gBAHoC,EAIpCR,QAJoC,CAAtC;;EAOA,yBAA6Bf,iBAAiB,EAA9C;EAAA,IAAQ2B,GAAR,sBAAQA,GAAR;EAAA,IAAaC,IAAb,sBAAaA,IAAb;EAAA,IAAmBC,KAAnB,sBAAmBA,KAAnB;;EAEA,OACE9B,oBAAC+B,IAAD,EAAK;IACHpB,KAAK,EACH,CACE;MACEc,eAAe,EAAfA,eADF;MAEEC,MAAM,EAANA,MAFF;MAGEH,SAAS,EAATA,SAHF;MAIES,UAAU,EAAEvB,eAAe,SAAfA,mBAAe,WAAfA,qBAAmBmB,GAJjC;MAKEK,iBAAiB,EAAEC,IAAI,CAACC,GAALD,CAASL,IAATK,EAAeJ,KAAfI;IALrB,CADF,EAQE/B,MAAM,CAACoB,SAAD,CARR;EAFC,CAAL,EAcEvB,oBAACI,MAAD,EAAOgC;IACLzB,KAAK,EAAE,CAAC;MAAEW,MAAM,EAANA,MAAF;MAAUG;IAAV,CAAD,EAA8BY,MAAM,CAACC,MAArC,EAA6CX,SAA7C,CADF;IAELf,IAAI,EAAEA;EAFD,GAGAM,IAAI,IAAI;IACXL;EADW,CAHR,EAMDI,IANC,CAAP,CAdF,CADF;AAyBD,CArDD;;AAuDAT,YAAY,CAAC+B,WAAb/B,GAA2B,eAA3BA;AAEA,IAAM6B,MAAM,GAAGjB,UAAU,CAACoB,MAAXpB,CAAkB;EAC/BkB,MAAM,EAAE;IACNf,SAAS,EAAE;EADL;AADuB,CAAlBH,CAAf;AAMA,eAAelB,iBAAiB,CAACM,YAAD,CAAhC;AAGA,IAAMiC,qBAAqB,GAAGvC,iBAAiB,CAACM,YAAD,CAA/C;AAEA,SAASiC,qBAAqB,IAAIjC,YAAlC","names":["React","useSafeAreaInsets","withInternalTheme","shadow","Appbar","DEFAULT_APPBAR_HEIGHT","getAppbarColor","modeAppbarHeight","AppbarHeader","statusBarHeight","_ref","style","dark","mode","Platform","OS","elevated","rest","isV3","theme","StyleSheet","flatten","height","elevation","customBackground","backgroundColor","zIndex","restStyle","top","left","right","View","paddingTop","paddingHorizontal","Math","max","_extends","styles","appbar","displayName","create","AppbarHeaderWithTheme"],"sources":["AppbarHeader.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport { withInternalTheme } from '../../core/theming';\nimport shadow from '../../styles/shadow';\nimport type { InternalTheme } from '../../types';\nimport { Appbar } from './Appbar';\nimport {\n  DEFAULT_APPBAR_HEIGHT,\n  getAppbarColor,\n  modeAppbarHeight,\n} from './utils';\n\nexport type Props = React.ComponentProps<typeof Appbar> & {\n  /**\n   * Whether the background color is a dark color. A dark header will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Extra padding to add at the top of header to account for translucent status bar.\n   * This is automatically handled on iOS >= 11 including iPhone X using `SafeAreaView`.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to disable the default behaviour, and customize the height.\n   */\n  statusBarHeight?: number;\n  /**\n   * Content of the header.\n   */\n  children: React.ReactNode;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Mode of the Appbar.\n   * - `small` - Appbar with default height (56).\n   * - `medium` - Appbar with medium height (112).\n   * - `large` - Appbar with large height (152).\n   * - `center-aligned` - Appbar with default height and center-aligned title.\n   */\n  mode?: 'small' | 'medium' | 'large' | 'center-aligned';\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether Appbar background should have the elevation along with primary color pigment.\n   */\n  elevated?: boolean;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to use as a header at the top of the screen.\n * It can contain the screen title, controls such as navigation buttons, menu button etc.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-small.png\" />\n *     <figcaption>small</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-medium.png\" />\n *     <figcaption>medium</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-large.png\" />\n *     <figcaption>large</figcaption>\n *   </figure>\n *  <figure>\n *     <img class=\"small\" src=\"screenshots/appbar-center-aligned.png\" />\n *     <figcaption>center-aligned</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const _goBack = () => console.log('Went back');\n *\n *   const _handleSearch = () => console.log('Searching');\n *\n *   const _handleMore = () => console.log('Shown more');\n *\n *   return (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={_goBack} />\n *       <Appbar.Content title=\"Title\" />\n *       <Appbar.Action icon=\"magnify\" onPress={_handleSearch} />\n *       <Appbar.Action icon=\"dots-vertical\" onPress={_handleMore} />\n *     </Appbar.Header>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarHeader = ({\n  // Don't use default props since we check it to know whether we should use SafeAreaView\n  statusBarHeight,\n  style,\n  dark,\n  mode = Platform.OS === 'ios' ? 'center-aligned' : 'small',\n  elevated = false,\n  ...rest\n}: Props) => {\n  const { isV3 } = rest.theme;\n\n  const {\n    height = isV3 ? modeAppbarHeight[mode] : DEFAULT_APPBAR_HEIGHT,\n    elevation = isV3 ? (elevated ? 2 : 0) : 4,\n    backgroundColor: customBackground,\n    zIndex = isV3 && elevated ? 1 : 0,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  const backgroundColor = getAppbarColor(\n    rest.theme,\n    elevation,\n    customBackground,\n    elevated\n  );\n\n  const { top, left, right } = useSafeAreaInsets();\n\n  return (\n    <View\n      style={\n        [\n          {\n            backgroundColor,\n            zIndex,\n            elevation,\n            paddingTop: statusBarHeight ?? top,\n            paddingHorizontal: Math.max(left, right),\n          },\n          shadow(elevation),\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Appbar\n        style={[{ height, backgroundColor }, styles.appbar, restStyle]}\n        dark={dark}\n        {...(isV3 && {\n          mode,\n        })}\n        {...rest}\n      />\n    </View>\n  );\n};\n\nAppbarHeader.displayName = 'Appbar.Header';\n\nconst styles = StyleSheet.create({\n  appbar: {\n    elevation: 0,\n  },\n});\n\nexport default withInternalTheme(AppbarHeader);\n\n// @component-docs ignore-next-line\nconst AppbarHeaderWithTheme = withInternalTheme(AppbarHeader);\n// @component-docs ignore-next-line\nexport { AppbarHeaderWithTheme as AppbarHeader };\n"]},"metadata":{},"sourceType":"module"}