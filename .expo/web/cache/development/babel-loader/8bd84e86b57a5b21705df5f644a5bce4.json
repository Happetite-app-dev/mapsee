{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ExecutionEnvironment } from \"./Constants.types\";\nvar ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\nvar _sessionId = uuidv4();\n\nfunction getBrowserName() {\n  if (Platform.isDOMAvailable) {\n    var agent = navigator.userAgent.toLowerCase();\n\n    if (agent.includes('edge')) {\n      return 'Edge';\n    } else if (agent.includes('edg')) {\n      return 'Chromium Edge';\n    } else if (agent.includes('opr') && !!window['opr']) {\n      return 'Opera';\n    } else if (agent.includes('chrome') && !!window['chrome']) {\n      return 'Chrome';\n    } else if (agent.includes('trident')) {\n      return 'IE';\n    } else if (agent.includes('firefox')) {\n      return 'Firefox';\n    } else if (agent.includes('safari')) {\n      return 'Safari';\n    }\n  }\n\n  return undefined;\n}\n\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n\n  get appOwnership() {\n    return null;\n  },\n\n  get executionEnvironment() {\n    return ExecutionEnvironment.Bare;\n  },\n\n  get installationId() {\n    var installationId;\n\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (_unused) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n\n  get sessionId() {\n    return _sessionId;\n  },\n\n  get platform() {\n    return {\n      web: Platform.isDOMAvailable ? {\n        ua: navigator.userAgent\n      } : undefined\n    };\n  },\n\n  get isHeadless() {\n    if (!Platform.isDOMAvailable) return true;\n    return /\\bHeadlessChrome\\//.test(navigator.userAgent);\n  },\n\n  get isDevice() {\n    return true;\n  },\n\n  get expoVersion() {\n    return this.manifest.sdkVersion || null;\n  },\n\n  get linkingUri() {\n    if (Platform.isDOMAvailable) {\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n\n  get expoRuntimeVersion() {\n    return this.expoVersion;\n  },\n\n  get deviceName() {\n    return getBrowserName();\n  },\n\n  get nativeAppVersion() {\n    return null;\n  },\n\n  get nativeBuildVersion() {\n    return null;\n  },\n\n  get systemFonts() {\n    return [];\n  },\n\n  get statusBarHeight() {\n    return 0;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get manifest() {\n    return undefined || {};\n  },\n\n  get manifest2() {\n    return null;\n  },\n\n  get experienceUrl() {\n    if (Platform.isDOMAvailable) {\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n\n  get debugMode() {\n    return __DEV__;\n  },\n\n  getWebViewUserAgentAsync: function () {\n    var _getWebViewUserAgentAsync = _asyncToGenerator(function* () {\n      if (Platform.isDOMAvailable) {\n        return navigator.userAgent;\n      } else {\n        return null;\n      }\n    });\n\n    function getWebViewUserAgentAsync() {\n      return _getWebViewUserAgentAsync.apply(this, arguments);\n    }\n\n    return getWebViewUserAgentAsync;\n  }()\n};","map":{"version":3,"mappings":"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","names":["Platform","v4","uuidv4","ExecutionEnvironment","ID_KEY","_sessionId","getBrowserName","isDOMAvailable","agent","navigator","userAgent","toLowerCase","includes","window","undefined","name","appOwnership","executionEnvironment","Bare","installationId","localStorage","getItem","setItem","sessionId","platform","web","ua","isHeadless","test","isDevice","expoVersion","manifest","sdkVersion","linkingUri","location","origin","expoRuntimeVersion","deviceName","nativeAppVersion","nativeBuildVersion","systemFonts","statusBarHeight","deviceYearClass","manifest2","experienceUrl","debugMode","__DEV__","getWebViewUserAgentAsync"],"sourceRoot":"","sources":["../src/ExponentConstants.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  ExecutionEnvironment,\n  NativeConstants,\n  PlatformManifest,\n  WebManifest,\n} from './Constants.types';\n\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare let __DEV__: boolean;\ndeclare let process: { env: any };\ndeclare let navigator: Navigator;\ndeclare let location: Location;\ndeclare let localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nfunction getBrowserName(): string | undefined {\n  if (Platform.isDOMAvailable) {\n    const agent = navigator.userAgent.toLowerCase();\n    if (agent.includes('edge')) {\n      return 'Edge';\n    } else if (agent.includes('edg')) {\n      return 'Chromium Edge';\n    } else if (agent.includes('opr') && !!window['opr']) {\n      return 'Opera';\n    } else if (agent.includes('chrome') && !!window['chrome']) {\n      return 'Chrome';\n    } else if (agent.includes('trident')) {\n      return 'IE';\n    } else if (agent.includes('firefox')) {\n      return 'Firefox';\n    } else if (agent.includes('safari')) {\n      return 'Safari';\n    }\n  }\n\n  return undefined;\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership() {\n    return null;\n  },\n  get executionEnvironment() {\n    return ExecutionEnvironment.Bare;\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: Platform.isDOMAvailable ? { ua: navigator.userAgent } : undefined };\n  },\n  get isHeadless(): boolean {\n    if (!Platform.isDOMAvailable) return true;\n\n    return /\\bHeadlessChrome\\//.test(navigator.userAgent);\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get expoVersion(): string | null {\n    return this.manifest!.sdkVersion || null;\n  },\n  get linkingUri(): string {\n    if (Platform.isDOMAvailable) {\n      // On native this is `exp://`\n      // On web we should use the protocol and hostname (location.origin)\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n  get expoRuntimeVersion(): string | null {\n    return this.expoVersion;\n  },\n  get deviceName(): string | undefined {\n    return getBrowserName();\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    // This is defined by @expo/webpack-config.\n    // If your site is bundled with a different config then you may not have access to the app.json automatically.\n    return process.env.APP_MANIFEST || {};\n  },\n  get manifest2(): null {\n    return null;\n  },\n  get experienceUrl(): string {\n    if (Platform.isDOMAvailable) {\n      return location.origin;\n    } else {\n      return '';\n    }\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string | null> {\n    if (Platform.isDOMAvailable) {\n      return navigator.userAgent;\n    } else {\n      return null;\n    }\n  },\n} as NativeConstants;\n"]},"metadata":{},"sourceType":"module"}