{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\nimport NotificationPermissionsModule from \"./NotificationPermissionsModule\";\nexport function getPermissionsAsync() {\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nfunction _getPermissionsAsync() {\n  _getPermissionsAsync = _asyncToGenerator(function* () {\n    if (!NotificationPermissionsModule.getPermissionsAsync) {\n      throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n    }\n\n    return yield NotificationPermissionsModule.getPermissionsAsync();\n  });\n  return _getPermissionsAsync.apply(this, arguments);\n}\n\nexport function requestPermissionsAsync(_x) {\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nfunction _requestPermissionsAsync() {\n  _requestPermissionsAsync = _asyncToGenerator(function* (permissions) {\n    if (!NotificationPermissionsModule.requestPermissionsAsync) {\n      throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n    }\n\n    var requestedPermissions = permissions != null ? permissions : {\n      ios: {\n        allowAlert: true,\n        allowBadge: true,\n        allowSound: true\n      }\n    };\n    var requestedPlatformPermissions = requestedPermissions[Platform.OS];\n    return yield NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n  });\n  return _requestPermissionsAsync.apply(this, arguments);\n}\n\nexport var usePermissions = createPermissionHook({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync\n});","map":{"version":3,"mappings":";AAAA,SAASA,oBAAT,EAA+BC,QAA/B,EAAyCC,mBAAzC,QAAoE,mBAApE;AAMA,OAAOC,6BAAP;AAEA,gBAAsBC,mBAAtB;EAAA;AAAA;;;2CAAO,aAAkC;IACvC,IAAI,CAACD,6BAA6B,CAACC,mBAAnC,EAAwD;MACtD,MAAM,IAAIF,mBAAJ,CAAwB,eAAxB,EAAyC,qBAAzC,CAAN;IACD;;IAED,aAAaC,6BAA6B,CAACC,mBAA9B,EAAb;EACD,C;;;;AAED,gBAAsBC,uBAAtB;EAAA;AAAA;;;+CAAO,WAAuCC,WAAvC,EAAmF;IACxF,IAAI,CAACH,6BAA6B,CAACE,uBAAnC,EAA4D;MAC1D,MAAM,IAAIH,mBAAJ,CAAwB,eAAxB,EAAyC,yBAAzC,CAAN;IACD;;IAED,IAAMK,oBAAoB,GAAGD,WAAH,WAAGA,WAAH,GAAkB;MAC1CE,GAAG,EAAE;QACHC,UAAU,EAAE,IADT;QAEHC,UAAU,EAAE,IAFT;QAGHC,UAAU,EAAE;MAHT;IADqC,CAA5C;IAOA,IAAMC,4BAA4B,GAAGL,oBAAoB,CAACN,QAAQ,CAACY,EAAV,CAAzD;IACA,aAAaV,6BAA6B,CAACE,uBAA9B,CAAsDO,4BAAtD,CAAb;EACD,C;;;;AAYD,OAAO,IAAME,cAAc,GAAGd,oBAAoB,CAGhD;EACAe,aAAa,EAAEV,uBADf;EAEAW,SAAS,EAAEZ;AAFX,CAHgD,CAA3C","names":["createPermissionHook","Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions","OS","usePermissions","requestMethod","getMethod"],"sourceRoot":"","sources":["../src/NotificationPermissions.ts"],"sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Notifications.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"]},"metadata":{},"sourceType":"module"}