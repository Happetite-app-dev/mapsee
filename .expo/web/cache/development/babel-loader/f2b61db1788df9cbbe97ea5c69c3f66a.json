{"ast":null,"code":"import color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\nexport var getCardCoverStyle = function getCardCoverStyle(_ref) {\n  var theme = _ref.theme,\n      index = _ref.index,\n      total = _ref.total;\n  var isV3 = theme.isV3,\n      roundness = theme.roundness;\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness\n    };\n  }\n\n  return undefined;\n};\n\nvar getBorderColor = function getBorderColor(_ref2) {\n  var theme = _ref2.theme;\n\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n\n  return color(black).alpha(0.12).rgb().string();\n};\n\nvar getBackgroundColor = function getBackgroundColor(_ref3) {\n  var theme = _ref3.theme,\n      isMode = _ref3.isMode;\n\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n\n  return undefined;\n};\n\nexport var getCardColors = function getCardColors(_ref4) {\n  var theme = _ref4.theme,\n      mode = _ref4.mode;\n\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme: theme,\n      isMode: isMode\n    }),\n    borderColor: getBorderColor({\n      theme: theme\n    })\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,KAAhB;AAKA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAQ3B;EAAA,IAPJC,KAOI,GAALC,IAAK,CAPJD,KAOI;EAAA,IANJE,KAMI,GAALD,IAAK,CANJC,KAMI;EAAA,IALJC,KAKI,GAALF,IAAK,CALJE,KAKI;EACJ,IAAQC,IAAR,GAA4BJ,KAA5B,CAAQI,IAAR;EAAA,IAAcC,SAAd,GAA4BL,KAA5B,CAAcK,SAAd;;EAEA,IAAID,IAAJ,EAAU;IACR,OAAO;MACLE,YAAY,EAAE,IAAID;IADb,CAAP;EAGF;;EAEA,IAAIH,KAAK,KAAK,CAAd,EAAiB;IACf,IAAIC,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO;QACLG,YAAY,EAAED;MADT,CAAP;IAGF;;IAEA,OAAO;MACLE,mBAAmB,EAAEF,SADhB;MAELG,oBAAoB,EAAEH;IAFjB,CAAP;EAIF;;EAEA,IAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6BD,KAAK,KAAKC,KAAK,GAAG,CAAnD,EAAsD;IACpD,OAAO;MACLM,sBAAsB,EAAEJ;IADnB,CAAP;EAGF;;EAEA,OAAOK,SAAP;AACD,CArCM;;AAuCP,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,QAAyC;EAAA,IAAtCX,KAAsC,GAALY,KAAK,CAAtCZ,KAAsC;;EAC9D,IAAIA,KAAK,CAACI,IAAV,EAAgB;IACd,OAAOJ,KAAK,CAACa,MAANb,CAAac,OAApB;EACF;;EAEA,IAAId,KAAK,CAACe,IAAV,EAAgB;IACd,OAAOnB,KAAK,CAACE,KAAD,CAALF,CAAaoB,KAAbpB,CAAmB,IAAnBA,EAAyBqB,GAAzBrB,GAA+BsB,MAA/BtB,EAAP;EACF;;EACA,OAAOA,KAAK,CAACC,KAAD,CAALD,CAAaoB,KAAbpB,CAAmB,IAAnBA,EAAyBqB,GAAzBrB,GAA+BsB,MAA/BtB,EAAP;AACD,CATD;;AAWA,IAAMuB,kBAAkB,GAAG,SAArBA,kBAAqB,QAMrB;EAAA,IALJnB,KAKI,GAALoB,KAAK,CALJpB,KAKI;EAAA,IAJJqB,MAII,GAALD,KAAK,CAJJC,MAII;;EACJ,IAAIrB,KAAK,CAACI,IAAV,EAAgB;IACd,IAAIiB,MAAM,CAAC,WAAD,CAAV,EAAyB;MACvB,OAAOrB,KAAK,CAACa,MAANb,CAAasB,cAApB;IACF;;IACA,IAAID,MAAM,CAAC,UAAD,CAAV,EAAwB;MACtB,OAAOrB,KAAK,CAACa,MAANb,CAAauB,OAApB;IACF;EACF;;EACA,OAAOb,SAAP;AACD,CAhBD;;AAkBA,OAAO,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,QAMvB;EAAA,IALJxB,KAKI,GAALyB,KAAK,CALJzB,KAKI;EAAA,IAJJ0B,IAII,GAALD,KAAK,CAJJC,IAII;;EACJ,IAAML,MAAM,GAAIM,SAAVN,MAAUM,cAAuB,EAAK;IAC1C,OAAOD,IAAI,KAAKC,aAAhB;EACD,CAFD;;EAIA,OAAO;IACLC,eAAe,EAAET,kBAAkB,CAAC;MAClCnB,KAAK,EAALA,KADkC;MAElCqB;IAFkC,CAAD,CAD9B;IAKLQ,WAAW,EAAElB,cAAc,CAAC;MAAEX;IAAF,CAAD;EALtB,CAAP;AAOD,CAlBM","names":["color","black","white","getCardCoverStyle","theme","_ref","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","_ref2","colors","outline","dark","alpha","rgb","string","getBackgroundColor","_ref3","isMode","surfaceVariant","surface","getCardColors","_ref4","mode","modeToCompare","backgroundColor","borderColor"],"sources":["utils.tsx"],"sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: InternalTheme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness,\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}