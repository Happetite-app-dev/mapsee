{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoApplication from \"./ExpoApplication\";\nexport var nativeApplicationVersion = ExpoApplication ? ExpoApplication.nativeApplicationVersion || null : null;\nexport var nativeBuildVersion = ExpoApplication ? ExpoApplication.nativeBuildVersion || null : null;\nexport var applicationName = ExpoApplication ? ExpoApplication.applicationName || null : null;\nexport var applicationId = ExpoApplication ? ExpoApplication.applicationId || null : null;\nexport var androidId = ExpoApplication ? ExpoApplication.androidId || null : null;\nexport function getInstallReferrerAsync() {\n  return _getInstallReferrerAsync.apply(this, arguments);\n}\n\nfunction _getInstallReferrerAsync() {\n  _getInstallReferrerAsync = _asyncToGenerator(function* () {\n    if (!ExpoApplication.getInstallReferrerAsync) {\n      throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n    }\n\n    return yield ExpoApplication.getInstallReferrerAsync();\n  });\n  return _getInstallReferrerAsync.apply(this, arguments);\n}\n\nexport function getIosIdForVendorAsync() {\n  return _getIosIdForVendorAsync.apply(this, arguments);\n}\n\nfunction _getIosIdForVendorAsync() {\n  _getIosIdForVendorAsync = _asyncToGenerator(function* () {\n    var _yield$ExpoApplicatio;\n\n    if (!ExpoApplication.getIosIdForVendorAsync) {\n      throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n    }\n\n    return (_yield$ExpoApplicatio = yield ExpoApplication.getIosIdForVendorAsync()) != null ? _yield$ExpoApplicatio : null;\n  });\n  return _getIosIdForVendorAsync.apply(this, arguments);\n}\n\nexport var ApplicationReleaseType;\n\n(function (ApplicationReleaseType) {\n  ApplicationReleaseType[ApplicationReleaseType[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApplicationReleaseType[ApplicationReleaseType[\"SIMULATOR\"] = 1] = \"SIMULATOR\";\n  ApplicationReleaseType[ApplicationReleaseType[\"ENTERPRISE\"] = 2] = \"ENTERPRISE\";\n  ApplicationReleaseType[ApplicationReleaseType[\"DEVELOPMENT\"] = 3] = \"DEVELOPMENT\";\n  ApplicationReleaseType[ApplicationReleaseType[\"AD_HOC\"] = 4] = \"AD_HOC\";\n  ApplicationReleaseType[ApplicationReleaseType[\"APP_STORE\"] = 5] = \"APP_STORE\";\n})(ApplicationReleaseType || (ApplicationReleaseType = {}));\n\nexport function getIosApplicationReleaseTypeAsync() {\n  return _getIosApplicationReleaseTypeAsync.apply(this, arguments);\n}\n\nfunction _getIosApplicationReleaseTypeAsync() {\n  _getIosApplicationReleaseTypeAsync = _asyncToGenerator(function* () {\n    if (!ExpoApplication.getApplicationReleaseTypeAsync) {\n      throw new UnavailabilityError('expo-application', 'getApplicationReleaseTypeAsync');\n    }\n\n    return yield ExpoApplication.getApplicationReleaseTypeAsync();\n  });\n  return _getIosApplicationReleaseTypeAsync.apply(this, arguments);\n}\n\nexport function getIosPushNotificationServiceEnvironmentAsync() {\n  return _getIosPushNotificationServiceEnvironmentAsync.apply(this, arguments);\n}\n\nfunction _getIosPushNotificationServiceEnvironmentAsync() {\n  _getIosPushNotificationServiceEnvironmentAsync = _asyncToGenerator(function* () {\n    if (!ExpoApplication.getPushNotificationServiceEnvironmentAsync) {\n      throw new UnavailabilityError('expo-application', 'getPushNotificationServiceEnvironmentAsync');\n    }\n\n    return yield ExpoApplication.getPushNotificationServiceEnvironmentAsync();\n  });\n  return _getIosPushNotificationServiceEnvironmentAsync.apply(this, arguments);\n}\n\nexport function getInstallationTimeAsync() {\n  return _getInstallationTimeAsync.apply(this, arguments);\n}\n\nfunction _getInstallationTimeAsync() {\n  _getInstallationTimeAsync = _asyncToGenerator(function* () {\n    if (!ExpoApplication.getInstallationTimeAsync) {\n      throw new UnavailabilityError('expo-application', 'getInstallationTimeAsync');\n    }\n\n    var installationTime = yield ExpoApplication.getInstallationTimeAsync();\n    return new Date(installationTime);\n  });\n  return _getInstallationTimeAsync.apply(this, arguments);\n}\n\nexport function getLastUpdateTimeAsync() {\n  return _getLastUpdateTimeAsync.apply(this, arguments);\n}\n\nfunction _getLastUpdateTimeAsync() {\n  _getLastUpdateTimeAsync = _asyncToGenerator(function* () {\n    if (!ExpoApplication.getLastUpdateTimeAsync) {\n      throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n    }\n\n    var lastUpdateTime = yield ExpoApplication.getLastUpdateTimeAsync();\n    return new Date(lastUpdateTime);\n  });\n  return _getLastUpdateTimeAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";AAAA,SAASA,mBAAT,QAAoC,mBAApC;AAEA,OAAOC,eAAP;AAUA,OAAO,IAAMC,wBAAwB,GAAkBD,eAAe,GAClEA,eAAe,CAACC,wBAAhB,IAA4C,IADsB,GAElE,IAFG;AAaP,OAAO,IAAMC,kBAAkB,GAAkBF,eAAe,GAC5DA,eAAe,CAACE,kBAAhB,IAAsC,IADsB,GAE5D,IAFG;AAWP,OAAO,IAAMC,eAAe,GAAkBH,eAAe,GACzDA,eAAe,CAACG,eAAhB,IAAmC,IADsB,GAEzD,IAFG;AAUP,OAAO,IAAMC,aAAa,GAAkBJ,eAAe,GACvDA,eAAe,CAACI,aAAhB,IAAiC,IADsB,GAEvD,IAFG;AAkBP,OAAO,IAAMC,SAAS,GAAkBL,eAAe,GAAGA,eAAe,CAACK,SAAhB,IAA6B,IAAhC,GAAuC,IAAvF;AAeP,gBAAsBC,uBAAtB;EAAA;AAAA;;;+CAAO,aAAsC;IAC3C,IAAI,CAACN,eAAe,CAACM,uBAArB,EAA8C;MAC5C,MAAM,IAAIP,mBAAJ,CAAwB,kBAAxB,EAA4C,yBAA5C,CAAN;IACD;;IACD,aAAaC,eAAe,CAACM,uBAAhB,EAAb;EACD,C;;;;AAuBD,gBAAsBC,sBAAtB;EAAA;AAAA;;;8CAAO,aAAqC;IAAA;;IAC1C,IAAI,CAACP,eAAe,CAACO,sBAArB,EAA6C;MAC3C,MAAM,IAAIR,mBAAJ,CAAwB,kBAAxB,EAA4C,wBAA5C,CAAN;IACD;;IACD,sCAAcC,eAAe,CAACO,sBAAhB,EAAd,oCAA2D,IAA3D;EACD,C;;;;AAGD,WAAYC,sBAAZ;;AAAA,WAAYA,sBAAZ,EAAkC;EAChCA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CAPD,EAAYA,sBAAsB,KAAtBA,sBAAsB,MAAlC;;AAeA,gBAAsBC,iCAAtB;EAAA;AAAA;;;yDAAO,aAAgD;IACrD,IAAI,CAACT,eAAe,CAACU,8BAArB,EAAqD;MACnD,MAAM,IAAIX,mBAAJ,CAAwB,kBAAxB,EAA4C,gCAA5C,CAAN;IACD;;IACD,aAAaC,eAAe,CAACU,8BAAhB,EAAb;EACD,C;;;;AAaD,gBAAsBC,6CAAtB;EAAA;AAAA;;;qEAAO,aAA4D;IACjE,IAAI,CAACX,eAAe,CAACY,0CAArB,EAAiE;MAC/D,MAAM,IAAIb,mBAAJ,CAAwB,kBAAxB,EAA4C,4CAA5C,CAAN;IACD;;IACD,aAAaC,eAAe,CAACY,0CAAhB,EAAb;EACD,C;;;;AAoBD,gBAAsBC,wBAAtB;EAAA;AAAA;;;gDAAO,aAAuC;IAC5C,IAAI,CAACb,eAAe,CAACa,wBAArB,EAA+C;MAC7C,MAAM,IAAId,mBAAJ,CAAwB,kBAAxB,EAA4C,0BAA5C,CAAN;IACD;;IACD,IAAMe,gBAAgB,SAASd,eAAe,CAACa,wBAAhB,EAA/B;IACA,OAAO,IAAIE,IAAJ,CAASD,gBAAT,CAAP;EACD,C;;;;AAeD,gBAAsBE,sBAAtB;EAAA;AAAA;;;8CAAO,aAAqC;IAC1C,IAAI,CAAChB,eAAe,CAACgB,sBAArB,EAA6C;MAC3C,MAAM,IAAIjB,mBAAJ,CAAwB,kBAAxB,EAA4C,wBAA5C,CAAN;IACD;;IACD,IAAMkB,cAAc,SAASjB,eAAe,CAACgB,sBAAhB,EAA7B;IACA,OAAO,IAAID,IAAJ,CAASE,cAAT,CAAP;EACD,C","names":["UnavailabilityError","ExpoApplication","nativeApplicationVersion","nativeBuildVersion","applicationName","applicationId","androidId","getInstallReferrerAsync","getIosIdForVendorAsync","ApplicationReleaseType","getIosApplicationReleaseTypeAsync","getApplicationReleaseTypeAsync","getIosPushNotificationServiceEnvironmentAsync","getPushNotificationServiceEnvironmentAsync","getInstallationTimeAsync","installationTime","Date","getLastUpdateTimeAsync","lastUpdateTime"],"sourceRoot":"","sources":["../src/Application.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoApplication from './ExpoApplication';\n\n// @needsAudit\n/**\n * The human-readable version of the native application that may be displayed in the app store.\n * This is the `Info.plist` value for `CFBundleShortVersionString` on iOS and the version name set\n * by `version` in `app.json` on Android at the time the native app was built.\n * On web, this value is `null`.\n * @example `\"2.11.0\"`\n */\nexport const nativeApplicationVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeApplicationVersion || null\n  : null;\n\n// @needsAudit\n/**\n * The internal build version of the native application that the app store may use to distinguish\n * between different binaries. This is the `Info.plist` value for `CFBundleVersion` on iOS (set with\n * `ios.buildNumber` value in `app.json` in a standalone app) and the version code set by\n * `android.versionCode` in `app.json` on Android at the time the native app was built. On web, this\n * value is `null`. The return type on Android and iOS is `string`.\n * @example iOS: `\"2.11.0\"`, Android: `\"114\"`\n */\nexport const nativeBuildVersion: string | null = ExpoApplication\n  ? ExpoApplication.nativeBuildVersion || null\n  : null;\n\n// @needsAudit\n/**\n * The human-readable name of the application that is displayed with the app's icon on the device's\n * home screen or desktop. On Android and iOS, this value is a `string` unless the name could not be\n * retrieved, in which case this value will be `null`. On web this value is `null`.\n * @example `\"Expo\"`, `\"Yelp\"`, `\"Instagram\"`\n */\nexport const applicationName: string | null = ExpoApplication\n  ? ExpoApplication.applicationName || null\n  : null;\n\n// @needsAudit\n/**\n * The ID of the application. On Android, this is the application ID. On iOS, this is the bundle ID.\n * On web, this is `null`.\n * @example `\"com.cocoacasts.scribbles\"`, `\"com.apple.Pages\"`\n */\nexport const applicationId: string | null = ExpoApplication\n  ? ExpoApplication.applicationId || null\n  : null;\n\n// @needsAudit\n/**\n * The value of [`Settings.Secure.ANDROID_ID`](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID).\n * This is a hexadecimal `string` unique to each combination of app-signing key, user, and device.\n * The value may change if a factory reset is performed on the device or if an APK signing key changes.\n * For more information about how the platform handles `ANDROID_ID` in Android 8.0 (API level 26)\n * and higher, see [Android 8.0 Behavior Changes](https://developer.android.com/about/versions/oreo/android-8.0-changes.html#privacy-all).\n * On iOS and web, this value is `null`.\n * > In versions of the platform lower than Android 8.0 (API level 26), this value remains constant\n * > for the lifetime of the user's device. See the [ANDROID_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID)\n * > official docs for more information.\n * @example `\"dd96dec43fb81c97\"`\n * @platform android\n */\nexport const androidId: string | null = ExpoApplication ? ExpoApplication.androidId || null : null;\n\n// @needsAudit\n/**\n * Gets the referrer URL of the installed app with the [`Install Referrer API`](https://developer.android.com/google/play/installreferrer)\n * from the Google Play Store. In practice, the referrer URL may not be a complete, absolute URL.\n * @return A `Promise` that fulfills with a `string` of the referrer URL of the installed app.\n *\n * @example\n * ```ts\n * await Application.getInstallReferrerAsync();\n * // \"utm_source=google-play&utm_medium=organic\"\n * ```\n * @platform android\n */\nexport async function getInstallReferrerAsync(): Promise<string> {\n  if (!ExpoApplication.getInstallReferrerAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallReferrerAsync');\n  }\n  return await ExpoApplication.getInstallReferrerAsync();\n}\n\n// @needsAudit\n/**\n * Gets the iOS \"identifier for vendor\" ([IDFV](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor))\n * value, a string ID that uniquely identifies a device to the app’s vendor. This method may\n * sometimes return `nil`, in which case wait and call the method again later. This might happen\n * when the device has been restarted before the user has unlocked the device.\n *\n * The OS will change the vendor identifier if all apps from the current app's vendor have been\n * uninstalled.\n *\n * @return A `Promise` that fulfills with a `string` specifying the app's vendor ID. Apps from the\n * same vendor will return the same ID. See Apple's documentation for more information about the\n * vendor ID's semantics.\n *\n * @example\n * ```ts\n * await Application.getIosIdForVendorAsync();\n * // \"68753A44-4D6F-1226-9C60-0050E4C00067\"\n * ```\n * @platform ios\n */\nexport async function getIosIdForVendorAsync(): Promise<string | null> {\n  if (!ExpoApplication.getIosIdForVendorAsync) {\n    throw new UnavailabilityError('expo-application', 'getIosIdForVendorAsync');\n  }\n  return (await ExpoApplication.getIosIdForVendorAsync()) ?? null;\n}\n\n// @docsMissing\nexport enum ApplicationReleaseType {\n  UNKNOWN = 0,\n  SIMULATOR = 1,\n  ENTERPRISE = 2,\n  DEVELOPMENT = 3,\n  AD_HOC = 4,\n  APP_STORE = 5,\n}\n\n// @needsAudit\n/**\n * Gets the iOS application release type.\n * @return Returns a promise which fulfills with an [`ApplicationReleaseType`](#applicationreleasetype).\n * @platform ios\n */\nexport async function getIosApplicationReleaseTypeAsync(): Promise<ApplicationReleaseType> {\n  if (!ExpoApplication.getApplicationReleaseTypeAsync) {\n    throw new UnavailabilityError('expo-application', 'getApplicationReleaseTypeAsync');\n  }\n  return await ExpoApplication.getApplicationReleaseTypeAsync();\n}\n\n// @docsMissing\nexport type PushNotificationServiceEnvironment = 'development' | 'production' | null;\n\n// @needsAudit\n/**\n * Gets the current [Apple Push Notification (APN)](https://developer.apple.com/documentation/bundleresources/entitlements/aps-environment?language=objc)\n * service environment.\n * @return Returns a promise fulfilled with the string, either `'development'` or `'production'`,\n * based on the current APN environment, or `null` on the simulator as it does not support registering with APNs.\n * @platform ios\n */\nexport async function getIosPushNotificationServiceEnvironmentAsync(): Promise<PushNotificationServiceEnvironment> {\n  if (!ExpoApplication.getPushNotificationServiceEnvironmentAsync) {\n    throw new UnavailabilityError('expo-application', 'getPushNotificationServiceEnvironmentAsync');\n  }\n  return await ExpoApplication.getPushNotificationServiceEnvironmentAsync();\n}\n\n// @needsAudit\n/**\n * Gets the time the app was installed onto the device, not counting subsequent updates. If the app\n * is uninstalled and reinstalled, this method returns the time the app was reinstalled.\n * - On iOS, this method uses the [`NSFileCreationDate`](https://developer.apple.com/documentation/foundation/nsfilecreationdate?language=objc)\n * of the app's document root directory.\n * - On Android, this method uses [`PackageInfo.firstInstallTime`](https://developer.android.com/reference/android/content/pm/PackageInfo.html#firstInstallTime).\n * - On web, this method returns `null`.\n *\n * @return Returns a `Promise` that fulfills with a `Date` object that specifies the time the app\n * was installed on the device.\n *\n * @example\n * ```ts\n * await Application.getInstallationTimeAsync();\n * // 2019-07-18T18:08:26.121Z\n * ```\n */\nexport async function getInstallationTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getInstallationTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getInstallationTimeAsync');\n  }\n  const installationTime = await ExpoApplication.getInstallationTimeAsync();\n  return new Date(installationTime);\n}\n\n// @needsAudit\n/**\n * Gets the last time the app was updated from the Google Play Store.\n * @return Returns a `Promise` that fulfills with a `Date` object that specifies the last time\n * the app was updated via the Google Play Store).\n *\n * @example\n * ```ts\n * await Application.getLastUpdateTimeAsync();\n * // 2019-07-18T21:20:16.887Z\n * ```\n * @platform android\n */\nexport async function getLastUpdateTimeAsync(): Promise<Date> {\n  if (!ExpoApplication.getLastUpdateTimeAsync) {\n    throw new UnavailabilityError('expo-application', 'getLastUpdateTimeAsync');\n  }\n  const lastUpdateTime = await ExpoApplication.getLastUpdateTimeAsync();\n  return new Date(lastUpdateTime);\n}\n"]},"metadata":{},"sourceType":"module"}