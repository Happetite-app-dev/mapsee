{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { ref, onValue, remove } from \"firebase/database\";\nimport { useContext, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AppContext from \"../components/AppContext\";\nimport GoBackHeader from \"../components/GoBackHeader\";\nimport { PopUpType1 } from \"../components/PopUp\";\nimport RecordFlatList from \"../components/StorageScreen/RecordFlatList\";\nimport { database } from \"../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar gotoMakeFolderBottomSheetScreen = function gotoMakeFolderBottomSheetScreen(_ref) {\n  var navigation = _ref.navigation,\n      folderID = _ref.folderID,\n      folderName = _ref.folderName,\n      folderColor = _ref.folderColor,\n      folderUserIDs = _ref.folderUserIDs,\n      recordDataSource = _ref.recordDataSource;\n  navigation.navigate(\"MakeFolderBottomSheetScreen\", {\n    folderID: folderID,\n    folderName: folderName,\n    folderColor: folderColor,\n    folderUserIDs: folderUserIDs,\n    recordDataSource: recordDataSource\n  });\n};\n\nvar exitFolder = function () {\n  var _ref3 = _asyncToGenerator(function* (_ref2) {\n    var myUID = _ref2.myUID,\n        folderID = _ref2.folderID,\n        navigation = _ref2.navigation;\n    yield exitData(myUID, folderID).then(function () {\n      return navigation.navigate(\"Storage\");\n    });\n  });\n\n  return function exitFolder(_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar exitData = function () {\n  var _ref4 = _asyncToGenerator(function* (myUID, folderID) {\n    var db = database;\n    var reference1 = ref(db, \"/users/\" + myUID + \"/folderIDs/\" + folderID);\n    yield remove(reference1).then(function () {\n      var reference2 = ref(db, \"/folders/\" + folderID + \"/userIDs/\" + myUID);\n      remove(reference2);\n    }).then(function () {\n      var reference3 = ref(db, \"/folders/\" + folderID + \"/folderName/\" + myUID);\n      remove(reference3);\n    }).then(function () {\n      var reference4 = ref(db, \"/folders/\" + folderID + \"/folderColor/\" + myUID);\n      remove(reference4);\n    }).then(onValue(ref(db, \"/folders/\" + folderID + \"/userIDs\"), function (snapshot) {\n      if (!snapshot.hasChildren()) {\n        var reference3 = ref(db, \"/folders/\" + folderID);\n        remove(reference3);\n      }\n    }));\n  });\n\n  return function exitData(_x2, _x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar SingleFolderScreen = function SingleFolderScreen(_ref5) {\n  var navigation = _ref5.navigation,\n      route = _ref5.route;\n  var myContext = useContext(AppContext);\n  var myUID = myContext.myUID;\n  var _route$params = route.params,\n      recordDataSource = _route$params.recordDataSource,\n      folderID = _route$params.folderID,\n      folderName = _route$params.folderName,\n      folderColor = _route$params.folderColor,\n      folderUserIDs = _route$params.folderUserIDs;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return _jsxs(View, {\n    style: {\n      height: \"100%\",\n      width: \"100%\",\n      backgroundColor: \"white\"\n    },\n    children: [_jsx(GoBackHeader, {\n      navigation: navigation,\n      text: folderName,\n      folderColor: folderColor,\n      isShareFolder: folderUserIDs.length >= 2,\n      rightButton: \"edit\",\n      rightButtonFunction: function rightButtonFunction() {\n        return gotoMakeFolderBottomSheetScreen({\n          navigation: navigation,\n          folderID: folderID,\n          folderName: folderName,\n          folderColor: folderColor,\n          folderUserIDs: folderUserIDs,\n          recordDataSource: recordDataSource\n        });\n      },\n      rightButtonFunction2: function rightButtonFunction2() {\n        return setModalVisible(true);\n      }\n    }), _jsx(RecordFlatList, {\n      recordDataSource: recordDataSource,\n      stackNavigation: navigation\n    }), _jsx(PopUpType1, {\n      modalVisible: modalVisible,\n      modalHandler: setModalVisible,\n      action: function action() {\n        return exitFolder({\n          myUID: myUID,\n          folderID: folderID,\n          navigation: navigation\n        });\n      },\n      askValue: \"\\uC815\\uB9D0 \\uC0AD\\uC81C\\uD558\\uC2DC\\uACA0\\uC5B4\\uC694?\",\n      actionValue: \"\\uC0AD\\uC81C\"\n    })]\n  });\n};\n\nexport default SingleFolderScreen;","map":{"version":3,"names":["ref","onValue","remove","useContext","useState","AppContext","GoBackHeader","PopUpType1","RecordFlatList","database","gotoMakeFolderBottomSheetScreen","navigation","folderID","folderName","folderColor","folderUserIDs","recordDataSource","navigate","exitFolder","myUID","exitData","then","db","reference1","reference2","reference3","reference4","snapshot","hasChildren","SingleFolderScreen","route","myContext","params","modalVisible","setModalVisible","height","width","backgroundColor","length"],"sources":["/Users/jeongin/mapsee_2/screens/SingleFolderScreen.js"],"sourcesContent":["import { ref, onValue, remove } from \"firebase/database\";\nimport { useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport AppContext from \"../components/AppContext\";\nimport GoBackHeader from \"../components/GoBackHeader\";\nimport { PopUpType1 } from \"../components/PopUp\";\nimport RecordFlatList from \"../components/StorageScreen/RecordFlatList\";\nimport { database } from \"../firebase\";\n\nconst gotoMakeFolderBottomSheetScreen = ({\n  navigation,\n  folderID,\n  folderName,\n  folderColor,\n  folderUserIDs,\n  recordDataSource,\n}) => {\n  navigation.navigate(\"MakeFolderBottomSheetScreen\", {\n    folderID,\n    folderName,\n    folderColor,\n    folderUserIDs,\n    recordDataSource,\n  });\n};\nconst exitFolder = async ({ myUID, folderID, navigation }) => {\n  await exitData(myUID, folderID).then(\n    () => navigation.navigate(\"Storage\") //realtimeDataBase가 모두 업데이트 된후\n  );\n};\nconst exitData = async (myUID, folderID) => {\n  const db = database;\n  const reference1 = ref(db, \"/users/\" + myUID + \"/folderIDs/\" + folderID);\n  await remove(reference1)\n    .then(() => {\n      const reference2 = ref(db, \"/folders/\" + folderID + \"/userIDs/\" + myUID);\n      remove(reference2);\n    })\n    .then(() => {\n      const reference3 = ref(\n        db,\n        \"/folders/\" + folderID + \"/folderName/\" + myUID\n      );\n      remove(reference3);\n    })\n    .then(() => {\n      const reference4 = ref(\n        db,\n        \"/folders/\" + folderID + \"/folderColor/\" + myUID\n      );\n      remove(reference4);\n    })\n    .then(\n      //지울 필요가 없음\n      onValue(ref(db, \"/folders/\" + folderID + \"/userIDs\"), (snapshot) => {\n        if (!snapshot.hasChildren()) {\n          const reference3 = ref(db, \"/folders/\" + folderID);\n          remove(reference3);\n        }\n      })\n    );\n};\n\nconst SingleFolderScreen = ({ navigation, route }) => {\n  const myContext = useContext(AppContext);\n  const myUID = myContext.myUID;\n\n  const { recordDataSource, folderID, folderName, folderColor, folderUserIDs } =\n    route.params;\n  const [modalVisible, setModalVisible] = useState(false);\n  return (\n    <View style={{ height: \"100%\", width: \"100%\", backgroundColor: \"white\" }}>\n      <GoBackHeader\n        navigation={navigation}\n        text={folderName}\n        folderColor={folderColor}\n        isShareFolder={folderUserIDs.length >= 2}\n        rightButton=\"edit\"\n        rightButtonFunction={() =>\n          gotoMakeFolderBottomSheetScreen({\n            navigation,\n            folderID,\n            folderName,\n            folderColor,\n            folderUserIDs,\n            recordDataSource,\n          })\n        }\n        rightButtonFunction2={() => setModalVisible(true)}\n      />\n      <RecordFlatList\n        recordDataSource={recordDataSource}\n        stackNavigation={navigation}\n      />\n      <PopUpType1\n        modalVisible={modalVisible}\n        modalHandler={setModalVisible}\n        action={() => exitFolder({ myUID, folderID, navigation })}\n        askValue=\"정말 삭제하시겠어요?\"\n        actionValue=\"삭제\"\n      />\n    </View>\n  );\n};\n\nexport default SingleFolderScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}