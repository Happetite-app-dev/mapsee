{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"descriptionNumberOfLines\", \"titleEllipsizeMode\", \"descriptionEllipsizeMode\", \"descriptionStyle\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getLeftStyles, getRightStyles } from \"./utils\";\n\nvar ListItem = function ListItem(_ref) {\n  var left = _ref.left,\n      right = _ref.right,\n      title = _ref.title,\n      description = _ref.description,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      titleStyle = _ref.titleStyle,\n      _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n      _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n      descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n      titleEllipsizeMode = _ref.titleEllipsizeMode,\n      descriptionEllipsizeMode = _ref.descriptionEllipsizeMode,\n      descriptionStyle = _ref.descriptionStyle,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      alignToTop = _React$useState2[0],\n      setAlignToTop = _React$useState2[1];\n\n  var onDescriptionTextLayout = function onDescriptionTextLayout(event) {\n    if (!theme.isV3) {\n      return;\n    }\n\n    var nativeEvent = event.nativeEvent;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n\n  var renderDescription = function renderDescription(descriptionColor, description) {\n    return typeof description === 'function' ? description({\n      selectable: false,\n      ellipsizeMode: descriptionEllipsizeMode,\n      color: descriptionColor,\n      fontSize: styles.description.fontSize\n    }) : React.createElement(Text, {\n      selectable: false,\n      numberOfLines: descriptionNumberOfLines,\n      ellipsizeMode: descriptionEllipsizeMode,\n      style: [styles.description, {\n        color: descriptionColor\n      }, descriptionStyle],\n      onTextLayout: onDescriptionTextLayout\n    }, description);\n  };\n\n  var renderTitle = function renderTitle() {\n    var titleColor = theme.isV3 ? theme.colors.onSurface : color(theme.colors.text).alpha(0.87).rgb().string();\n    return typeof title === 'function' ? title({\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      color: titleColor,\n      fontSize: styles.title.fontSize\n    }) : React.createElement(Text, {\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      numberOfLines: titleNumberOfLines,\n      style: [styles.title, {\n        color: titleColor\n      }, titleStyle]\n    }, title);\n  };\n\n  var descriptionColor = theme.isV3 ? theme.colors.onSurfaceVariant : color(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    style: [theme.isV3 ? styles.containerV3 : styles.container, style],\n    onPress: onPress\n  }), React.createElement(View, {\n    style: theme.isV3 ? styles.rowV3 : styles.row\n  }, left ? left({\n    color: descriptionColor,\n    style: getLeftStyles(alignToTop, description, theme.isV3)\n  }) : null, React.createElement(View, {\n    style: [theme.isV3 ? styles.itemV3 : styles.item, styles.content]\n  }, renderTitle(), description ? renderDescription(descriptionColor, description) : null), right ? right({\n    color: descriptionColor,\n    style: getRightStyles(alignToTop, description, theme.isV3)\n  }) : null));\n};\n\nListItem.displayName = 'List.Item';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  rowV3: {\n    flexDirection: 'row',\n    marginVertical: 6\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  itemV3: {\n    paddingLeft: 16\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withInternalTheme(ListItem);","map":{"version":3,"mappings":"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","names":["React","color","withInternalTheme","TouchableRipple","Text","getLeftStyles","getRightStyles","ListItem","left","_ref","right","title","description","onPress","theme","style","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","useState","alignToTop","setAlignToTop","onDescriptionTextLayout","event","isV3","nativeEvent","lines","length","renderDescription","descriptionColor","selectable","ellipsizeMode","fontSize","styles","numberOfLines","onTextLayout","renderTitle","titleColor","colors","onSurface","text","alpha","rgb","string","onSurfaceVariant","_extends","containerV3","container","View","rowV3","row","itemV3","item","content","displayName","StyleSheet","create","padding","paddingVertical","paddingRight","flexDirection","marginVertical","paddingLeft","flex","justifyContent"],"sources":["ListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  FlexAlignType,\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  StyleProp,\n  StyleSheet,\n  TextLayoutEventData,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type {\n  $RemoveChildren,\n  EllipsizeProp,\n  InternalTheme,\n} from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { getLeftStyles, getRightStyles } from './utils';\n\ntype Title =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ninterface Style {\n  marginLeft?: number;\n  marginRight?: number;\n  marginVertical?: number;\n  alignSelf?: FlexAlignType;\n}\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: Title;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string; style: Style }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string; style?: Style }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const [alignToTop, setAlignToTop] = React.useState(false);\n\n  const onDescriptionTextLayout = (\n    event: NativeSyntheticEvent<TextLayoutEventData>\n  ) => {\n    if (!theme.isV3) {\n      return;\n    }\n    const { nativeEvent } = event;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n        onTextLayout={onDescriptionTextLayout}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const renderTitle = () => {\n    const titleColor = theme.isV3\n      ? theme.colors.onSurface\n      : color(theme.colors.text).alpha(0.87).rgb().string();\n\n    return typeof title === 'function' ? (\n      title({\n        selectable: false,\n        ellipsizeMode: titleEllipsizeMode,\n        color: titleColor,\n        fontSize: styles.title.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        ellipsizeMode={titleEllipsizeMode}\n        numberOfLines={titleNumberOfLines}\n        style={[styles.title, { color: titleColor }, titleStyle]}\n      >\n        {title}\n      </Text>\n    );\n  };\n\n  const descriptionColor = theme.isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[theme.isV3 ? styles.containerV3 : styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={theme.isV3 ? styles.rowV3 : styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: getLeftStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n        <View\n          style={[theme.isV3 ? styles.itemV3 : styles.item, styles.content]}\n        >\n          {renderTitle()}\n\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: getRightStyles(alignToTop, description, theme.isV3),\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  rowV3: {\n    flexDirection: 'row',\n    marginVertical: 6,\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  itemV3: {\n    paddingLeft: 16,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withInternalTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}