{"ast":null,"code":"import { PermissionStatus } from \"./Permissions.types\";\nexport function coalesceStatuses(permissions) {\n  var statuses = Object.keys(permissions).map(function (type) {\n    return permissions[type].status;\n  });\n  statuses.sort(function (status1, status2) {\n    return _getStatusWeight(status1) - _getStatusWeight(status2);\n  });\n  return statuses[statuses.length - 1];\n}\n\nfunction _getStatusWeight(status) {\n  switch (status) {\n    case PermissionStatus.GRANTED:\n      return 0;\n\n    case PermissionStatus.DENIED:\n      return 1;\n\n    case PermissionStatus.UNDETERMINED:\n      return 2;\n\n    default:\n      return 100;\n  }\n}\n\nexport function coalesceExpirations(permissions) {\n  var maxExpiration = 9007199254740991;\n  var expirations = Object.keys(permissions).map(function (type) {\n    return permissions[type].expires;\n  });\n  expirations.sort(function (e1, e2) {\n    return (e1 == null || e1 === 'never' ? maxExpiration : e1) - (e2 == null || e2 === 'never' ? maxExpiration : e2);\n  });\n  return expirations[0];\n}\nexport function coalesceCanAskAgain(permissions) {\n  return Object.keys(permissions).reduce(function (canAskAgain, type) {\n    return canAskAgain && permissions[type].canAskAgain;\n  }, true);\n}\nexport function coalesceGranted(permissions) {\n  return Object.keys(permissions).reduce(function (granted, type) {\n    return granted && permissions[type].granted;\n  }, true);\n}","map":{"version":3,"mappings":"AAAA,SAA8CA,gBAA9C;AAEA,OAAM,SAAUC,gBAAV,CAA2BC,WAA3B,EAAqD;EACzD,IAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6B,UAACC,IAAD;IAAA,OAAUL,WAAW,CAACK,IAAD,CAAX,CAAkBC,MAA5B;EAAA,CAA7B,CAAjB;EACAL,QAAQ,CAACM,IAAT,CAAc,UAACC,OAAD,EAAUC,OAAV;IAAA,OAAsBC,gBAAgB,CAACF,OAAD,CAAhB,GAA4BE,gBAAgB,CAACD,OAAD,CAAlE;EAAA,CAAd;EAEA,OAAOR,QAAQ,CAACA,QAAQ,CAACU,MAAT,GAAkB,CAAnB,CAAf;AACD;;AAED,SAASD,gBAAT,CAA0BJ,MAA1B,EAAkD;EAIhD,QAAQA,MAAR;IACE,KAAKR,gBAAgB,CAACc,OAAtB;MACE,OAAO,CAAP;;IACF,KAAKd,gBAAgB,CAACe,MAAtB;MACE,OAAO,CAAP;;IACF,KAAKf,gBAAgB,CAACgB,YAAtB;MACE,OAAO,CAAP;;IACF;MACE,OAAO,GAAP;EARJ;AAUD;;AAED,OAAM,SAAUC,mBAAV,CAA8Bf,WAA9B,EAAwD;EAC5D,IAAMgB,aAAa,GAAG,gBAAtB;EACA,IAAMC,WAAW,GAAGf,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA6B,UAACC,IAAD;IAAA,OAAUL,WAAW,CAACK,IAAD,CAAX,CAAkBa,OAA5B;EAAA,CAA7B,CAApB;EACAD,WAAW,CAACV,IAAZ,CACE,UAACY,EAAD,EAAKC,EAAL;IAAA,OACE,CAACD,EAAE,IAAI,IAAN,IAAcA,EAAE,KAAK,OAArB,GAA+BH,aAA/B,GAA+CG,EAAhD,KACCC,EAAE,IAAI,IAAN,IAAcA,EAAE,KAAK,OAArB,GAA+BJ,aAA/B,GAA+CI,EADhD,CADF;EAAA,CADF;EAMA,OAAOH,WAAW,CAAC,CAAD,CAAlB;AACD;AAED,OAAM,SAAUI,mBAAV,CAA8BrB,WAA9B,EAAwD;EAC5D,OAAOE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBsB,MAAzB,CACL,UAACC,WAAD,EAAclB,IAAd;IAAA,OAAuBkB,WAAW,IAAIvB,WAAW,CAACK,IAAD,CAAX,CAAkBkB,WAAxD;EAAA,CADK,EAEL,IAFK,CAAP;AAID;AAED,OAAM,SAAUC,eAAV,CAA0BxB,WAA1B,EAAoD;EACxD,OAAOE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBsB,MAAzB,CACL,UAACG,OAAD,EAAUpB,IAAV;IAAA,OAAmBoB,OAAO,IAAIzB,WAAW,CAACK,IAAD,CAAX,CAAkBoB,OAAhD;EAAA,CADK,EAEL,IAFK,CAAP;AAID","names":["PermissionStatus","coalesceStatuses","permissions","statuses","Object","keys","map","type","status","sort","status1","status2","_getStatusWeight","length","GRANTED","DENIED","UNDETERMINED","coalesceExpirations","maxExpiration","expirations","expires","e1","e2","coalesceCanAskAgain","reduce","canAskAgain","coalesceGranted","granted"],"sourceRoot":"","sources":["../src/CoalescedPermissions.ts"],"sourcesContent":["import { PermissionExpiration, PermissionMap, PermissionStatus } from './Permissions.types';\n\nexport function coalesceStatuses(permissions: PermissionMap): PermissionStatus {\n  const statuses = Object.keys(permissions).map((type) => permissions[type].status);\n  statuses.sort((status1, status2) => _getStatusWeight(status1) - _getStatusWeight(status2));\n  // We choose the \"heaviest\" status with the most implications\n  return statuses[statuses.length - 1];\n}\n\nfunction _getStatusWeight(status: PermissionStatus): number {\n  // In terms of weight, we treat UNDETERMINED > DENIED > GRANTED since UNDETERMINED requires the\n  // most amount of further handling (prompting for permission and then checking that permission)\n  // and GRANTED requires the least\n  switch (status) {\n    case PermissionStatus.GRANTED:\n      return 0;\n    case PermissionStatus.DENIED:\n      return 1;\n    case PermissionStatus.UNDETERMINED:\n      return 2;\n    default:\n      return 100;\n  }\n}\n\nexport function coalesceExpirations(permissions: PermissionMap): PermissionExpiration {\n  const maxExpiration = 9007199254740991; // Number.MAX_SAFE_INTEGER\n  const expirations = Object.keys(permissions).map((type) => permissions[type].expires);\n  expirations.sort(\n    (e1, e2) =>\n      (e1 == null || e1 === 'never' ? maxExpiration : e1) -\n      (e2 == null || e2 === 'never' ? maxExpiration : e2)\n  );\n  // We choose the earliest expiration\n  return expirations[0];\n}\n\nexport function coalesceCanAskAgain(permissions: PermissionMap): boolean {\n  return Object.keys(permissions).reduce<boolean>(\n    (canAskAgain, type) => canAskAgain && permissions[type].canAskAgain,\n    true\n  );\n}\n\nexport function coalesceGranted(permissions: PermissionMap): boolean {\n  return Object.keys(permissions).reduce<boolean>(\n    (granted, type) => granted && permissions[type].granted,\n    true\n  );\n}\n"]},"metadata":{},"sourceType":"module"}