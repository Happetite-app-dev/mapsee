{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"enabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { State } from \"../../State\";\nimport { EventTypes } from \"../interfaces\";\nimport GestureHandler from \"./GestureHandler\";\nvar DEFAULT_MAX_DURATION_MS = 500;\nvar DEFAULT_MAX_DELAY_MS = 200;\nvar DEFAULT_NUMBER_OF_TAPS = 1;\nvar DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\n\nvar TapGestureHandler = function (_GestureHandler) {\n  _inherits(TapGestureHandler, _GestureHandler);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDeltaX\", Number.MIN_SAFE_INTEGER);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDeltaY\", Number.MIN_SAFE_INTEGER);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDistSq\", Number.MIN_SAFE_INTEGER);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDelayMs\", DEFAULT_MAX_DELAY_MS);\n\n    _defineProperty(_assertThisInitialized(_this), \"numberOfTaps\", DEFAULT_NUMBER_OF_TAPS);\n\n    _defineProperty(_assertThisInitialized(_this), \"minNumberOfPointers\", DEFAULT_MIN_NUMBER_OF_POINTERS);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentMaxNumberOfPointers\", 1);\n\n    _defineProperty(_assertThisInitialized(_this), \"startX\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"startY\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"offsetY\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastX\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastY\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"waitTimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"delayTimeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"tapsSoFar\", 0);\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"init\",\n    value: function init(ref, propsRef) {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"init\", this).call(this, ref, propsRef);\n\n      this.setShouldCancelWhenOutside(true);\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$enabled = _ref.enabled,\n          enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n          props = _objectWithoutProperties(_ref, _excluded);\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        enabled: enabled\n      }, props));\n\n      this.enabled = enabled;\n\n      if (this.config.numberOfTaps !== undefined) {\n        this.numberOfTaps = this.config.numberOfTaps;\n      }\n\n      if (this.config.maxDurationMs !== undefined) {\n        this.maxDurationMs = this.config.maxDurationMs;\n      }\n\n      if (this.config.maxDelayMs !== undefined) {\n        this.maxDelayMs = this.config.maxDelayMs;\n      }\n\n      if (this.config.maxDeltaX !== undefined) {\n        this.maxDeltaX = this.config.maxDeltaX;\n      }\n\n      if (this.config.maxDeltaY !== undefined) {\n        this.maxDeltaY = this.config.maxDeltaY;\n      }\n\n      if (this.config.maxDistSq !== undefined) {\n        this.maxDistSq = this.config.maxDistSq;\n      }\n\n      if (this.config.minPointers !== undefined) {\n        this.minNumberOfPointers = this.config.minPointers;\n      }\n    }\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"resetConfig\", this).call(this);\n\n      this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n      this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n      this.maxDistSq = Number.MIN_SAFE_INTEGER;\n      this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n      this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n      this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n      this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(event) {\n      return {\n        x: event.offsetX,\n        y: event.offsetY,\n        absoluteX: event.x,\n        absoluteY: event.y\n      };\n    }\n  }, {\n    key: \"clearTimeouts\",\n    value: function clearTimeouts() {\n      clearTimeout(this.waitTimeout);\n      clearTimeout(this.delayTimeout);\n    }\n  }, {\n    key: \"startTap\",\n    value: function startTap(event) {\n      var _this2 = this;\n\n      this.clearTimeouts();\n      this.waitTimeout = setTimeout(function () {\n        return _this2.fail(event);\n      }, this.maxDurationMs);\n    }\n  }, {\n    key: \"endTap\",\n    value: function endTap(event) {\n      var _this3 = this;\n\n      this.clearTimeouts();\n\n      if (++this.tapsSoFar === this.numberOfTaps && this.currentMaxNumberOfPointers >= this.minNumberOfPointers) {\n        this.activate(event);\n      } else {\n        this.delayTimeout = setTimeout(function () {\n          return _this3.fail(event);\n        }, this.maxDelayMs);\n      }\n    }\n  }, {\n    key: \"onPointerDown\",\n    value: function onPointerDown(event) {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onPointerDown\", this).call(this, event);\n\n      this.tracker.addToTracker(event);\n      this.trySettingPosition(event);\n\n      if (this.tracker.getTrackedPointersCount() > 1) {\n        this.onPointerAdd(event);\n      } else {\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n      }\n\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerAdd\",\n    value: function onPointerAdd(_event) {\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY = this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.lastX;\n      this.startY = this.lastY;\n    }\n  }, {\n    key: \"onPointerUp\",\n    value: function onPointerUp(event) {\n      if (this.tracker.getTrackedPointersCount() > 1) {\n        this.tracker.removeFromTracker(event.pointerId);\n        this.onPointerRemove(event);\n      } else {\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.tracker.removeFromTracker(event.pointerId);\n      }\n\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerRemove\",\n    value: function onPointerRemove(_event) {\n      this.offsetX += this.lastX - this.startX;\n      this.offsetY += this.lastY = this.startY;\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.startX = this.lastX;\n      this.startY = this.lastY;\n    }\n  }, {\n    key: \"onPointerMove\",\n    value: function onPointerMove(event) {\n      this.trySettingPosition(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerOutOfBounds\",\n    value: function onPointerOutOfBounds(event) {\n      this.trySettingPosition(event);\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n      this.updateState(event);\n    }\n  }, {\n    key: \"onPointerCancel\",\n    value: function onPointerCancel(event) {\n      this.tracker.resetTracker();\n      this.fail(event);\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(event) {\n      if (this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()) {\n        this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n      }\n\n      if (this.shouldFail()) {\n        this.fail(event);\n        return;\n      }\n\n      switch (this.currentState) {\n        case State.UNDETERMINED:\n          if (event.eventType === EventTypes.DOWN) {\n            this.begin(event);\n          }\n\n          this.startTap(event);\n          break;\n\n        case State.BEGAN:\n          if (event.eventType === EventTypes.UP) {\n            this.endTap(event);\n          }\n\n          if (event.eventType === EventTypes.DOWN) {\n            this.startTap(event);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"trySettingPosition\",\n    value: function trySettingPosition(event) {\n      if (this.currentState !== State.UNDETERMINED) {\n        return;\n      }\n\n      this.offsetX = 0;\n      this.offsetY = 0;\n      this.startX = event.x;\n      this.startY = event.y;\n    }\n  }, {\n    key: \"shouldFail\",\n    value: function shouldFail() {\n      var dx = this.lastX - this.startX + this.offsetX;\n\n      if (this.maxDeltaX !== Number.MIN_SAFE_INTEGER && Math.abs(dx) > this.maxDeltaX) {\n        return true;\n      }\n\n      var dy = this.lastY - this.startY + this.offsetY;\n\n      if (this.maxDeltaY !== Number.MIN_SAFE_INTEGER && Math.abs(dy) > this.maxDeltaY) {\n        return true;\n      }\n\n      var dist = dy * dy + dx * dx;\n      return this.maxDistSq !== Number.MIN_SAFE_INTEGER && dist > this.maxDistSq;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate(event) {\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"activate\", this).call(this, event);\n\n      if (!this.isAwaiting()) {\n        this.end(event);\n      }\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.resetProgress();\n      this.clearTimeouts();\n    }\n  }, {\n    key: \"resetProgress\",\n    value: function resetProgress() {\n      this.tapsSoFar = 0;\n      this.currentMaxNumberOfPointers = 0;\n    }\n  }]);\n\n  return TapGestureHandler;\n}(GestureHandler);\n\nexport { TapGestureHandler as default };","map":{"version":3,"mappings":"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","names":["State","EventTypes","GestureHandler","DEFAULT_MAX_DURATION_MS","DEFAULT_MAX_DELAY_MS","DEFAULT_NUMBER_OF_TAPS","DEFAULT_MIN_NUMBER_OF_POINTERS","TapGestureHandler","args","_defineProperty","Number","MIN_SAFE_INTEGER","init","ref","propsRef","setShouldCancelWhenOutside","updateGestureConfig","enabled","props","config","numberOfTaps","undefined","maxDurationMs","maxDelayMs","maxDeltaX","maxDeltaY","maxDistSq","minPointers","minNumberOfPointers","resetConfig","transformNativeEvent","event","x","offsetX","y","offsetY","absoluteX","absoluteY","clearTimeouts","clearTimeout","waitTimeout","delayTimeout","startTap","setTimeout","fail","endTap","tapsSoFar","currentMaxNumberOfPointers","activate","onPointerDown","tracker","addToTracker","trySettingPosition","getTrackedPointersCount","onPointerAdd","lastX","getLastAvgX","lastY","getLastAvgY","updateState","_event","startX","startY","onPointerUp","removeFromTracker","pointerId","onPointerRemove","onPointerMove","onPointerOutOfBounds","onPointerCancel","resetTracker","shouldFail","currentState","UNDETERMINED","eventType","DOWN","begin","BEGAN","UP","dx","Math","abs","dy","dist","isAwaiting","end","onCancel","resetProgress"],"sources":["TapGestureHandler.ts"],"sourcesContent":["import { State } from '../../State';\nimport { AdaptedPointerEvent, EventTypes } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\n\nconst DEFAULT_MAX_DURATION_MS = 500;\nconst DEFAULT_MAX_DELAY_MS = 200;\nconst DEFAULT_NUMBER_OF_TAPS = 1;\nconst DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\n\nexport default class TapGestureHandler extends GestureHandler {\n  private maxDeltaX = Number.MIN_SAFE_INTEGER;\n  private maxDeltaY = Number.MIN_SAFE_INTEGER;\n  private maxDistSq = Number.MIN_SAFE_INTEGER;\n  private maxDurationMs = DEFAULT_MAX_DURATION_MS;\n  private maxDelayMs = DEFAULT_MAX_DELAY_MS;\n\n  private numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n  private minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  private currentMaxNumberOfPointers = 1;\n\n  private startX = 0;\n  private startY = 0;\n  private offsetX = 0;\n  private offsetY = 0;\n  private lastX = 0;\n  private lastY = 0;\n\n  private waitTimeout: number | undefined;\n  private delayTimeout: number | undefined;\n\n  private tapsSoFar = 0;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n    this.setShouldCancelWhenOutside(true);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    this.enabled = enabled;\n\n    if (this.config.numberOfTaps !== undefined) {\n      this.numberOfTaps = this.config.numberOfTaps;\n    }\n\n    if (this.config.maxDurationMs !== undefined) {\n      this.maxDurationMs = this.config.maxDurationMs;\n    }\n\n    if (this.config.maxDelayMs !== undefined) {\n      this.maxDelayMs = this.config.maxDelayMs;\n    }\n\n    if (this.config.maxDeltaX !== undefined) {\n      this.maxDeltaX = this.config.maxDeltaX;\n    }\n\n    if (this.config.maxDeltaY !== undefined) {\n      this.maxDeltaY = this.config.maxDeltaY;\n    }\n\n    if (this.config.maxDistSq !== undefined) {\n      this.maxDistSq = this.config.maxDistSq;\n    }\n\n    if (this.config.minPointers !== undefined) {\n      this.minNumberOfPointers = this.config.minPointers;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n\n    this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n    this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n    this.maxDistSq = Number.MIN_SAFE_INTEGER;\n    this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n    this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n    this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n    this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n  }\n\n  protected transformNativeEvent(event: AdaptedPointerEvent) {\n    return {\n      x: event.offsetX,\n      y: event.offsetY,\n      absoluteX: event.x,\n      absoluteY: event.y,\n    };\n  }\n\n  private clearTimeouts(): void {\n    clearTimeout(this.waitTimeout);\n    clearTimeout(this.delayTimeout);\n  }\n\n  private startTap(event: AdaptedPointerEvent): void {\n    this.clearTimeouts();\n\n    this.waitTimeout = setTimeout(() => this.fail(event), this.maxDurationMs);\n  }\n\n  private endTap(event: AdaptedPointerEvent): void {\n    this.clearTimeouts();\n\n    if (\n      ++this.tapsSoFar === this.numberOfTaps &&\n      this.currentMaxNumberOfPointers >= this.minNumberOfPointers\n    ) {\n      this.activate(event);\n    } else {\n      this.delayTimeout = setTimeout(() => this.fail(event), this.maxDelayMs);\n    }\n  }\n\n  //Handling Events\n  protected onPointerDown(event: AdaptedPointerEvent): void {\n    super.onPointerDown(event);\n    this.tracker.addToTracker(event);\n\n    this.trySettingPosition(event);\n\n    if (this.tracker.getTrackedPointersCount() > 1) {\n      this.onPointerAdd(event);\n    } else {\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n    }\n    this.updateState(event);\n  }\n\n  protected onPointerAdd(_event: AdaptedPointerEvent): void {\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY = this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.lastX;\n    this.startY = this.lastY;\n  }\n\n  protected onPointerUp(event: AdaptedPointerEvent): void {\n    if (this.tracker.getTrackedPointersCount() > 1) {\n      this.tracker.removeFromTracker(event.pointerId);\n\n      this.onPointerRemove(event);\n    } else {\n      this.lastX = this.tracker.getLastAvgX();\n      this.lastY = this.tracker.getLastAvgY();\n\n      this.tracker.removeFromTracker(event.pointerId);\n    }\n\n    this.updateState(event);\n  }\n\n  protected onPointerRemove(_event: AdaptedPointerEvent): void {\n    this.offsetX += this.lastX - this.startX;\n    this.offsetY += this.lastY = this.startY;\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.startX = this.lastX;\n    this.startY = this.lastY;\n  }\n\n  protected onPointerMove(event: AdaptedPointerEvent): void {\n    this.trySettingPosition(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n  }\n  protected onPointerOutOfBounds(event: AdaptedPointerEvent): void {\n    this.trySettingPosition(event);\n\n    this.lastX = this.tracker.getLastAvgX();\n    this.lastY = this.tracker.getLastAvgY();\n\n    this.updateState(event);\n  }\n\n  protected onPointerCancel(event: AdaptedPointerEvent): void {\n    this.tracker.resetTracker();\n    this.fail(event);\n  }\n\n  private updateState(event: AdaptedPointerEvent): void {\n    if (\n      this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()\n    ) {\n      this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n    }\n\n    if (this.shouldFail()) {\n      this.fail(event);\n      return;\n    }\n\n    switch (this.currentState) {\n      case State.UNDETERMINED:\n        if (event.eventType === EventTypes.DOWN) {\n          this.begin(event);\n        }\n        this.startTap(event);\n        break;\n      case State.BEGAN:\n        if (event.eventType === EventTypes.UP) {\n          this.endTap(event);\n        }\n        if (event.eventType === EventTypes.DOWN) {\n          this.startTap(event);\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private trySettingPosition(event: AdaptedPointerEvent): void {\n    if (this.currentState !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.startX = event.x;\n    this.startY = event.y;\n  }\n\n  private shouldFail(): boolean {\n    const dx = this.lastX - this.startX + this.offsetX;\n    if (\n      this.maxDeltaX !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dx) > this.maxDeltaX\n    ) {\n      return true;\n    }\n\n    const dy = this.lastY - this.startY + this.offsetY;\n    if (\n      this.maxDeltaY !== Number.MIN_SAFE_INTEGER &&\n      Math.abs(dy) > this.maxDeltaY\n    ) {\n      return true;\n    }\n\n    const dist = dy * dy + dx * dx;\n\n    return this.maxDistSq !== Number.MIN_SAFE_INTEGER && dist > this.maxDistSq;\n  }\n\n  protected activate(event: AdaptedPointerEvent): void {\n    super.activate(event);\n\n    if (!this.isAwaiting()) {\n      this.end(event);\n    }\n  }\n\n  protected onCancel(): void {\n    this.resetProgress();\n    this.clearTimeouts();\n  }\n\n  protected resetProgress(): void {\n    this.tapsSoFar = 0;\n    this.currentMaxNumberOfPointers = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}