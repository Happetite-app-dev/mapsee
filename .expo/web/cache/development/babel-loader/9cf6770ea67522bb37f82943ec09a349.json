{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsEmitterModule from \"./NotificationsEmitterModule\";\nvar emitter = new EventEmitter(NotificationsEmitterModule);\nvar didReceiveNotificationEventName = 'onDidReceiveNotification';\nvar didDropNotificationsEventName = 'onNotificationsDeleted';\nvar didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nexport var DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\nexport function addNotificationReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationEventName, listener);\n}\nexport function addNotificationsDroppedListener(listener) {\n  return emitter.addListener(didDropNotificationsEventName, listener);\n}\nexport function addNotificationResponseReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationResponseEventName, listener);\n}\nexport function removeNotificationSubscription(subscription) {\n  emitter.removeSubscription(subscription);\n}\nexport function getLastNotificationResponseAsync() {\n  return _getLastNotificationResponseAsync.apply(this, arguments);\n}\n\nfunction _getLastNotificationResponseAsync() {\n  _getLastNotificationResponseAsync = _asyncToGenerator(function* () {\n    if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n      throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n    }\n\n    return yield NotificationsEmitterModule.getLastNotificationResponseAsync();\n  });\n  return _getLastNotificationResponseAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,EAAqCC,mBAArC,QAAgE,mBAAhE;AAGA,OAAOC,0BAAP;AAGA,IAAMC,OAAO,GAAG,IAAIH,YAAJ,CAAiBE,0BAAjB,CAAhB;AAEA,IAAME,+BAA+B,GAAG,0BAAxC;AACA,IAAMC,6BAA6B,GAAG,wBAAtC;AACA,IAAMC,uCAAuC,GAAG,kCAAhD;AAEA,OAAO,IAAMC,yBAAyB,GAAG,4CAAlC;AAEP,OAAM,SAAUC,+BAAV,CACJC,QADI,EACmC;EAEvC,OAAON,OAAO,CAACO,WAAR,CAAkCN,+BAAlC,EAAmEK,QAAnE,CAAP;AACD;AAED,OAAM,SAAUE,+BAAV,CAA0CF,QAA1C,EAA8D;EAClE,OAAON,OAAO,CAACO,WAAR,CAA0BL,6BAA1B,EAAyDI,QAAzD,CAAP;AACD;AAED,OAAM,SAAUG,uCAAV,CACJH,QADI,EAC2C;EAE/C,OAAON,OAAO,CAACO,WAAR,CACLJ,uCADK,EAELG,QAFK,CAAP;AAID;AAED,OAAM,SAAUI,8BAAV,CAAyCC,YAAzC,EAAmE;EACvEX,OAAO,CAACY,kBAAR,CAA2BD,YAA3B;AACD;AAED,gBAAsBE,gCAAtB;EAAA;AAAA;;;wDAAO,aAA+C;IACpD,IAAI,CAACd,0BAA0B,CAACc,gCAAhC,EAAkE;MAChE,MAAM,IAAIf,mBAAJ,CAAwB,mBAAxB,EAA6C,kCAA7C,CAAN;IACD;;IACD,aAAaC,0BAA0B,CAACc,gCAA3B,EAAb;EACD,C","names":["EventEmitter","UnavailabilityError","NotificationsEmitterModule","emitter","didReceiveNotificationEventName","didDropNotificationsEventName","didReceiveNotificationResponseEventName","DEFAULT_ACTION_IDENTIFIER","addNotificationReceivedListener","listener","addListener","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","subscription","removeSubscription","getLastNotificationResponseAsync"],"sourceRoot":"","sources":["../src/NotificationsEmitter.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"]},"metadata":{},"sourceType":"module"}