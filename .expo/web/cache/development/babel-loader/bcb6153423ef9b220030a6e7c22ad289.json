{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { useInternalTheme } from \"../../core/theming\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { getSegmentedButtonBorderRadius, getSegmentedButtonColors, getSegmentedButtonDensityPadding } from \"./utils\";\n\nvar SegmentedButtonItem = function SegmentedButtonItem(_ref) {\n  var checked = _ref.checked,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      showSelectedCheck = _ref.showSelectedCheck,\n      icon = _ref.icon,\n      testID = _ref.testID,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      segment = _ref.segment,\n      _ref$density = _ref.density,\n      density = _ref$density === void 0 ? 'regular' : _ref$density;\n  var theme = useInternalTheme();\n  var checkScale = React.useRef(new Animated.Value(0)).current;\n  React.useEffect(function () {\n    if (!showSelectedCheck) {\n      return;\n    }\n\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n  var roundness = theme.roundness,\n      isV3 = theme.isV3;\n\n  var _getSegmentedButtonCo = getSegmentedButtonColors({\n    checked: checked,\n    theme: theme,\n    disabled: disabled\n  }),\n      borderColor = _getSegmentedButtonCo.borderColor,\n      textColor = _getSegmentedButtonCo.textColor,\n      borderWidth = _getSegmentedButtonCo.borderWidth,\n      backgroundColor = _getSegmentedButtonCo.backgroundColor;\n\n  var borderRadius = (isV3 ? 5 : 1) * roundness;\n  var segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme: theme,\n    segment: segment\n  });\n  var rippleColor = color(textColor).alpha(0.12).rgb().string();\n  var iconSize = isV3 ? 18 : 16;\n\n  var iconStyle = _objectSpread({\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0\n  }, label && {\n    transform: [{\n      scale: checkScale.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })\n    }]\n  });\n\n  var buttonStyle = _objectSpread({\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n\n  var paddingVertical = getSegmentedButtonDensityPadding({\n    density: density\n  });\n\n  var rippleStyle = _objectSpread({\n    borderRadius: borderRadius\n  }, segmentBorderRadius);\n\n  var showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n\n  var labelTextStyle = _objectSpread(_objectSpread({}, !isV3 ? {\n    textTransform: 'uppercase',\n    fontWeight: '500'\n  } : theme.fonts.labelLarge), {}, {\n    color: textColor\n  });\n\n  return React.createElement(View, {\n    style: [buttonStyle, styles.button, style]\n  }, React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityState: {\n      disabled: disabled,\n      checked: checked\n    },\n    accessibilityRole: \"button\",\n    disabled: disabled,\n    rippleColor: rippleColor,\n    testID: testID,\n    style: rippleStyle\n  }, React.createElement(View, {\n    style: [styles.content, {\n      paddingVertical: paddingVertical\n    }]\n  }, checked && showSelectedCheck ? React.createElement(Animated.View, {\n    testID: testID + \"-check-icon\",\n    style: [iconStyle, {\n      transform: [{\n        scale: checkScale\n      }]\n    }]\n  }, React.createElement(Icon, {\n    source: 'check',\n    size: iconSize\n  })) : null, showIcon ? React.createElement(Animated.View, {\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: iconSize,\n    color: disabled ? textColor : undefined\n  })) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    style: [styles.label, labelTextStyle],\n    selectable: false,\n    numberOfLines: 1\n  }, label))));\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid'\n  },\n  label: {\n    textAlign: 'center'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16\n  }\n});\nexport default SegmentedButtonItem;\nvar SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };","map":{"version":3,"mappings":"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","names":["React","color","useInternalTheme","Icon","TouchableRipple","Text","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","checked","_ref","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","checkScale","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","showIcon","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","View","styles","button","borderless","accessibilityState","accessibilityRole","content","source","size","undefined","variant","selectable","numberOfLines","StyleSheet","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme","SegmentedButton"],"sources":["SegmentedButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useInternalTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {checked && showSelectedCheck ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"]},"metadata":{},"sourceType":"module"}