{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationAccuracy } from \"./Location.types\";\nimport { LocationSubscriber } from \"./LocationSubscribers\";\nexport function installWebGeolocationPolyfill() {\n  if (Platform.OS !== 'web') {\n    if (!('window' in global)) {\n      global.window = global;\n    }\n\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    window.navigator.geolocation = {\n      getCurrentPosition: getCurrentPosition,\n      watchPosition: watchPosition,\n      clearWatch: clearWatch,\n      stopObserving: function stopObserving() {}\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options) {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced\n  };\n}\n\nfunction getCurrentPosition(success) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\nfunction _getCurrentPositionAsyncWrapper(_x, _x2, _x3) {\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\n\nfunction _getCurrentPositionAsyncWrapper2() {\n  _getCurrentPositionAsyncWrapper2 = _asyncToGenerator(function* (success, error, options) {\n    try {\n      yield ExpoLocation.requestPermissionsAsync();\n      var result = yield ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n      success(result);\n    } catch (e) {\n      error(e);\n    }\n  });\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\n\nfunction watchPosition(success, error, options) {\n  var watchId = LocationSubscriber.registerCallback(success);\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(function (err) {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({\n      watchId: watchId,\n      message: err.message,\n      code: err.code\n    });\n  });\n  return watchId;\n}\n\nfunction clearWatch(watchId) {\n  LocationSubscriber.unregisterCallback(watchId);\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,mBAAzB;AAEA,OAAOC,YAAP;AACA,SAAyBC,gBAAzB;AACA,SAASC,kBAAT;AAeA,OAAM,SAAUC,6BAAV,GAAuC;EAC3C,IAAIJ,QAAQ,CAACK,EAAT,KAAgB,KAApB,EAA2B;IAEzB,IAAI,EAAE,YAAYC,MAAd,CAAJ,EAA2B;MACzBA,MAAM,CAACC,MAAP,GAAgBD,MAAhB;IACD;;IACD,IAAI,EAAE,eAAeA,MAAM,CAACC,MAAxB,CAAJ,EAAqC;MACnCD,MAAM,CAACC,MAAP,CAAcC,SAAd,GAA0B,EAA1B;IACD;;IAGDD,MAAM,CAACC,SAAP,CAAiBC,WAAjB,GAA+B;MAC7BC,kBAAkB,EAAlBA,kBAD6B;MAE7BC,aAAa,EAAbA,aAF6B;MAG7BC,UAAU,EAAVA,UAH6B;MAO7BC,aAAa,EAAE,yBAAK,CAAG;IAPM,CAA/B;EASD;AACF;;AAED,SAASC,yBAAT,CAAmCC,OAAnC,EAA8D;EAC5D,OAAO;IACLC,QAAQ,EAAED,OAAO,CAACE,kBAAR,GAA6Bf,gBAAgB,CAACgB,IAA9C,GAAqDhB,gBAAgB,CAACiB;EAD3E,CAAP;AAGD;;AAED,SAAST,kBAAT,CACEU,OADF,EAGkC;EAAA,IADhCC,KACgC,uEADE,YAAK,CAAG,CACV;EAAA,IAAhCN,OAAgC,uEAAF,EAAE;;EAEhCO,+BAA+B,CAACF,OAAD,EAAUC,KAAV,EAAiBN,OAAjB,CAA/B;AACD;;SAIcO,+B;;;;;uDAAf,WACEF,OADF,EAEEC,KAFF,EAGEN,OAHF,EAG6B;IAE3B,IAAI;MACF,MAAMd,YAAY,CAACsB,uBAAb,EAAN;MACA,IAAMC,MAAM,SAASvB,YAAY,CAACwB,uBAAb,CAAqCX,yBAAyB,CAACC,OAAD,CAA9D,CAArB;MACAK,OAAO,CAACI,MAAD,CAAP;IACD,CAJD,CAIE,OAAOE,CAAP,EAAU;MACVL,KAAK,CAACK,CAAD,CAAL;IACD;EACF,C;;;;AAGD,SAASf,aAAT,CACES,OADF,EAEEC,KAFF,EAGEN,OAHF,EAG6B;EAE3B,IAAMY,OAAO,GAAGxB,kBAAkB,CAACyB,gBAAnB,CAAoCR,OAApC,CAAhB;EAEAnB,YAAY,CAAC4B,sBAAb,CAAoCF,OAApC,EAA6CZ,OAA7C,EAAsDe,KAAtD,CAA4D,UAACC,GAAD,EAAQ;IAClE5B,kBAAkB,CAAC6B,kBAAnB,CAAsCL,OAAtC;IACAN,KAAK,CAAC;MAAEM,OAAO,EAAPA,OAAF;MAAWM,OAAO,EAAEF,GAAG,CAACE,OAAxB;MAAiCC,IAAI,EAAEH,GAAG,CAACG;IAA3C,CAAD,CAAL;EACD,CAHD;EAKA,OAAOP,OAAP;AACD;;AAGD,SAASf,UAAT,CAAoBe,OAApB,EAAmC;EACjCxB,kBAAkB,CAAC6B,kBAAnB,CAAsCL,OAAtC;AACD","names":["Platform","ExpoLocation","LocationAccuracy","LocationSubscriber","installWebGeolocationPolyfill","OS","global","window","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch","stopObserving","convertGeolocationOptions","options","accuracy","enableHighAccuracy","High","Balanced","success","error","_getCurrentPositionAsyncWrapper","requestPermissionsAsync","result","getCurrentPositionAsync","e","watchId","registerCallback","watchPositionImplAsync","catch","err","unregisterCallback","message","code"],"sourceRoot":"","sources":["../src/GeolocationPolyfill.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\ndeclare const global: any;\n\n// @needsAudit\n/**\n * Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.\n */\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Make sure `window.navigator` is defined in the global scope.\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch((err) => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"]},"metadata":{},"sourceType":"module"}