{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nvar overflowLeft = function overflowLeft(center) {\n  return center < 0;\n};\n\nvar overflowRight = function overflowRight(center, tooltipWidth) {\n  var _Dimensions$get = Dimensions.get('window'),\n      layoutWidth = _Dimensions$get.width;\n\n  return center + tooltipWidth > layoutWidth;\n};\n\nvar overflowBottom = function overflowBottom(childrenY, childrenHeight, tooltipHeight) {\n  var _Dimensions$get2 = Dimensions.get('window'),\n      layoutHeight = _Dimensions$get2.height;\n\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\n\nvar getTooltipXPosition = function getTooltipXPosition(_ref, _ref2) {\n  var childrenX = _ref.pageX,\n      childrenWidth = _ref.width;\n  var tooltipWidth = _ref2.width;\n  var center = childrenX + (childrenWidth - tooltipWidth) / 2;\n  if (overflowLeft(center)) return childrenX;\n  if (overflowRight(center, tooltipWidth)) return childrenX + childrenWidth - tooltipWidth;\n  return center;\n};\n\nvar getTooltipYPosition = function getTooltipYPosition(_ref3, _ref4) {\n  var childrenY = _ref3.pageY,\n      childrenHeight = _ref3.height;\n  var tooltipHeight = _ref4.height;\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight)) return childrenY - tooltipHeight;\n  return childrenY + childrenHeight;\n};\n\nexport var getTooltipPosition = function getTooltipPosition(_ref5) {\n  var children = _ref5.children,\n      tooltip = _ref5.tooltip,\n      measured = _ref5.measured;\n  if (!measured) return {};\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip)\n  };\n};","map":{"version":3,"mappings":";;AAqBA,IAAMA,YAAY,GAAIC,SAAhBD,YAAgBC,OAAc,EAAc;EAChD,OAAOA,MAAM,GAAG,CAAhB;AACD,CAFD;;AAQA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACD,MAAD,EAAiBE,YAAjB,EAAmD;EACvE,sBAA+BC,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAA/B;EAAA,IAAeE,WAAf,mBAAQC,KAAR;;EAEA,OAAON,MAAM,GAAGE,YAATF,GAAwBK,WAA/B;AACD,CAJD;;AAUA,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CACrBC,SADqB,EAErBC,cAFqB,EAGrBC,aAHqB,EAIT;EACZ,uBAAiCP,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAjC;EAAA,IAAgBQ,YAAhB,oBAAQC,MAAR;;EAEA,OAAOJ,SAAS,GAAGC,cAAZD,GAA6BE,aAA7BF,GAA6CG,YAApD;AACD,CARD;;AAUA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,cAGf;EAAA,IAFFC,SAEE,GAFoDC,IAEpD,CAFTC,KAES;EAAA,IAFgBC,aAEhB,GAFoDF,IAEpD,CAFST,KAET;EAFoD,IACtDJ,YADsD,GACzBgB,KADyB,CAC7DZ,KAD6D;EAG/D,IAAMN,MAAM,GAAGc,SAAS,GAAG,CAACG,aAAa,GAAGf,YAAjB,IAAiC,CAA5D;EAEA,IAAIH,YAAY,CAACC,MAAD,CAAhB,EAA0B,OAAOc,SAAP;EAE1B,IAAIb,aAAa,CAACD,MAAD,EAASE,YAAT,CAAjB,EACE,OAAOY,SAAS,GAAGG,aAAZH,GAA4BZ,YAAnC;EAEF,OAAOF,MAAP;AACD,CAZD;;AAcA,IAAMmB,mBAAmB,GAAG,SAAtBA,mBAAsB,eAGf;EAAA,IAFFX,SAEE,GAFsDY,KAEtD,CAFTC,KAES;EAAA,IAFiBZ,cAEjB,GAFsDW,KAEtD,CAFSR,MAET;EAFsD,IACvDF,aADuD,GACzBY,KADyB,CAC/DV,MAD+D;EAGjE,IAAIL,cAAc,CAACC,SAAD,EAAYC,cAAZ,EAA4BC,aAA5B,CAAlB,EACE,OAAOF,SAAS,GAAGE,aAAnB;EAEF,OAAOF,SAAS,GAAGC,cAAnB;AACD,CARD;;AAUA,OAAO,IAAMc,kBAAkB,GAAG,SAArBA,kBAAqB,QAIqB;EAAA,IAHrDC,QAGqD,GAAzCC,KAAyC,CAHrDD,QAGqD;EAAA,IAFrDE,OAEqD,GAAzCD,KAAyC,CAFrDC,OAEqD;EAAA,IADrDC,QACqD,GAAzCF,KAAyC,CADrDE,QACqD;EACrD,IAAI,CAACA,QAAL,EAAe,OAAO,EAAP;EAEf,OAAO;IACLC,IAAI,EAAEf,mBAAmB,CAACW,QAAD,EAAWE,OAAX,CADpB;IAELG,GAAG,EAAEV,mBAAmB,CAACK,QAAD,EAAWE,OAAX;EAFnB,CAAP;AAID,CAXM","names":["overflowLeft","center","overflowRight","tooltipWidth","Dimensions","get","layoutWidth","width","overflowBottom","childrenY","childrenHeight","tooltipHeight","layoutHeight","height","getTooltipXPosition","childrenX","_ref","pageX","childrenWidth","_ref2","getTooltipYPosition","_ref3","pageY","_ref4","getTooltipPosition","children","_ref5","tooltip","measured","left","top"],"sources":["utils.ts"],"sourcesContent":["import { Dimensions, LayoutRectangle } from 'react-native';\n\ntype ChildrenMeasurement = {\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n};\n\ntype TooltipLayout = LayoutRectangle;\n\nexport type Measurement = {\n  children: ChildrenMeasurement;\n  tooltip: TooltipLayout;\n  measured: boolean;\n};\n\n/**\n * Return true when the tooltip center x-coordinate relative to the wrapped element is negative.\n * The tooltip will be placed at the starting x-coordinate from the wrapped element.\n */\nconst overflowLeft = (center: number): boolean => {\n  return center < 0;\n};\n\n/**\n * Return true when the tooltip center x-coordinate + tooltip width is greater than the layout width\n * The tooltip width will grow from right to left relative to the wrapped element.\n */\nconst overflowRight = (center: number, tooltipWidth: number): boolean => {\n  const { width: layoutWidth } = Dimensions.get('window');\n\n  return center + tooltipWidth > layoutWidth;\n};\n\n/**\n * Return true when the children y-coordinate + its height + tooltip height is greater than the layout height.\n * The tooltip will be placed at the top of the wrapped element.\n */\nconst overflowBottom = (\n  childrenY: number,\n  childrenHeight: number,\n  tooltipHeight: number\n): boolean => {\n  const { height: layoutHeight } = Dimensions.get('window');\n\n  return childrenY + childrenHeight + tooltipHeight > layoutHeight;\n};\n\nconst getTooltipXPosition = (\n  { pageX: childrenX, width: childrenWidth }: ChildrenMeasurement,\n  { width: tooltipWidth }: TooltipLayout\n): number => {\n  const center = childrenX + (childrenWidth - tooltipWidth) / 2;\n\n  if (overflowLeft(center)) return childrenX;\n\n  if (overflowRight(center, tooltipWidth))\n    return childrenX + childrenWidth - tooltipWidth;\n\n  return center;\n};\n\nconst getTooltipYPosition = (\n  { pageY: childrenY, height: childrenHeight }: ChildrenMeasurement,\n  { height: tooltipHeight }: TooltipLayout\n): number => {\n  if (overflowBottom(childrenY, childrenHeight, tooltipHeight))\n    return childrenY - tooltipHeight;\n\n  return childrenY + childrenHeight;\n};\n\nexport const getTooltipPosition = ({\n  children,\n  tooltip,\n  measured,\n}: Measurement): {} | { left: number; top: number } => {\n  if (!measured) return {};\n\n  return {\n    left: getTooltipXPosition(children, tooltip),\n    top: getTooltipYPosition(children, tooltip),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}