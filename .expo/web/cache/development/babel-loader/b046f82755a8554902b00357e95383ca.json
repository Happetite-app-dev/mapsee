{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\"],\n    _excluded2 = [\"elevation\", \"children\", \"theme\", \"style\", \"testID\"],\n    _excluded3 = [\"position\", \"alignSelf\", \"top\", \"left\", \"right\", \"bottom\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../core/theming\";\nimport overlay, { isAnimatedValue } from \"../styles/overlay\";\nimport shadow from \"../styles/shadow\";\nvar MD2Surface = React.forwardRef(function (_ref, ref) {\n  var style = _ref.style,\n      overrideTheme = _ref.theme,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _ref3 = StyleSheet.flatten(style) || {},\n      _ref3$elevation = _ref3.elevation,\n      elevation = _ref3$elevation === void 0 ? 4 : _ref3$elevation;\n\n  var _useInternalTheme = useInternalTheme(overrideTheme),\n      isDarkTheme = _useInternalTheme.dark,\n      mode = _useInternalTheme.mode,\n      colors = _useInternalTheme.colors;\n\n  return React.createElement(Animated.View, _extends({\n    ref: ref\n  }, rest, {\n    style: [{\n      backgroundColor: isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors === null || colors === void 0 ? void 0 : colors.surface) : colors === null || colors === void 0 ? void 0 : colors.surface\n    }, elevation ? shadow(elevation) : null, style]\n  }));\n});\nvar Surface = React.forwardRef(function (_ref2, ref) {\n  var _ref2$elevation = _ref2.elevation,\n      elevation = _ref2$elevation === void 0 ? 1 : _ref2$elevation,\n      children = _ref2.children,\n      overridenTheme = _ref2.theme,\n      style = _ref2.style,\n      testID = _ref2.testID,\n      props = _objectWithoutProperties(_ref2, _excluded2);\n\n  var theme = useInternalTheme(overridenTheme);\n  if (!theme.isV3) return React.createElement(MD2Surface, _extends({}, props, {\n    theme: theme,\n    style: style,\n    ref: ref\n  }), children);\n  var colors = theme.colors;\n  var inputRange = [0, 1, 2, 3, 4, 5];\n\n  var backgroundColor = function () {\n    var _colors$elevation2;\n\n    if (isAnimatedValue(elevation)) {\n      return elevation.interpolate({\n        inputRange: inputRange,\n        outputRange: inputRange.map(function (elevation) {\n          var _colors$elevation;\n\n          return (_colors$elevation = colors.elevation) === null || _colors$elevation === void 0 ? void 0 : _colors$elevation[\"level\" + elevation];\n        })\n      });\n    }\n\n    return (_colors$elevation2 = colors.elevation) === null || _colors$elevation2 === void 0 ? void 0 : _colors$elevation2[\"level\" + elevation];\n  }();\n\n  if (Platform.OS === 'web') {\n    return React.createElement(Animated.View, _extends({}, props, {\n      ref: ref,\n      testID: testID,\n      style: [{\n        backgroundColor: backgroundColor\n      }, elevation ? shadow(elevation, theme.isV3) : null, style]\n    }), children);\n  }\n\n  if (Platform.OS === 'android') {\n    var elevationLevel = [0, 3, 6, 9, 12, 15];\n\n    var getElevationAndroid = function getElevationAndroid() {\n      if (isAnimatedValue(elevation)) {\n        return elevation.interpolate({\n          inputRange: inputRange,\n          outputRange: elevationLevel\n        });\n      }\n\n      return elevationLevel[elevation];\n    };\n\n    var _ref4 = StyleSheet.flatten(style) || {},\n        margin = _ref4.margin,\n        padding = _ref4.padding,\n        transform = _ref4.transform,\n        borderRadius = _ref4.borderRadius;\n\n    var outerLayerStyles = {\n      margin: margin,\n      padding: padding,\n      transform: transform,\n      borderRadius: borderRadius\n    };\n    var _sharedStyle = [{\n      backgroundColor: backgroundColor\n    }, style];\n    return React.createElement(Animated.View, _extends({}, props, {\n      testID: testID,\n      ref: ref,\n      style: [{\n        backgroundColor: backgroundColor,\n        transform: transform\n      }, outerLayerStyles, _sharedStyle, {\n        elevation: getElevationAndroid()\n      }]\n    }), children);\n  }\n\n  var iOSShadowOutputRanges = [{\n    shadowOpacity: 0.15,\n    height: [0, 1, 2, 4, 6, 8],\n    shadowRadius: [0, 3, 6, 8, 10, 12]\n  }, {\n    shadowOpacity: 0.3,\n    height: [0, 1, 1, 1, 2, 4],\n    shadowRadius: [0, 1, 2, 3, 3, 4]\n  }];\n  var shadowColor = '#000';\n\n  var _ref5 = StyleSheet.flatten(style) || {},\n      position = _ref5.position,\n      alignSelf = _ref5.alignSelf,\n      top = _ref5.top,\n      left = _ref5.left,\n      right = _ref5.right,\n      bottom = _ref5.bottom,\n      restStyle = _objectWithoutProperties(_ref5, _excluded3);\n\n  var absoluteStyles = {\n    position: position,\n    alignSelf: alignSelf,\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  var sharedStyle = [{\n    backgroundColor: backgroundColor\n  }, restStyle];\n\n  if (isAnimatedValue(elevation)) {\n    var _inputRange = [0, 1, 2, 3, 4, 5];\n\n    var getStyleForAnimatedShadowLayer = function getStyleForAnimatedShadowLayer(layer) {\n      return {\n        shadowColor: shadowColor,\n        shadowOpacity: elevation.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],\n          extrapolate: 'clamp'\n        }),\n        shadowOffset: {\n          width: 0,\n          height: elevation.interpolate({\n            inputRange: _inputRange,\n            outputRange: iOSShadowOutputRanges[layer].height\n          })\n        },\n        shadowRadius: elevation.interpolate({\n          inputRange: _inputRange,\n          outputRange: iOSShadowOutputRanges[layer].shadowRadius\n        })\n      };\n    };\n\n    return React.createElement(Animated.View, {\n      style: [getStyleForAnimatedShadowLayer(0), absoluteStyles]\n    }, React.createElement(Animated.View, {\n      style: getStyleForAnimatedShadowLayer(1)\n    }, React.createElement(Animated.View, _extends({}, props, {\n      testID: testID,\n      style: sharedStyle\n    }), children)));\n  }\n\n  var getStyleForShadowLayer = function getStyleForShadowLayer(layer) {\n    return {\n      shadowColor: shadowColor,\n      shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,\n      shadowOffset: {\n        width: 0,\n        height: iOSShadowOutputRanges[layer].height[elevation]\n      },\n      shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation]\n    };\n  };\n\n  return React.createElement(Animated.View, {\n    ref: ref,\n    style: [getStyleForShadowLayer(0), absoluteStyles]\n  }, React.createElement(Animated.View, {\n    style: getStyleForShadowLayer(1)\n  }, React.createElement(Animated.View, _extends({}, props, {\n    testID: testID,\n    style: sharedStyle\n  }), children)));\n});\nexport default Surface;","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","overlay","isAnimatedValue","shadow","MD2Surface","forwardRef","ref","style","_ref","overrideTheme","theme","rest","StyleSheet","flatten","elevation","isDarkTheme","dark","mode","colors","Animated","View","_extends","backgroundColor","surface","Surface","_ref2","children","overridenTheme","testID","props","isV3","inputRange","interpolate","outputRange","map","_colors$elevation","_colors$elevation2","Platform","OS","elevationLevel","getElevationAndroid","margin","padding","transform","borderRadius","outerLayerStyles","sharedStyle","iOSShadowOutputRanges","shadowOpacity","height","shadowRadius","shadowColor","position","alignSelf","top","left","right","bottom","restStyle","absoluteStyles","getStyleForAnimatedShadowLayer","layer","extrapolate","shadowOffset","width","getStyleForShadowLayer"],"sources":["Surface.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../core/theming';\nimport overlay, { isAnimatedValue } from '../styles/overlay';\nimport shadow from '../styles/shadow';\nimport type { InternalTheme, MD3Elevation } from '../types';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Changes shadows and background on iOS and Android.\n   * Used to create UI hierarchy between components.\n   *\n   * Note: In version 2 the `elevation` prop was accepted via `style` prop i.e. `style={{ elevation: 4 }}`.\n   * It's no longer supported with theme version 3 and you should use `elevation` property instead.\n   */\n  elevation?: 0 | 1 | 2 | 3 | 4 | 5 | Animated.Value;\n  /**\n   * @optional\n   */\n  theme?: InternalTheme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  ref?: React.RefObject<View>;\n};\n\nconst MD2Surface = React.forwardRef<View, Props>(\n  ({ style, theme: overrideTheme, ...rest }: Omit<Props, 'elevation'>, ref) => {\n    const { elevation = 4 } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n    const { dark: isDarkTheme, mode, colors } = useInternalTheme(overrideTheme);\n\n    return (\n      <Animated.View\n        ref={ref}\n        {...rest}\n        style={[\n          {\n            backgroundColor:\n              isDarkTheme && mode === 'adaptive'\n                ? overlay(elevation, colors?.surface)\n                : colors?.surface,\n          },\n          elevation ? shadow(elevation) : null,\n          style,\n        ]}\n      />\n    );\n  }\n);\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark InternalTheme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-android.png\" />\n *     <figcaption>Surface on Android</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/surface-ios.png\" />\n *     <figcaption>Surface on iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface} elevation={4}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *   },\n * });\n * ```\n */\nconst Surface = React.forwardRef<View, Props>(\n  (\n    {\n      elevation = 1,\n      children,\n      theme: overridenTheme,\n      style,\n      testID,\n      ...props\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme(overridenTheme);\n\n    if (!theme.isV3)\n      return (\n        <MD2Surface {...props} theme={theme} style={style} ref={ref}>\n          {children}\n        </MD2Surface>\n      );\n\n    const { colors } = theme;\n\n    const inputRange = [0, 1, 2, 3, 4, 5];\n\n    const backgroundColor = (() => {\n      if (isAnimatedValue(elevation)) {\n        return elevation.interpolate({\n          inputRange,\n          outputRange: inputRange.map((elevation) => {\n            return colors.elevation?.[`level${elevation as MD3Elevation}`];\n          }),\n        });\n      }\n\n      return colors.elevation?.[`level${elevation}`];\n    })();\n\n    if (Platform.OS === 'web') {\n      return (\n        <Animated.View\n          {...props}\n          ref={ref}\n          testID={testID}\n          style={[\n            { backgroundColor },\n            elevation ? shadow(elevation, theme.isV3) : null,\n            style,\n          ]}\n        >\n          {children}\n        </Animated.View>\n      );\n    }\n\n    if (Platform.OS === 'android') {\n      const elevationLevel = [0, 3, 6, 9, 12, 15];\n\n      const getElevationAndroid = () => {\n        if (isAnimatedValue(elevation)) {\n          return elevation.interpolate({\n            inputRange,\n            outputRange: elevationLevel,\n          });\n        }\n\n        return elevationLevel[elevation];\n      };\n\n      const { margin, padding, transform, borderRadius } = (StyleSheet.flatten(\n        style\n      ) || {}) as ViewStyle;\n\n      const outerLayerStyles = { margin, padding, transform, borderRadius };\n      const sharedStyle = [{ backgroundColor }, style];\n\n      return (\n        <Animated.View\n          {...props}\n          testID={testID}\n          ref={ref}\n          style={[\n            {\n              backgroundColor,\n              transform,\n            },\n            outerLayerStyles,\n            sharedStyle,\n            {\n              elevation: getElevationAndroid(),\n            },\n          ]}\n        >\n          {children}\n        </Animated.View>\n      );\n    }\n\n    const iOSShadowOutputRanges = [\n      {\n        shadowOpacity: 0.15,\n        height: [0, 1, 2, 4, 6, 8],\n        shadowRadius: [0, 3, 6, 8, 10, 12],\n      },\n      {\n        shadowOpacity: 0.3,\n        height: [0, 1, 1, 1, 2, 4],\n        shadowRadius: [0, 1, 2, 3, 3, 4],\n      },\n    ];\n\n    const shadowColor = '#000';\n\n    const { position, alignSelf, top, left, right, bottom, ...restStyle } =\n      (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n    const absoluteStyles = { position, alignSelf, top, right, bottom, left };\n    const sharedStyle = [{ backgroundColor }, restStyle];\n\n    if (isAnimatedValue(elevation)) {\n      const inputRange = [0, 1, 2, 3, 4, 5];\n\n      const getStyleForAnimatedShadowLayer = (layer: 0 | 1) => {\n        return {\n          shadowColor,\n          shadowOpacity: elevation.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],\n            extrapolate: 'clamp',\n          }),\n          shadowOffset: {\n            width: 0,\n            height: elevation.interpolate({\n              inputRange,\n              outputRange: iOSShadowOutputRanges[layer].height,\n            }),\n          },\n          shadowRadius: elevation.interpolate({\n            inputRange,\n            outputRange: iOSShadowOutputRanges[layer].shadowRadius,\n          }),\n        };\n      };\n\n      return (\n        <Animated.View\n          style={[getStyleForAnimatedShadowLayer(0), absoluteStyles]}\n        >\n          <Animated.View style={getStyleForAnimatedShadowLayer(1)}>\n            <Animated.View {...props} testID={testID} style={sharedStyle}>\n              {children}\n            </Animated.View>\n          </Animated.View>\n        </Animated.View>\n      );\n    }\n\n    const getStyleForShadowLayer = (layer: 0 | 1) => {\n      return {\n        shadowColor,\n        shadowOpacity: elevation\n          ? iOSShadowOutputRanges[layer].shadowOpacity\n          : 0,\n        shadowOffset: {\n          width: 0,\n          height: iOSShadowOutputRanges[layer].height[elevation],\n        },\n        shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation],\n      };\n    };\n\n    return (\n      <Animated.View\n        ref={ref}\n        style={[getStyleForShadowLayer(0), absoluteStyles]}\n      >\n        <Animated.View style={getStyleForShadowLayer(1)}>\n          <Animated.View {...props} testID={testID} style={sharedStyle}>\n            {children}\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n    );\n  }\n);\n\nexport default Surface;\n"]},"metadata":{},"sourceType":"module"}