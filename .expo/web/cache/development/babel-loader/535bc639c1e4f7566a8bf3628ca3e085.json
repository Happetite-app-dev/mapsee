{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { ref, onValue, set, remove } from \"firebase/database\";\nimport { useEffect, useState, useContext } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { useQueryClient } from \"react-query\";\nimport AddFolder from \"../assets/icons/addfolder.svg\";\nimport { useUserQuery, useAllRecordQuery, useAllFolderQuery } from \"../queries\";\nimport SearchData from \"../assets/icons/searchData.svg\";\nimport AppContext from \"../components/AppContext\";\nimport { PopUpType4 } from \"../components/PopUp\";\nimport RecordFlatList from \"../components/StorageScreen/RecordFlatList\";\nimport SnackBar from \"../components/SnackBar\";\nimport FolderList from \"../components/StorageScreen/FolderList\";\nimport { database } from \"../firebase\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = database;\n\nvar exitFolder = function () {\n  var _ref2 = _asyncToGenerator(function* (_ref) {\n    var myUID = _ref.myUID,\n        folderID = _ref.folderID,\n        navigation = _ref.navigation;\n    yield exitData(myUID, folderID).then(function () {\n      return navigation.navigate(\"Storage\");\n    });\n  });\n\n  return function exitFolder(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar exitData = function () {\n  var _ref3 = _asyncToGenerator(function* (myUID, folderID) {\n    var reference1 = ref(db, \"/users/\" + myUID + \"/folderIDs/\" + folderID);\n    yield remove(reference1).then(function () {\n      var reference2 = ref(db, \"/folders/\" + folderID + \"/userIDs/\" + myUID);\n      remove(reference2);\n    }).then(function () {\n      var reference3 = ref(db, \"/folders/\" + folderID + \"/folderName/\" + myUID);\n      remove(reference3);\n    }).then(function () {\n      var reference4 = ref(db, \"/folders/\" + folderID + \"/folderColor/\" + myUID);\n      remove(reference4);\n    }).then(onValue(ref(db, \"/folders/\" + folderID + \"/userIDs\"), function (snapshot) {\n      if (!snapshot.hasChildren()) {\n        var reference3 = ref(db, \"/folders/\" + folderID);\n        remove(reference3);\n      }\n    }));\n  });\n\n  return function exitData(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar gotoMakeFolderBottomSheetScreen = function gotoMakeFolderBottomSheetScreen(_ref4) {\n  var navigation = _ref4.navigation,\n      folderID = _ref4.folderID,\n      folderName = _ref4.folderName,\n      folderColor = _ref4.folderColor,\n      folderUserIDs = _ref4.folderUserIDs,\n      recordDataSource = _ref4.recordDataSource;\n  navigation.navigate(\"MakeFolderBottomSheetScreen\", {\n    folderID: folderID,\n    folderName: folderName,\n    folderColor: folderColor,\n    folderUserIDs: folderUserIDs,\n    recordDataSource: recordDataSource\n  });\n};\n\nvar gotoSingleFolderScreen = function gotoSingleFolderScreen(_ref5) {\n  var navigation = _ref5.navigation,\n      recordDataSource = _ref5.recordDataSource,\n      folderID = _ref5.folderID,\n      folderName = _ref5.folderName,\n      folderColor = _ref5.folderColor,\n      folderUserIDs = _ref5.folderUserIDs,\n      setSelectedFolderIDNameColorUserIDs = _ref5.setSelectedFolderIDNameColorUserIDs;\n  setSelectedFolderIDNameColorUserIDs(undefined);\n  navigation.navigate(\"SingleFolderScreen\", {\n    recordDataSource: recordDataSource,\n    folderID: folderID,\n    folderName: folderName,\n    folderColor: folderColor,\n    folderUserIDs: folderUserIDs\n  });\n};\n\nvar filterFunction = function filterFunction(_ref6) {\n  var navigation = _ref6.navigation,\n      allRecordQuery = _ref6.allRecordQuery,\n      setSelectedFolderIDNameColorUserIDs = _ref6.setSelectedFolderIDNameColorUserIDs,\n      _ref6$selectedFolderI = _ref6.selectedFolderIDNameColorUserIDs,\n      folderID = _ref6$selectedFolderI.folderID,\n      folderName = _ref6$selectedFolderI.folderName,\n      folderColor = _ref6$selectedFolderI.folderColor,\n      folderUserIDs = _ref6$selectedFolderI.folderUserIDs;\n  var filteredDataSource = Object.values(allRecordQuery).filter(function (item) {\n    return item.recordData.folderID === folderID;\n  });\n  gotoSingleFolderScreen({\n    navigation: navigation,\n    recordDataSource: filteredDataSource,\n    folderID: folderID,\n    folderName: folderName,\n    folderColor: folderColor,\n    folderUserIDs: folderUserIDs,\n    setSelectedFolderIDNameColorUserIDs: setSelectedFolderIDNameColorUserIDs\n  });\n};\n\nvar StorageScreen = function StorageScreen(_ref7) {\n  var _userQuery$data2, _userQuery$data3;\n\n  var navigation = _ref7.navigation,\n      route = _ref7.route;\n  var myContext = useContext(AppContext);\n  var myUID = myContext.myUID;\n  var userQuery = useUserQuery(myUID);\n  var allRecordQuery = useAllRecordQuery();\n  var queryClient = useQueryClient();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  var onToggleSnackBar = function onToggleSnackBar() {\n    return setVisible(!visible);\n  };\n\n  var onDismissSnackBar = function onDismissSnackBar() {\n    return setVisible(false);\n  };\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedFolderIDNameColorUserIDs = _useState4[0],\n      setSelectedFolderIDNameColorUserIDs = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modalVisible = _useState6[0],\n      setModalVisible = _useState6[1];\n\n  var _useState7 = useState({\n    folderID: undefined,\n    folderName: undefined,\n    folderColor: undefined,\n    folderUserIDs: [],\n    folderFixedDate: undefined\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      longPressedFolder = _useState8[0],\n      setLongPressedFolder = _useState8[1];\n\n  useEffect(function () {\n    if (selectedFolderIDNameColorUserIDs !== undefined) {\n      filterFunction({\n        navigation: navigation,\n        allRecordQuery: allRecordQuery,\n        setSelectedFolderIDNameColorUserIDs: setSelectedFolderIDNameColorUserIDs,\n        selectedFolderIDNameColorUserIDs: selectedFolderIDNameColorUserIDs\n      });\n    }\n  }, [selectedFolderIDNameColorUserIDs]);\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.screenTitleView,\n      children: [_jsx(Text, {\n        style: styles.screenTitle,\n        children: \"\\uBCF4\\uAD00\\uD568\"\n      }), _jsxs(View, {\n        style: styles.twoRightButtons,\n        children: [_jsx(TouchableOpacity, {\n          style: styles.firstButton,\n          onPress: function onPress() {\n            var _userQuery$data;\n\n            if (((_userQuery$data = userQuery.data) == null ? void 0 : _userQuery$data.folderIDs.length) >= 16) onToggleSnackBar();else {\n              gotoMakeFolderBottomSheetScreen({\n                navigation: navigation,\n                folderID: \"\",\n                folderName: null,\n                folderColor: null,\n                recordDataSource: {},\n                folderUserIDs: null\n              });\n            }\n          },\n          children: _jsx(AddFolder, {})\n        }), _jsx(TouchableOpacity, {\n          style: styles.secondButton,\n          children: _jsx(SearchData, {})\n        })]\n      })]\n    }), _jsx(View, {\n      style: {\n        height: 85\n      },\n      children: _jsx(FolderList, {\n        folderIDs: (_userQuery$data2 = userQuery.data) != null && _userQuery$data2.folderIDs ? Object.keys((_userQuery$data3 = userQuery.data) == null ? void 0 : _userQuery$data3.folderIDs) : [],\n        setSelectedFolderIDNameColorUserIDs: setSelectedFolderIDNameColorUserIDs,\n        setLongPressedFolder: setLongPressedFolder,\n        setModalVisible: setModalVisible\n      })\n    }), _jsx(RecordFlatList, {\n      recordList: allRecordQuery.data ? Object.values(allRecordQuery.data).filter(function (record) {\n        var _userQuery$data4;\n\n        return record.folderID in ((_userQuery$data4 = userQuery.data) == null ? void 0 : _userQuery$data4.folderIDs);\n      }) : [],\n      stackNavigation: navigation\n    }), _jsx(PopUpType4, {\n      modalVisible: modalVisible,\n      modalHandler: setModalVisible,\n      action1: function action1() {\n        if (longPressedFolder.folderFixedDate === undefined) {\n          var referenceFix = ref(db, \"/folders/\" + longPressedFolder.folderID + \"/fixedDate/\" + myUID);\n          var now = new Date();\n          set(referenceFix, now.toString());\n          queryClient.invalidateQueries([\"folders\", longPressedFolder.folderID]);\n          queryClient.invalidateQueries([\"all-Folders\"]);\n        } else {\n          var _referenceFix = ref(db, \"/folders/\" + longPressedFolder.folderID + \"/fixedDate/\" + myUID);\n\n          remove(_referenceFix);\n        }\n\n        queryClient.invalidateQueries([\"folders\", longPressedFolder.folderID]);\n        queryClient.invalidateQueries([\"all-Folders\"]);\n      },\n      action2: function action2() {\n        gotoMakeFolderBottomSheetScreen({\n          navigation: navigation,\n          folderID: longPressedFolder.folderID,\n          folderName: longPressedFolder.folderName,\n          folderColor: longPressedFolder.folderColor,\n          folderUserIDs: longPressedFolder.folderUserIDs,\n          recordDataSource: {}\n        });\n      },\n      action3: function action3() {\n        exitFolder({\n          myUID: myUID,\n          folderID: longPressedFolder.folderID,\n          navigation: navigation\n        });\n      },\n      askValue: longPressedFolder.folderName,\n      actionValue1: longPressedFolder.folderFixedDate === undefined ? \"좌측 폴더 고정\" : \"좌측 폴더 해제\",\n      actionValue2: \"\\uD3F4\\uB354 \\uD3B8\\uC9D1\",\n      actionValue3: \"\\uB098\\uAC00\\uAE30\"\n    }), _jsx(SnackBar, {\n      visible: visible,\n      onDismissSnackBar: onDismissSnackBar,\n      text: \"\\uCD5C\\uB300 16\\uAC1C\\uAE4C\\uC9C0 \\uD3F4\\uB354\\uB97C \\uB9CC\\uB4E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"\n    })]\n  });\n};\n\nexport default StorageScreen;\nvar styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    height: \"89.5%\",\n    backgroundColor: \"white\"\n  },\n  screenTitle: {\n    fontWeight: \"bold\",\n    fontSize: 16,\n    left: 23\n  },\n  screenTitleView: {\n    flexDirection: \"row\",\n    height: 56,\n    marginBottom: 20,\n    alignItems: \"center\"\n  },\n  item: {\n    flex: 0.5,\n    borderColor: \"grey\",\n    borderRadius: 8,\n    borderWidth: 1,\n    padding: 0,\n    height: 224,\n    maxWidth: 160,\n    marginVertical: 8,\n    marginHorizontal: 12\n  },\n  title: {\n    fontSize: 16\n  },\n  twoRightButtons: {\n    position: \"absolute\",\n    right: 0,\n    width: 86,\n    height: 30,\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  firstButton: {\n    width: 30,\n    height: 30\n  },\n  secondButton: {\n    width: 30,\n    height: 30,\n    left: 10\n  }\n});","map":{"version":3,"names":["ref","onValue","set","remove","useEffect","useState","useContext","useQueryClient","AddFolder","useUserQuery","useAllRecordQuery","useAllFolderQuery","SearchData","AppContext","PopUpType4","RecordFlatList","SnackBar","FolderList","database","db","exitFolder","myUID","folderID","navigation","exitData","then","navigate","reference1","reference2","reference3","reference4","snapshot","hasChildren","gotoMakeFolderBottomSheetScreen","folderName","folderColor","folderUserIDs","recordDataSource","gotoSingleFolderScreen","setSelectedFolderIDNameColorUserIDs","undefined","filterFunction","allRecordQuery","selectedFolderIDNameColorUserIDs","filteredDataSource","Object","values","filter","item","recordData","StorageScreen","route","myContext","userQuery","queryClient","visible","setVisible","onToggleSnackBar","onDismissSnackBar","modalVisible","setModalVisible","folderFixedDate","longPressedFolder","setLongPressedFolder","styles","container","screenTitleView","screenTitle","twoRightButtons","firstButton","data","folderIDs","length","secondButton","height","keys","record","referenceFix","now","Date","toString","invalidateQueries","StyleSheet","create","width","backgroundColor","fontWeight","fontSize","left","flexDirection","marginBottom","alignItems","flex","borderColor","borderRadius","borderWidth","padding","maxWidth","marginVertical","marginHorizontal","title","position","right"],"sources":["/Users/jeongin/mapsee_2/screens/StorageScreen.js"],"sourcesContent":["import { ref, onValue, set, remove } from \"firebase/database\";\nimport { useEffect, useState, useContext } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  SafeAreaView,\n} from \"react-native\";\nimport { useQueryClient } from \"react-query\";\n\nimport AddFolder from \"../assets/icons/addfolder.svg\";\nimport { useUserQuery, useAllRecordQuery, useAllFolderQuery } from \"../queries\";\n\nimport SearchData from \"../assets/icons/searchData.svg\";\nimport AppContext from \"../components/AppContext\";\nimport { PopUpType4 } from \"../components/PopUp\";\nimport RecordFlatList from \"../components/StorageScreen/RecordFlatList\";\nimport SnackBar from \"../components/SnackBar\";\nimport FolderList from \"../components/StorageScreen/FolderList\";\nimport { database } from \"../firebase\";\nconst db = database;\n\nconst exitFolder = async ({ myUID, folderID, navigation }) => {\n  await exitData(myUID, folderID).then(\n    () => navigation.navigate(\"Storage\") //realtimeDataBase가 모두 업데이트 된후\n  );\n};\n\nconst exitData = async (myUID, folderID) => {\n  const reference1 = ref(db, \"/users/\" + myUID + \"/folderIDs/\" + folderID);\n  await remove(reference1)\n    .then(() => {\n      const reference2 = ref(db, \"/folders/\" + folderID + \"/userIDs/\" + myUID);\n      remove(reference2);\n    })\n    .then(() => {\n      const reference3 = ref(\n        db,\n        \"/folders/\" + folderID + \"/folderName/\" + myUID\n      );\n      remove(reference3);\n    })\n    .then(() => {\n      const reference4 = ref(\n        db,\n        \"/folders/\" + folderID + \"/folderColor/\" + myUID\n      );\n      remove(reference4);\n    })\n    .then(\n      //지울 필요가 없음\n      onValue(ref(db, \"/folders/\" + folderID + \"/userIDs\"), (snapshot) => {\n        if (!snapshot.hasChildren()) {\n          const reference3 = ref(db, \"/folders/\" + folderID);\n          remove(reference3);\n        }\n      })\n    );\n};\nconst gotoMakeFolderBottomSheetScreen = ({\n  navigation,\n  folderID,\n  folderName,\n  folderColor,\n  folderUserIDs,\n  recordDataSource,\n}) => {\n  navigation.navigate(\"MakeFolderBottomSheetScreen\", {\n    folderID,\n    folderName,\n    folderColor,\n    folderUserIDs,\n    recordDataSource,\n  });\n};\nconst gotoSingleFolderScreen = ({\n  navigation,\n  recordDataSource,\n  folderID,\n  folderName,\n  folderColor,\n  folderUserIDs,\n  setSelectedFolderIDNameColorUserIDs,\n}) => {\n  setSelectedFolderIDNameColorUserIDs(undefined);\n  navigation.navigate(\"SingleFolderScreen\", {\n    recordDataSource,\n    folderID,\n    folderName,\n    folderColor,\n    folderUserIDs,\n  });\n};\nconst filterFunction = ({\n  navigation,\n  allRecordQuery,\n  setSelectedFolderIDNameColorUserIDs,\n  selectedFolderIDNameColorUserIDs: {\n    folderID,\n    folderName,\n    folderColor,\n    folderUserIDs,\n  },\n}) => {\n  // Filter the masterDataSource and update FilteredDataSource\n  const filteredDataSource = Object.values(allRecordQuery).filter(function (\n    item\n  ) {\n    // Applying filter for the inserted text in search bar\n    return item.recordData.folderID === folderID;\n  });\n  gotoSingleFolderScreen({\n    navigation,\n    recordDataSource: filteredDataSource,\n    folderID,\n    folderName,\n    folderColor,\n    folderUserIDs,\n    setSelectedFolderIDNameColorUserIDs,\n  });\n};\n\nconst StorageScreen = ({ navigation, route }) => {\n  const myContext = useContext(AppContext);\n  const myUID = myContext.myUID;\n  const userQuery = useUserQuery(myUID);\n  const allRecordQuery = useAllRecordQuery();\n  const queryClient = useQueryClient();\n\n  const [visible, setVisible] = useState(false); // Snackbar\n  const onToggleSnackBar = () => setVisible(!visible); // SnackbarButton -> 나중에는 없애기\n  const onDismissSnackBar = () => setVisible(false); // Snackbar\n\n  const [\n    selectedFolderIDNameColorUserIDs,\n    setSelectedFolderIDNameColorUserIDs,\n  ] = useState(undefined);\n\n  const [modalVisible, setModalVisible] = useState(false);\n  const [longPressedFolder, setLongPressedFolder] = useState({\n    folderID: undefined,\n    folderName: undefined,\n    folderColor: undefined,\n    folderUserIDs: [],\n    folderFixedDate: undefined,\n  });\n\n  useEffect(() => {\n    if (selectedFolderIDNameColorUserIDs !== undefined) {\n      filterFunction({\n        navigation,\n        allRecordQuery,\n        setSelectedFolderIDNameColorUserIDs,\n        selectedFolderIDNameColorUserIDs,\n      });\n    }\n  }, [selectedFolderIDNameColorUserIDs]);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.screenTitleView}>\n        <Text style={styles.screenTitle}>보관함</Text>\n        <View style={styles.twoRightButtons}>\n          <TouchableOpacity\n            style={styles.firstButton}\n            onPress={() => {\n              if (userQuery.data?.folderIDs.length >= 16) onToggleSnackBar();\n              else {\n                gotoMakeFolderBottomSheetScreen({\n                  navigation,\n                  folderID: \"\",\n                  folderName: null,\n                  folderColor: null,\n                  recordDataSource: {},\n                  folderUserIDs: null,\n                });\n              }\n            }}\n          >\n            <AddFolder />\n          </TouchableOpacity>\n          <TouchableOpacity style={styles.secondButton}>\n            <SearchData />\n          </TouchableOpacity>\n        </View>\n      </View>\n      <View style={{ height: 85 }}>\n        <FolderList\n          folderIDs={\n            userQuery.data?.folderIDs\n              ? Object.keys(userQuery.data?.folderIDs)\n              : []\n          }\n          setSelectedFolderIDNameColorUserIDs={\n            setSelectedFolderIDNameColorUserIDs\n          }\n          setLongPressedFolder={setLongPressedFolder}\n          setModalVisible={setModalVisible}\n        />\n      </View>\n\n      <RecordFlatList\n        recordList={\n          allRecordQuery.data\n            ? Object.values(allRecordQuery.data).filter((record) => {\n                return record.folderID in userQuery.data?.folderIDs;\n              })\n            : []\n        }\n        stackNavigation={navigation}\n      />\n      <PopUpType4\n        modalVisible={modalVisible}\n        modalHandler={setModalVisible}\n        action1={() => {\n          if (longPressedFolder.folderFixedDate === undefined) {\n            const referenceFix = ref(\n              db,\n              \"/folders/\" + longPressedFolder.folderID + \"/fixedDate/\" + myUID\n            );\n\n            const now = new Date();\n            set(referenceFix, now.toString());\n            queryClient.invalidateQueries([\n              \"folders\",\n              longPressedFolder.folderID,\n            ]);\n            queryClient.invalidateQueries([\"all-Folders\"]);\n          } else {\n            const referenceFix = ref(\n              db,\n              \"/folders/\" + longPressedFolder.folderID + \"/fixedDate/\" + myUID\n            );\n            remove(referenceFix);\n          }\n\n          queryClient.invalidateQueries([\n            \"folders\",\n            longPressedFolder.folderID,\n          ]);\n          queryClient.invalidateQueries([\"all-Folders\"]);\n        }}\n        action2={() => {\n          gotoMakeFolderBottomSheetScreen({\n            navigation,\n            folderID: longPressedFolder.folderID,\n            folderName: longPressedFolder.folderName,\n            folderColor: longPressedFolder.folderColor,\n            folderUserIDs: longPressedFolder.folderUserIDs,\n            recordDataSource: {},\n          });\n        }}\n        action3={() => {\n          exitFolder({\n            myUID,\n            folderID: longPressedFolder.folderID,\n            navigation,\n          });\n        }}\n        askValue={longPressedFolder.folderName}\n        actionValue1={\n          longPressedFolder.folderFixedDate === undefined\n            ? \"좌측 폴더 고정\"\n            : \"좌측 폴더 해제\"\n        }\n        actionValue2=\"폴더 편집\"\n        actionValue3=\"나가기\"\n      />\n\n      <SnackBar\n        visible={visible}\n        onDismissSnackBar={onDismissSnackBar}\n        text=\"최대 16개까지 폴더를 만들 수 있습니다.\"\n      />\n    </SafeAreaView>\n  );\n};\n\nexport default StorageScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    height: \"89.5%\",\n    backgroundColor: \"white\",\n  },\n  screenTitle: { fontWeight: \"bold\", fontSize: 16, left: 23 },\n  screenTitleView: {\n    flexDirection: \"row\",\n    height: 56,\n    marginBottom: 20,\n    alignItems: \"center\",\n  },\n  item: {\n    flex: 0.5,\n    borderColor: \"grey\",\n    borderRadius: 8,\n    borderWidth: 1,\n    padding: 0,\n    height: 224,\n    maxWidth: 160,\n    marginVertical: 8,\n    marginHorizontal: 12,\n  },\n  title: {\n    fontSize: 16,\n  },\n  twoRightButtons: {\n    position: \"absolute\",\n    right: 0,\n    width: 86,\n    height: 30,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  firstButton: {\n    width: 30,\n    height: 30,\n  },\n  secondButton: {\n    width: 30,\n    height: 30,\n    left: 10,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}