{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\", \"variant\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport { MD3TypescaleKey } from \"../../types\";\n\nfunction AnimatedText(_ref) {\n  var style = _ref.style,\n      theme = _ref.theme,\n      variant = _ref.variant,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    var stylesByVariant = Object.keys(MD3TypescaleKey).reduce(function (acc, key) {\n      var _theme$fonts$key = theme.fonts[key],\n          fontSize = _theme$fonts$key.fontSize,\n          fontWeight = _theme$fonts$key.fontWeight,\n          lineHeight = _theme$fonts$key.lineHeight,\n          letterSpacing = _theme$fonts$key.letterSpacing,\n          fontFamily = _theme$fonts$key.fontFamily;\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, {\n        fontFamily: fontFamily,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        lineHeight: lineHeight,\n        letterSpacing: letterSpacing,\n        color: theme.colors.onSurface\n      }));\n    }, {});\n    var styleForVariant = stylesByVariant[variant];\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [styleForVariant, styles.text, {\n        writingDirection: writingDirection\n      }, style]\n    }));\n  } else {\n    var font = !theme.isV3 ? theme.fonts.regular : theme.fonts.bodyMedium;\n\n    var textStyle = _objectSpread(_objectSpread({}, font), {}, {\n      color: theme.isV3 ? theme.colors.onSurface : theme.colors.text\n    });\n\n    return React.createElement(Animated.Text, _extends({}, rest, {\n      style: [styles.text, textStyle, {\n        writingDirection: writingDirection\n      }, style]\n    }));\n  }\n}\n\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withInternalTheme(AnimatedText);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AASA,SAASC,iBAAT;AACA,SAA8BC,eAA9B;;AA8BA,SAASC,YAAT,CAAqBC,IAArB,EAAiE;EAAA,IAAzCC,KAAyC,GAAFD,IAAE,CAAzCC,KAAyC;EAAA,IAAlCC,KAAkC,GAAFF,IAAE,CAAlCE,KAAkC;EAAA,IAA3BC,OAA2B,GAAFH,IAAE,CAA3BG,OAA2B;EAAA,IAAfC,IAAe,4BAAFJ,IAAE;;EAC/D,IAAMK,gBAAgB,GAAGC,WAAW,CAACC,YAAZD,GAA2BE,KAA3BF,GAAmC,KAAnCA,GAA2C,KAApE;;EAEA,IAAIJ,KAAK,CAACO,IAANP,IAAcC,OAAlB,EAA2B;IACzB,IAAMO,eAAe,GAAGC,MAAM,CAACC,IAAPD,CAAYb,eAAZa,EAA6BE,MAA7BF,CACtB,UAACG,GAAD,EAAMC,GAAN,EAAc;MACZ,uBACEb,KAAK,CAACc,KAANd,CAAYa,GAAZb,CADF;MAAA,IAAQe,QAAR,oBAAQA,QAAR;MAAA,IAAkBC,UAAlB,oBAAkBA,UAAlB;MAAA,IAA8BC,UAA9B,oBAA8BA,UAA9B;MAAA,IAA0CC,aAA1C,oBAA0CA,aAA1C;MAAA,IAAyDC,UAAzD,oBAAyDA,UAAzD;MAGA,uCACKP,GADL,2BAEGC,GAFH,EAES;QACLM,UAAU,EAAVA,UADK;QAELJ,QAAQ,EAARA,QAFK;QAGLC,UAAU,EAAVA,UAHK;QAILC,UAAU,EAAEA,UAJP;QAKLC,aAAa,EAAbA,aALK;QAMLE,KAAK,EAAEpB,KAAK,CAACqB,MAANrB,CAAasB;MANf,CAFT;IAWD,CAhBqBb,EAiBtB,EAjBsBA,CAAxB;IA2BA,IAAMc,eAAe,GAAGf,eAAe,CAACP,OAAD,CAAvC;IAEA,OACEP,oBAAC8B,QAAQ,CAACC,IAAV,EAAcC,aACRxB,IADQ,EACJ;MACRH,KAAK,EAAE,CAACwB,eAAD,EAAkBI,MAAM,CAACC,IAAzB,EAA+B;QAAEzB;MAAF,CAA/B,EAAqDJ,KAArD;IADC,CADI,CAAd,CADF;EAMD,CApCD,MAoCO;IACL,IAAM8B,IAAI,GAAG,CAAC7B,KAAK,CAACO,IAAP,GAAcP,KAAK,CAACc,KAANd,CAAY8B,OAA1B,GAAoC9B,KAAK,CAACc,KAANd,CAAY+B,UAA7D;;IACA,IAAMC,SAAS,mCACVH,IADU;MAEbT,KAAK,EAAEpB,KAAK,CAACO,IAANP,GAAaA,KAAK,CAACqB,MAANrB,CAAasB,SAA1BtB,GAAsCA,KAAK,CAACqB,MAANrB,CAAa4B;IAF7C,EAAf;;IAIA,OACElC,oBAAC8B,QAAQ,CAACC,IAAV,EAAcC,aACRxB,IADQ,EACJ;MACRH,KAAK,EAAE,CACL4B,MAAM,CAACC,IADF,EAELI,SAFK,EAGL;QACE7B;MADF,CAHK,EAMLJ,KANK;IADC,CADI,CAAd,CADF;EAaF;AACF;;AAEA,IAAM4B,MAAM,GAAGM,UAAU,CAACC,MAAXD,CAAkB;EAC/BL,IAAI,EAAE;IACJO,SAAS,EAAE;EADP;AADyB,CAAlBF,CAAf;AAMA,eAAetC,iBAAiB,CAACE,YAAD,CAAhC","names":["React","withInternalTheme","MD3TypescaleKey","AnimatedText","_ref","style","theme","variant","rest","writingDirection","I18nManager","getConstants","isRTL","isV3","stylesByVariant","Object","keys","reduce","acc","key","fonts","fontSize","fontWeight","lineHeight","letterSpacing","fontFamily","color","colors","onSurface","styleForVariant","Animated","Text","_extends","styles","text","font","regular","bodyMedium","textStyle","StyleSheet","create","textAlign"],"sources":["AnimatedText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { Font, InternalTheme, MD3TypescaleKey } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  /**\n   * Variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  variant?: keyof typeof MD3TypescaleKey;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Animated text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, variant, ...rest }: Props) {\n  const writingDirection = I18nManager.getConstants().isRTL ? 'rtl' : 'ltr';\n\n  if (theme.isV3 && variant) {\n    const stylesByVariant = Object.keys(MD3TypescaleKey).reduce(\n      (acc, key) => {\n        const { fontSize, fontWeight, lineHeight, letterSpacing, fontFamily } =\n          theme.fonts[key as keyof typeof MD3TypescaleKey];\n\n        return {\n          ...acc,\n          [key]: {\n            fontFamily,\n            fontSize,\n            fontWeight,\n            lineHeight: lineHeight,\n            letterSpacing,\n            color: theme.colors.onSurface,\n          },\n        };\n      },\n      {} as {\n        [key in MD3TypescaleKey]: {\n          fontSize: number;\n          fontWeight: Font['fontWeight'];\n          lineHeight: number;\n          letterSpacing: number;\n        };\n      }\n    );\n\n    const styleForVariant = stylesByVariant[variant];\n\n    return (\n      <Animated.Text\n        {...rest}\n        style={[styleForVariant, styles.text, { writingDirection }, style]}\n      />\n    );\n  } else {\n    const font = !theme.isV3 ? theme.fonts.regular : theme.fonts.bodyMedium;\n    const textStyle = {\n      ...font,\n      color: theme.isV3 ? theme.colors.onSurface : theme.colors.text,\n    };\n    return (\n      <Animated.Text\n        {...rest}\n        style={[\n          styles.text,\n          textStyle,\n          {\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withInternalTheme(AnimatedText);\n"]},"metadata":{},"sourceType":"module"}