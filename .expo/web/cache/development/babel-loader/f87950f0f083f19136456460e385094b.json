{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationEventEmitter } from \"./LocationEventEmitter\";\nvar nextWatchId = 0;\n\nvar Subscriber = function () {\n  function Subscriber(eventName, eventDataField) {\n    _classCallCheck(this, Subscriber);\n\n    this.callbacks = {};\n    this.eventSubscription = null;\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  _createClass(Subscriber, [{\n    key: \"maybeInitializeSubscription\",\n    value: function maybeInitializeSubscription() {\n      var _this = this;\n\n      if (this.eventSubscription) {\n        return;\n      }\n\n      this.eventSubscription = LocationEventEmitter.addListener(this.eventName, function (event) {\n        return _this.trigger(event);\n      });\n    }\n  }, {\n    key: \"registerCallback\",\n    value: function registerCallback(callback) {\n      this.maybeInitializeSubscription();\n      var id = ++nextWatchId;\n      this.callbacks[id] = callback;\n      return id;\n    }\n  }, {\n    key: \"unregisterCallback\",\n    value: function unregisterCallback(id) {\n      if (!this.callbacks[id]) {\n        return;\n      }\n\n      delete this.callbacks[id];\n      ExpoLocation.removeWatchAsync(id);\n\n      if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n        LocationEventEmitter.removeSubscription(this.eventSubscription);\n        this.eventSubscription = null;\n      }\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event) {\n      var watchId = event.watchId;\n      var callback = this.callbacks[watchId];\n\n      if (callback) {\n        callback(event[this.eventDataField]);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    }\n  }]);\n\n  return Subscriber;\n}();\n\nexport var LocationSubscriber = new Subscriber('Expo.locationChanged', 'location');\nexport var HeadingSubscriber = new Subscriber('Expo.headingChanged', 'heading');\nexport function _getCurrentWatchId() {\n  return nextWatchId;\n}","map":{"version":3,"mappings":";;AAEA,OAAOA,YAAP;AAEA,SAASC,oBAAT;AAOA,IAAIC,WAAW,GAAG,CAAlB;;IAEMC,U;EAMJ,oBAAYC,SAAZ,EAA+BC,cAA/B,EAAqD;IAAA;;IAAA,KAH7CC,SAG6C,GAHD,EAGC;IAAA,KAF7CC,iBAE6C,GAFJ,IAEI;IACnD,KAAKH,SAAL,GAAiBA,SAAjB;IACA,KAAKC,cAAL,GAAsBA,cAAtB;EACD;;;;WAED,uCAA2B;MAAA;;MACzB,IAAI,KAAKE,iBAAT,EAA4B;QAC1B;MACD;;MACD,KAAKA,iBAAL,GAAyBN,oBAAoB,CAACO,WAArB,CACvB,KAAKJ,SADkB,EAEvB,UAACK,KAAD;QAAA,OAAwB,KAAI,CAACC,OAAL,CAAaD,KAAb,CAAxB;MAAA,CAFuB,CAAzB;IAID;;;WAKD,0BAAiBE,QAAjB,EAAuC;MACrC,KAAKC,2BAAL;MACA,IAAMC,EAAE,GAAG,EAAEX,WAAb;MACA,KAAKI,SAAL,CAAeO,EAAf,IAAqBF,QAArB;MACA,OAAOE,EAAP;IACD;;;WAKD,4BAAmBA,EAAnB,EAA6B;MAE3B,IAAI,CAAC,KAAKP,SAAL,CAAeO,EAAf,CAAL,EAAyB;QACvB;MACD;;MAED,OAAO,KAAKP,SAAL,CAAeO,EAAf,CAAP;MACAb,YAAY,CAACc,gBAAb,CAA8BD,EAA9B;;MAEA,IAAIE,MAAM,CAACC,IAAP,CAAY,KAAKV,SAAjB,EAA4BW,MAA5B,KAAuC,CAAvC,IAA4C,KAAKV,iBAArD,EAAwE;QACtEN,oBAAoB,CAACiB,kBAArB,CAAwC,KAAKX,iBAA7C;QACA,KAAKA,iBAAL,GAAyB,IAAzB;MACD;IACF;;;WAED,iBAAQE,KAAR,EAA0B;MACxB,IAAMU,OAAO,GAAGV,KAAK,CAACU,OAAtB;MACA,IAAMR,QAAQ,GAAG,KAAKL,SAAL,CAAea,OAAf,CAAjB;;MAEA,IAAIR,QAAJ,EAAc;QACZA,QAAQ,CAACF,KAAK,CAAC,KAAKJ,cAAN,CAAN,CAAR;MACD,CAFD,MAEO;QACLL,YAAY,CAACc,gBAAb,CAA8BK,OAA9B;MACD;IACF;;;;;;AAGH,OAAO,IAAMC,kBAAkB,GAAG,IAAIjB,UAAJ,CAChC,sBADgC,EAEhC,UAFgC,CAA3B;AAIP,OAAO,IAAMkB,iBAAiB,GAAG,IAAIlB,UAAJ,CAC/B,qBAD+B,EAE/B,SAF+B,CAA1B;AAQP,OAAM,SAAUmB,kBAAV,GAA4B;EAChC,OAAOpB,WAAP;AACD","names":["ExpoLocation","LocationEventEmitter","nextWatchId","Subscriber","eventName","eventDataField","callbacks","eventSubscription","addListener","event","trigger","callback","maybeInitializeSubscription","id","removeWatchAsync","Object","keys","length","removeSubscription","watchId","LocationSubscriber","HeadingSubscriber","_getCurrentWatchId"],"sourceRoot":"","sources":["../src/LocationSubscribers.ts"],"sourcesContent":["import { Subscription } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\ntype EventObject = {\n  watchId: number;\n  [key: string]: any;\n};\n\nlet nextWatchId = 0;\n\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\n  private eventName: string;\n  private eventDataField: string;\n  private callbacks: { [id: string]: CallbackType } = {};\n  private eventSubscription: Subscription | null = null;\n\n  constructor(eventName: string, eventDataField: string) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(\n      this.eventName,\n      (event: EventObject) => this.trigger(event)\n    );\n  }\n\n  /**\n   * Registers given callback under new id which is then returned.\n   */\n  registerCallback(callback: CallbackType): number {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Unregisters a callback with given id and revokes the subscription if possible.\n   */\n  unregisterCallback(id: number): void {\n    // Do nothing if we have already unregistered the callback.\n    if (!this.callbacks[id]) {\n      return;\n    }\n\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n\n  trigger(event: EventObject): void {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\n\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\n  'Expo.locationChanged',\n  'location'\n);\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\n  'Expo.headingChanged',\n  'heading'\n);\n\n/**\n * @private Necessary for some unit tests.\n */\nexport function _getCurrentWatchId(): number {\n  return nextWatchId;\n}\n"]},"metadata":{},"sourceType":"module"}