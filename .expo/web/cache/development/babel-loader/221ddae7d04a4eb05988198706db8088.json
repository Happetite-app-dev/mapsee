{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { withInternalTheme } from \"../core/theming\";\nimport AnimatedText from \"./Typography/AnimatedText\";\n\nvar HelperText = function HelperText(_ref) {\n  var _theme$colors;\n\n  var style = _ref.style,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'info' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      theme = _ref.theme,\n      onLayout = _ref.onLayout,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 'normal' : _ref$padding,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      shown = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(0),\n      textHeight = _React$useRef2.current;\n\n  var scale = theme.animation.scale;\n  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,\n      maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  var handleTextLayout = function handleTextLayout(e) {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  var colors = theme.colors,\n      dark = theme.dark;\n  var textColor = type === 'error' ? colors === null || colors === void 0 ? void 0 : colors.error : color(theme.isV3 ? theme.colors.onSurface : theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n  return React.createElement(AnimatedText, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style],\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, rest), rest.children);\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withInternalTheme(HelperText);","map":{"version":3,"mappings":"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","names":["React","color","withInternalTheme","AnimatedText","HelperText","style","_ref","type","visible","theme","onLayout","padding","rest","useRef","Animated","Value","shown","current","textHeight","scale","animation","maxFontSizeMultiplier","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","isV3","onSurface","_theme$colors","text","alpha","rgb","string","_extends","styles","opacity","transform","translateY","interpolate","inputRange","outputRange","children","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"sources":["HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../core/theming';\nimport type { $Omit, InternalTheme } from '../types';\nimport AnimatedText from './Typography/AnimatedText';\n\nexport type Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  const { maxFontSizeMultiplier = 1.5 } = rest;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors?.error\n      : color(theme.isV3 ? theme.colors.onSurface : theme?.colors?.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withInternalTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}