{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { DEFAULT_TOUCH_SLOP } from \"../constants\";\nimport { EventTypes } from \"../interfaces\";\n\nvar ScaleGestureDetector = function () {\n  function ScaleGestureDetector(callbacks) {\n    _classCallCheck(this, ScaleGestureDetector);\n\n    _defineProperty(this, \"onScaleBegin\", void 0);\n\n    _defineProperty(this, \"onScale\", void 0);\n\n    _defineProperty(this, \"onScaleEnd\", void 0);\n\n    _defineProperty(this, \"focusX\", void 0);\n\n    _defineProperty(this, \"focusY\", void 0);\n\n    _defineProperty(this, \"currentSpan\", void 0);\n\n    _defineProperty(this, \"prevSpan\", void 0);\n\n    _defineProperty(this, \"initialSpan\", void 0);\n\n    _defineProperty(this, \"currentTime\", void 0);\n\n    _defineProperty(this, \"prevTime\", void 0);\n\n    _defineProperty(this, \"inProgress\", false);\n\n    _defineProperty(this, \"spanSlop\", void 0);\n\n    _defineProperty(this, \"minSpan\", void 0);\n\n    this.onScaleBegin = callbacks.onScaleBegin;\n    this.onScale = callbacks.onScale;\n    this.onScaleEnd = callbacks.onScaleEnd;\n    this.spanSlop = DEFAULT_TOUCH_SLOP * 2;\n    this.minSpan = 0;\n  }\n\n  _createClass(ScaleGestureDetector, [{\n    key: \"onTouchEvent\",\n    value: function onTouchEvent(event, tracker) {\n      this.adaptEvent(event, tracker);\n      this.currentTime = event.time;\n      var action = event.eventType;\n      var numOfPointers = tracker.getTrackedPointersCount();\n      var streamComplete = action === EventTypes.UP || action === EventTypes.ADDITIONAL_POINTER_UP || action === EventTypes.CANCEL;\n\n      if (action === EventTypes.DOWN || streamComplete) {\n        if (this.inProgress) {\n          this.onScaleEnd(this, event);\n          this.inProgress = false;\n          this.initialSpan = 0;\n        }\n\n        if (streamComplete) {\n          return true;\n        }\n      }\n\n      var configChanged = action === EventTypes.DOWN || action === EventTypes.ADDITIONAL_POINTER_UP || action === EventTypes.ADDITIONAL_POINTER_DOWN;\n      var pointerUp = action === EventTypes.ADDITIONAL_POINTER_UP;\n      var ignoredPointer = pointerUp ? event.pointerId : undefined;\n      var div = pointerUp ? numOfPointers - 1 : numOfPointers;\n      var sumX = tracker.getSumX(ignoredPointer);\n      var sumY = tracker.getSumY(ignoredPointer);\n      var focusX = sumX / div;\n      var focusY = sumY / div;\n      var devSumX = 0;\n      var devSumY = 0;\n      tracker.getData().forEach(function (value, key) {\n        if (key === ignoredPointer) {\n          return;\n        }\n\n        devSumX += Math.abs(value.lastX - focusX);\n        devSumY += Math.abs(value.lastY - focusY);\n      });\n      var devX = devSumX / div;\n      var devY = devSumY / div;\n      var spanX = devX * 2;\n      var spanY = devY * 2;\n      var span = Math.hypot(spanX, spanY);\n      var wasInProgress = this.inProgress;\n      this.focusX = focusX;\n      this.focusY = focusY;\n\n      if (this.inProgress && (span < this.minSpan || configChanged)) {\n        this.onScaleEnd(this, event);\n        this.inProgress = false;\n        this.initialSpan = span;\n      }\n\n      if (configChanged) {\n        this.initialSpan = this.prevSpan = this.currentSpan = span;\n      }\n\n      if (!this.inProgress && span >= this.minSpan && (wasInProgress || Math.abs(span - this.initialSpan) > this.spanSlop)) {\n        this.prevSpan = this.currentSpan = span;\n        this.prevTime = this.currentTime;\n        this.inProgress = this.onScaleBegin(this);\n      }\n\n      if (action !== EventTypes.MOVE) {\n        return true;\n      }\n\n      this.currentSpan = span;\n\n      if (this.inProgress && !this.onScale(this, event)) {\n        return true;\n      }\n\n      this.prevSpan = this.currentSpan;\n      this.prevTime = this.currentTime;\n      return true;\n    }\n  }, {\n    key: \"adaptEvent\",\n    value: function adaptEvent(event, tracker) {\n      if (tracker.getTrackedPointersCount() > 1 && event.eventType === EventTypes.DOWN) {\n        event.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n      }\n\n      if (tracker.getTrackedPointersCount() > 1 && event.eventType === EventTypes.UP) {\n        event.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n      }\n    }\n  }, {\n    key: \"getCurrentSpan\",\n    value: function getCurrentSpan() {\n      return this.currentSpan;\n    }\n  }, {\n    key: \"getFocusX\",\n    value: function getFocusX() {\n      return this.focusX;\n    }\n  }, {\n    key: \"getFocusY\",\n    value: function getFocusY() {\n      return this.focusY;\n    }\n  }, {\n    key: \"getTimeDelta\",\n    value: function getTimeDelta() {\n      return this.currentTime - this.prevTime;\n    }\n  }, {\n    key: \"getScaleFactor\",\n    value: function getScaleFactor(numOfPointers) {\n      if (numOfPointers < 2) {\n        return 1;\n      }\n\n      return this.prevSpan > 0 ? this.currentSpan / this.prevSpan : 1;\n    }\n  }]);\n\n  return ScaleGestureDetector;\n}();\n\nexport { ScaleGestureDetector as default };","map":{"version":3,"mappings":"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","names":["DEFAULT_TOUCH_SLOP","EventTypes","ScaleGestureDetector","constructor","callbacks","_defineProperty","onScaleBegin","onScale","onScaleEnd","spanSlop","minSpan","onTouchEvent","event","tracker","adaptEvent","currentTime","time","action","eventType","numOfPointers","getTrackedPointersCount","streamComplete","UP","ADDITIONAL_POINTER_UP","CANCEL","DOWN","inProgress","initialSpan","configChanged","ADDITIONAL_POINTER_DOWN","pointerUp","ignoredPointer","pointerId","undefined","div","sumX","getSumX","sumY","getSumY","focusX","focusY","devSumX","devSumY","getData","forEach","value","key","Math","abs","lastX","lastY","devX","devY","spanX","spanY","span","hypot","wasInProgress","prevSpan","currentSpan","prevTime","MOVE","getCurrentSpan","getFocusX","getFocusY","getTimeDelta","getScaleFactor"],"sources":["ScaleGestureDetector.ts"],"sourcesContent":["import { DEFAULT_TOUCH_SLOP } from '../constants';\nimport { AdaptedPointerEvent, EventTypes } from '../interfaces';\n\nimport PointerTracker from '../tools/PointerTracker';\n\nexport interface ScaleGestureListener {\n  onScaleBegin: (detector: ScaleGestureDetector) => boolean;\n  onScale: (\n    detector: ScaleGestureDetector,\n    event: AdaptedPointerEvent\n  ) => boolean;\n  onScaleEnd: (\n    detector: ScaleGestureDetector,\n    event: AdaptedPointerEvent\n  ) => void;\n}\n\nexport default class ScaleGestureDetector implements ScaleGestureListener {\n  public onScaleBegin: (detector: ScaleGestureDetector) => boolean;\n  public onScale: (\n    detector: ScaleGestureDetector,\n    event: AdaptedPointerEvent\n  ) => boolean;\n  public onScaleEnd: (\n    detector: ScaleGestureDetector,\n    event: AdaptedPointerEvent\n  ) => void;\n\n  private focusX!: number;\n  private focusY!: number;\n\n  private currentSpan!: number;\n  private prevSpan!: number;\n  private initialSpan!: number;\n\n  private currentTime!: number;\n  private prevTime!: number;\n\n  private inProgress = false;\n\n  private spanSlop: number;\n  private minSpan: number;\n\n  public constructor(callbacks: ScaleGestureListener) {\n    this.onScaleBegin = callbacks.onScaleBegin;\n    this.onScale = callbacks.onScale;\n    this.onScaleEnd = callbacks.onScaleEnd;\n\n    this.spanSlop = DEFAULT_TOUCH_SLOP * 2;\n    this.minSpan = 0;\n  }\n\n  public onTouchEvent(\n    event: AdaptedPointerEvent,\n    tracker: PointerTracker\n  ): boolean {\n    this.adaptEvent(event, tracker);\n\n    this.currentTime = event.time;\n\n    const action: EventTypes = event.eventType;\n    const numOfPointers = tracker.getTrackedPointersCount();\n\n    const streamComplete: boolean =\n      action === EventTypes.UP ||\n      action === EventTypes.ADDITIONAL_POINTER_UP ||\n      action === EventTypes.CANCEL;\n\n    if (action === EventTypes.DOWN || streamComplete) {\n      if (this.inProgress) {\n        this.onScaleEnd(this, event);\n        this.inProgress = false;\n        this.initialSpan = 0;\n      }\n\n      if (streamComplete) {\n        return true;\n      }\n    }\n\n    const configChanged: boolean =\n      action === EventTypes.DOWN ||\n      action === EventTypes.ADDITIONAL_POINTER_UP ||\n      action === EventTypes.ADDITIONAL_POINTER_DOWN;\n\n    const pointerUp = action === EventTypes.ADDITIONAL_POINTER_UP;\n\n    const ignoredPointer: number | undefined = pointerUp\n      ? event.pointerId\n      : undefined;\n\n    //Determine focal point\n\n    const div: number = pointerUp ? numOfPointers - 1 : numOfPointers;\n\n    const sumX = tracker.getSumX(ignoredPointer);\n    const sumY = tracker.getSumY(ignoredPointer);\n\n    const focusX = sumX / div;\n    const focusY = sumY / div;\n\n    //Determine average deviation from focal point\n\n    let devSumX = 0;\n    let devSumY = 0;\n\n    tracker.getData().forEach((value, key) => {\n      if (key === ignoredPointer) {\n        return;\n      }\n\n      devSumX += Math.abs(value.lastX - focusX);\n      devSumY += Math.abs(value.lastY - focusY);\n    });\n\n    const devX: number = devSumX / div;\n    const devY: number = devSumY / div;\n\n    const spanX: number = devX * 2;\n    const spanY: number = devY * 2;\n\n    const span = Math.hypot(spanX, spanY);\n\n    //Begin/end events\n    const wasInProgress: boolean = this.inProgress;\n    this.focusX = focusX;\n    this.focusY = focusY;\n\n    if (this.inProgress && (span < this.minSpan || configChanged)) {\n      this.onScaleEnd(this, event);\n      this.inProgress = false;\n      this.initialSpan = span;\n    }\n\n    if (configChanged) {\n      this.initialSpan = this.prevSpan = this.currentSpan = span;\n    }\n\n    if (\n      !this.inProgress &&\n      span >= this.minSpan &&\n      (wasInProgress || Math.abs(span - this.initialSpan) > this.spanSlop)\n    ) {\n      this.prevSpan = this.currentSpan = span;\n      this.prevTime = this.currentTime;\n      this.inProgress = this.onScaleBegin(this);\n    }\n\n    //Handle motion\n    if (action !== EventTypes.MOVE) {\n      return true;\n    }\n\n    this.currentSpan = span;\n\n    if (this.inProgress && !this.onScale(this, event)) {\n      return true;\n    }\n\n    this.prevSpan = this.currentSpan;\n    this.prevTime = this.currentTime;\n\n    return true;\n  }\n\n  private adaptEvent(\n    event: AdaptedPointerEvent,\n    tracker: PointerTracker\n  ): void {\n    if (\n      tracker.getTrackedPointersCount() > 1 &&\n      event.eventType === EventTypes.DOWN\n    ) {\n      event.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n    }\n\n    if (\n      tracker.getTrackedPointersCount() > 1 &&\n      event.eventType === EventTypes.UP\n    ) {\n      event.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n    }\n  }\n\n  public getCurrentSpan(): number {\n    return this.currentSpan;\n  }\n\n  public getFocusX(): number {\n    return this.focusX;\n  }\n\n  public getFocusY(): number {\n    return this.focusY;\n  }\n\n  public getTimeDelta(): number {\n    return this.currentTime - this.prevTime;\n  }\n\n  public getScaleFactor(numOfPointers: number): number {\n    if (numOfPointers < 2) {\n      return 1;\n    }\n\n    return this.prevSpan > 0 ? this.currentSpan / this.prevSpan : 1;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}