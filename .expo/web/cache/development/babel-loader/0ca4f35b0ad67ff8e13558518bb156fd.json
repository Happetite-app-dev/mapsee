{"ast":null,"code":"export function addEventListener(Module) {\n  var _Module$addEventListe;\n\n  for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    rest[_key - 1] = arguments[_key];\n  }\n\n  var eventName = rest[0],\n      handler = rest[1];\n  var removed = false;\n  var subscription = (_Module$addEventListe = Module.addEventListener(eventName, handler)) !== null && _Module$addEventListe !== void 0 ? _Module$addEventListe : {\n    remove: function remove() {\n      var _Module$removeEventLi, _Module$remove;\n\n      if (removed) {\n        return;\n      }\n\n      (_Module$removeEventLi = Module.removeEventListener) === null || _Module$removeEventLi === void 0 ? void 0 : _Module$removeEventLi.call(Module, eventName, handler);\n      (_Module$remove = Module.remove) === null || _Module$remove === void 0 ? void 0 : _Module$remove.call(Module, eventName, handler);\n      removed = true;\n    }\n  };\n  return subscription;\n}\nexport function addListener(Module) {\n  var _Module$addListener;\n\n  for (var _len2 = arguments.length, rest = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    rest[_key2 - 1] = arguments[_key2];\n  }\n\n  var eventName = rest[0],\n      handler = rest[1];\n  var removed = false;\n  var subscription = (_Module$addListener = Module.addListener(eventName, handler)) !== null && _Module$addListener !== void 0 ? _Module$addListener : {\n    remove: function remove() {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener(eventName, handler);\n      removed = true;\n    }\n  };\n  return subscription;\n}","map":{"version":3,"mappings":"AAKA,OAAO,SAASA,gBAAT,CAQLC,MARK,EAQ2D;EAAA;;EAAA,kCAAlDC,IAAI,qCAA8C,EAA9CC,QAA8C,EAA9CA,WAA8C,EAA9CA,MAA8C,EAA9C;IAAJD,IAAI,UAAJA,GAAIE,eAAJF;EAAI;;EAClB,IAAOG,SAAP,GAA6BH,IAA7B;EAAA,IAAkBI,OAAlB,GAA6BJ,IAA7B;EAEA,IAAIK,OAAO,GAAG,KAAd;EAEA,IAAMC,YAAY,4BAAGP,MAAM,CAACD,gBAAPC,CAAwBI,SAAxBJ,EAAmCK,OAAnCL,CAAH,MAA8C,IAA9C,IAA8CQ,gCAA9C,GAA8CA,qBAA9C,GAAkD;IAClEC,MAAM,EAAE,kBAAM;MAAA;;MACZ,IAAIH,OAAJ,EAAa;QACX;MACF;;MAEA,+BAAM,CAACI,mBAAP,MAA0B,IAA1B,IAA0BC,gCAA1B,GAA0B,MAA1B,sCAA6BP,SAA7B,EAAwCC,OAAxC;MACA,wBAAM,CAACI,MAAP,MAAa,IAAb,IAAaG,yBAAb,GAAa,MAAb,+BAAgBR,SAAhB,EAA2BC,OAA3B;MACAC,OAAO,GAAG,IAAVA;IACF;EATkE,CAApE;EAYA,OAAOC,YAAP;AACF;AAEA,OAAO,SAASM,WAAT,CAKLb,MALK,EAKsD;EAAA;;EAAA,mCAA7CC,IAAI,uCAAyC,EAAzCa,SAAyC,EAAzCA,aAAyC,EAAzCA,OAAyC,EAAzC;IAAJb,IAAI,WAAJA,GAAIE,gBAAJF;EAAI;;EAClB,IAAOG,SAAP,GAA6BH,IAA7B;EAAA,IAAkBI,OAAlB,GAA6BJ,IAA7B;EAEA,IAAIK,OAAO,GAAG,KAAd;EAEA,IAAMC,YAAY,0BAAGP,MAAM,CAACa,WAAPb,CAAmBI,SAAnBJ,EAA8BK,OAA9BL,CAAH,MAAyC,IAAzC,IAAyCe,8BAAzC,GAAyCA,mBAAzC,GAA6C;IAC7DN,MAAM,EAAE,kBAAM;MACZ,IAAIH,OAAJ,EAAa;QACX;MACF;;MAEAN,MAAM,CAACU,mBAAPV,CAA2BI,SAA3BJ,EAAsCK,OAAtCL;MACAM,OAAO,GAAG,IAAVA;IACF;EAR6D,CAA/D;EAWA,OAAOC,YAAP;AACF","names":["addEventListener","Module","rest","_key","arguments","eventName","handler","removed","subscription","_Module$addEventListe","remove","removeEventListener","_Module$removeEventLi","_Module$remove","addListener","_key2","_Module$addListener"],"sources":["addEventListener.tsx"],"sourcesContent":["import type {\n  NativeEventSubscription,\n  EmitterSubscription,\n} from 'react-native';\n\nexport function addEventListener<\n  T extends {\n    addEventListener: (\n      ...args: any\n    ) => NativeEventSubscription | EmitterSubscription;\n  } & { removeEventListener?: (...args: any) => void } & {\n    remove?: (...args: any) => void;\n  }\n>(Module: T, ...rest: Parameters<typeof Module.addEventListener>) {\n  const [eventName, handler] = rest;\n\n  let removed = false;\n\n  const subscription = Module.addEventListener(eventName, handler) ?? {\n    remove: () => {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener?.(eventName, handler);\n      Module.remove?.(eventName, handler);\n      removed = true;\n    },\n  };\n\n  return subscription;\n}\n\nexport function addListener<\n  T extends {\n    addListener: (...args: any) => EmitterSubscription;\n    removeEventListener: (...args: any) => void;\n  }\n>(Module: T, ...rest: Parameters<typeof Module.addListener>) {\n  const [eventName, handler] = rest;\n\n  let removed = false;\n\n  const subscription = Module.addListener(eventName, handler) ?? {\n    remove: () => {\n      if (removed) {\n        return;\n      }\n\n      Module.removeEventListener(eventName, handler);\n      removed = true;\n    },\n  };\n\n  return subscription;\n}\n"]},"metadata":{},"sourceType":"module"}