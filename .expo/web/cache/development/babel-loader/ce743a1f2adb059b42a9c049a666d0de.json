{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\", \"accessibilityLabel\", \"right\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { withInternalTheme } from \"../../core/theming\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\n\nvar DrawerItem = function DrawerItem(_ref) {\n  var icon = _ref.icon,\n      label = _ref.label,\n      active = _ref.active,\n      theme = _ref.theme,\n      style = _ref.style,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      right = _ref.right,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var roundness = theme.roundness,\n      isV3 = theme.isV3;\n  var backgroundColor = active ? isV3 ? theme.colors.secondaryContainer : color(theme.colors.primary).alpha(0.12).rgb().string() : 'transparent';\n  var contentColor = active ? isV3 ? theme.colors.onSecondaryContainer : theme.colors.primary : isV3 ? theme.colors.onSurfaceVariant : color(theme.colors.text).alpha(0.68).rgb().string();\n  var labelMargin = icon ? isV3 ? 12 : 32 : 0;\n  var borderRadius = (isV3 ? 7 : 1) * roundness;\n  var underlayColor = isV3 ? color(backgroundColor).mix(color(theme.colors.onSecondaryContainer), 0.16).rgb().toString() : undefined;\n  var font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n  return React.createElement(View, rest, React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    style: [styles.container, {\n      backgroundColor: backgroundColor,\n      borderRadius: borderRadius\n    }, isV3 && styles.v3Container, style],\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: active\n    },\n    accessibilityLabel: accessibilityLabel,\n    underlayColor: underlayColor\n  }, React.createElement(View, {\n    style: [styles.wrapper, isV3 && styles.v3Wrapper]\n  }, React.createElement(View, {\n    style: styles.content\n  }, icon ? React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: contentColor\n  }) : null, React.createElement(Text, {\n    variant: \"labelLarge\",\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, _objectSpread({\n      color: contentColor,\n      marginLeft: labelMargin\n    }, font)]\n  }, label)), right === null || right === void 0 ? void 0 : right({\n    color: contentColor\n  }))));\n};\n\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  v3Container: {\n    justifyContent: 'center',\n    height: 56,\n    marginLeft: 12,\n    marginRight: 12,\n    marginVertical: 0\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  v3Wrapper: {\n    marginLeft: 16,\n    marginRight: 24,\n    padding: 0\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withInternalTheme(DrawerItem);","map":{"version":3,"mappings":"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","names":["React","color","withInternalTheme","Icon","TouchableRipple","Text","DrawerItem","icon","_ref","label","active","theme","style","onPress","accessibilityLabel","right","rest","roundness","isV3","backgroundColor","colors","secondaryContainer","primary","alpha","rgb","string","contentColor","onSecondaryContainer","onSurfaceVariant","text","labelMargin","borderRadius","underlayColor","mix","toString","undefined","font","fonts","labelLarge","medium","View","borderless","styles","container","v3Container","accessibilityRole","accessibilityState","selected","wrapper","v3Wrapper","content","source","size","variant","selectable","numberOfLines","marginLeft","displayName","StyleSheet","create","marginHorizontal","marginVertical","justifyContent","height","marginRight","flexDirection","alignItems","padding","flex"],"sources":["DrawerItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { roundness, isV3 } = theme;\n\n  const backgroundColor = active\n    ? isV3\n      ? theme.colors.secondaryContainer\n      : color(theme.colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? isV3\n      ? theme.colors.onSecondaryContainer\n      : theme.colors.primary\n    : isV3\n    ? theme.colors.onSurfaceVariant\n    : color(theme.colors.text).alpha(0.68).rgb().string();\n\n  const labelMargin = icon ? (isV3 ? 12 : 32) : 0;\n  const borderRadius = (isV3 ? 7 : 1) * roundness;\n  const underlayColor = isV3\n    ? color(backgroundColor)\n        .mix(color(theme.colors.onSecondaryContainer), 0.16)\n        .rgb()\n        .toString()\n    : undefined;\n  const font = isV3 ? theme.fonts.labelLarge : theme.fonts.medium;\n\n  return (\n    <View {...rest}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius },\n          isV3 && styles.v3Container,\n          style,\n        ]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n        underlayColor={underlayColor}\n      >\n        <View style={[styles.wrapper, isV3 && styles.v3Wrapper]}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              variant=\"labelLarge\"\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  marginLeft: labelMargin,\n                  ...font,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  v3Container: {\n    justifyContent: 'center',\n    height: 56,\n    marginLeft: 12,\n    marginRight: 12,\n    marginVertical: 0,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  v3Wrapper: {\n    marginLeft: 16,\n    marginRight: 24,\n    padding: 0,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withInternalTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}