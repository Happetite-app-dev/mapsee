{"ast":null,"code":"import * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport default function useIsKeyboardShown(_ref) {\n  var onShow = _ref.onShow,\n      onHide = _ref.onHide;\n  React.useEffect(function () {\n    var willShowSubscription;\n    var willHideSubscription;\n    var didShowSubscription;\n    var didHideSubscription;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return function () {\n      if (Platform.OS === 'ios') {\n        var _willShowSubscription, _willHideSubscription;\n\n        if ((_willShowSubscription = willShowSubscription) !== null && _willShowSubscription !== void 0 && _willShowSubscription.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if ((_willHideSubscription = willHideSubscription) !== null && _willHideSubscription !== void 0 && _willHideSubscription.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        var _didShowSubscription, _didHideSubscription;\n\n        if ((_didShowSubscription = didShowSubscription) !== null && _didShowSubscription !== void 0 && _didShowSubscription.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if ((_didHideSubscription = didHideSubscription) !== null && _didHideSubscription !== void 0 && _didHideSubscription.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAOA,eAAe,SAASC,kBAAT,CAA2BC,IAA3B,EAAuD;EAAA,IAAzBC,MAAyB,GAAFD,IAAE,CAAzBC,MAAyB;EAAA,IAAjBC,MAAiB,GAAFF,IAAE,CAAjBE,MAAiB;EACpEJ,KAAK,CAACK,SAANL,CAAgB,YAAM;IACpB,IAAIM,oBAAJ;IACA,IAAIC,oBAAJ;IACA,IAAIC,mBAAJ;IACA,IAAIC,mBAAJ;;IAEA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzBJ,oBAAoB,GAAGM,QAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCT,MAAzCS,CAAvBN;MACAC,oBAAoB,GAAGK,QAAQ,CAACC,WAATD,CAAqB,kBAArBA,EAAyCR,MAAzCQ,CAAvBL;IACD,CAHD,MAGO;MACLC,mBAAmB,GAAGI,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCT,MAAxCS,CAAtBJ;MACAC,mBAAmB,GAAGG,QAAQ,CAACC,WAATD,CAAqB,iBAArBA,EAAwCR,MAAxCQ,CAAtBH;IACF;;IAEA,OAAO,YAAM;MACX,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;QAAA;;QACzB,6BAAIJ,oBAAJ,MAAwB,IAAxB,IAAwBQ,gCAAxB,IAAIA,sBAAsBC,MAA1B,EAAkC;UAChCT,oBAAoB,CAACS,MAArBT;QACD,CAFD,MAEO;UAELM,QAAQ,CAACI,cAATJ,CAAwB,kBAAxBA,EAA4CT,MAA5CS;QACF;;QAEA,6BAAIL,oBAAJ,MAAwB,IAAxB,IAAwBU,gCAAxB,IAAIA,sBAAsBF,MAA1B,EAAkC;UAChCR,oBAAoB,CAACQ,MAArBR;QACD,CAFD,MAEO;UAELK,QAAQ,CAACI,cAATJ,CAAwB,kBAAxBA,EAA4CR,MAA5CQ;QACF;MACD,CAdD,MAcO;QAAA;;QACL,4BAAIJ,mBAAJ,MAAuB,IAAvB,IAAuBU,+BAAvB,IAAIA,qBAAqBH,MAAzB,EAAiC;UAC/BP,mBAAmB,CAACO,MAApBP;QACD,CAFD,MAEO;UAELI,QAAQ,CAACI,cAATJ,CAAwB,iBAAxBA,EAA2CT,MAA3CS;QACF;;QAEA,4BAAIH,mBAAJ,MAAuB,IAAvB,IAAuBU,+BAAvB,IAAIA,qBAAqBJ,MAAzB,EAAiC;UAC/BN,mBAAmB,CAACM,MAApBN;QACD,CAFD,MAEO;UAELG,QAAQ,CAACI,cAATJ,CAAwB,iBAAxBA,EAA2CR,MAA3CQ;QACF;MACF;IACD,CA9BD;EA+BD,CA7CDZ,EA6CG,CAACI,MAAD,EAASD,MAAT,CA7CHH;AA8CF","names":["React","useIsKeyboardShown","_ref","onShow","onHide","useEffect","willShowSubscription","willHideSubscription","didShowSubscription","didHideSubscription","Platform","OS","Keyboard","addListener","_willShowSubscription","remove","removeListener","_willHideSubscription","_didShowSubscription","_didHideSubscription"],"sources":["useIsKeyboardShown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Keyboard, NativeEventSubscription, Platform } from 'react-native';\n\ntype Props = {\n  onShow: () => void;\n  onHide: () => void;\n};\nexport default function useIsKeyboardShown({ onShow, onHide }: Props) {\n  React.useEffect(() => {\n    let willShowSubscription: NativeEventSubscription | undefined;\n    let willHideSubscription: NativeEventSubscription | undefined;\n    let didShowSubscription: NativeEventSubscription | undefined;\n    let didHideSubscription: NativeEventSubscription | undefined;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        if (willShowSubscription?.remove) {\n          willShowSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if (willHideSubscription?.remove) {\n          willHideSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        if (didShowSubscription?.remove) {\n          didShowSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if (didHideSubscription?.remove) {\n          didHideSubscription.remove();\n        } else {\n          // @ts-expect-error: We keep deprecated listener remove method for backwards compat with old RN versions\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}\n"]},"metadata":{},"sourceType":"module"}