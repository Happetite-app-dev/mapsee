{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nvar REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\n\nexport default {\n  getInstallationIdAsync: function () {\n    var _getInstallationIdAsync = _asyncToGenerator(function* () {\n      var installationId;\n\n      try {\n        installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n\n        if (!installationId || typeof installationId !== 'string') {\n          installationId = uuidv4();\n          localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n        }\n      } catch (_unused) {\n        installationId = _getFallbackInstallationId();\n      }\n\n      return installationId;\n    });\n\n    function getInstallationIdAsync() {\n      return _getInstallationIdAsync.apply(this, arguments);\n    }\n\n    return getInstallationIdAsync;\n  }(),\n  getRegistrationInfoAsync: function () {\n    var _getRegistrationInfoAsync = _asyncToGenerator(function* () {\n      return localStorage.getItem(REGISTRATION_INFO_KEY);\n    });\n\n    function getRegistrationInfoAsync() {\n      return _getRegistrationInfoAsync.apply(this, arguments);\n    }\n\n    return getRegistrationInfoAsync;\n  }(),\n  setRegistrationInfoAsync: function () {\n    var _setRegistrationInfoAsync = _asyncToGenerator(function* (registrationInfo) {\n      try {\n        if (registrationInfo) {\n          localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n        } else {\n          localStorage.removeItem(REGISTRATION_INFO_KEY);\n        }\n      } catch (error) {\n        throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', \"Could not modify localStorage to persist auto-registration information: \" + error);\n      }\n    });\n\n    function setRegistrationInfoAsync(_x) {\n      return _setRegistrationInfoAsync.apply(this, arguments);\n    }\n\n    return setRegistrationInfoAsync;\n  }(),\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAIA,IAAMC,mBAAmB,GAAG,oCAA5B;AACA,IAAMC,qBAAqB,GAAG,sCAA9B;;AAGA,IAAIC,0BAAyB,GAAG,qCAAK;EACnC,IAAMC,qBAAqB,GAAGJ,MAAM,EAApC;;EACAG,0BAAyB,GAAG;IAAA,OAAMC,qBAAN;EAAA,CAA5B;AACD,CAHD;;AAKA,eAAe;EACbC,sBAAsB;IAAA,gDAAE,aAAW;MACjC,IAAIC,cAAJ;;MAEA,IAAI;QACFA,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqBP,mBAArB,CAAjB;;QACA,IAAI,CAACK,cAAD,IAAmB,OAAOA,cAAP,KAA0B,QAAjD,EAA2D;UACzDA,cAAc,GAAGN,MAAM,EAAvB;UACAO,YAAY,CAACE,OAAb,CAAqBR,mBAArB,EAA0CK,cAA1C;QACD;MACF,CAND,CAME,gBAAM;QACNA,cAAc,GAAGH,0BAAyB,EAA1C;MACD;;MAED,OAAOG,cAAP;IACD,CAdqB;;IAAA;MAAA;IAAA;;IAAA;EAAA,GADT;EAgBbI,wBAAwB;IAAA,kDAAE,aAAW;MACnC,OAAOH,YAAY,CAACC,OAAb,CAAqBN,qBAArB,CAAP;IACD,CAFuB;;IAAA;MAAA;IAAA;;IAAA;EAAA,GAhBX;EAmBbS,wBAAwB;IAAA,kDAAE,WAAOC,gBAAP,EAA0C;MAClE,IAAI;QACF,IAAIA,gBAAJ,EAAsB;UACpBL,YAAY,CAACE,OAAb,CAAqBP,qBAArB,EAA4CU,gBAA5C;QACD,CAFD,MAEO;UACLL,YAAY,CAACM,UAAb,CAAwBX,qBAAxB;QACD;MACF,CAND,CAME,OAAOY,KAAP,EAAc;QACd,MAAM,IAAIhB,UAAJ,CACJ,iCADI,+EAEuEgB,KAFvE,CAAN;MAID;IACF,CAbuB;;IAAA;MAAA;IAAA;;IAAA;EAAA,GAnBX;EAkCbC,WAAW,EAAE,uBAAK,CAAG,CAlCR;EAmCbC,eAAe,EAAE,2BAAK,CAAG;AAnCZ,CAAf","names":["CodedError","v4","uuidv4","INSTALLATION_ID_KEY","REGISTRATION_INFO_KEY","getFallbackInstallationId","sessionInstallationId","getInstallationIdAsync","installationId","localStorage","getItem","setItem","getRegistrationInfoAsync","setRegistrationInfoAsync","registrationInfo","removeItem","error","addListener","removeListeners"],"sourceRoot":"","sources":["../src/ServerRegistrationModule.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"]},"metadata":{},"sourceType":"module"}