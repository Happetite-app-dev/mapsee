{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"accessibilityLabel\", \"disabled\", \"labelVariant\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n      status = _ref.status,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      labelStyle = _ref.labelStyle,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      disabled = _ref.disabled,\n      _ref$labelVariant = _ref.labelVariant,\n      labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n\n  var isLeading = position === 'leading';\n  var checkbox;\n\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    variant: labelVariant,\n    style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withInternalTheme(CheckboxItem);\nvar CheckboxItemWithTheme = withInternalTheme(CheckboxItem);\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"mappings":"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","names":["React","withInternalTheme","TouchableRipple","Text","Checkbox","CheckboxAndroid","CheckboxIOS","CheckboxItem","style","_ref","status","label","onPress","labelStyle","theme","testID","mode","position","accessibilityLabel","disabled","labelVariant","props","checkboxProps","isLeading","checkbox","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","color","accessibilityRole","accessibilityState","checked","View","styles","container","pointerEvents","importantForAccessibility","variant","font","displayName","CheckboxItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\n\nexport type Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  accessibilityLabel = label,\n  disabled,\n  labelVariant = 'bodyLarge',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          variant={labelVariant}\n          style={[\n            styles.label,\n            !theme.isV3 && styles.font,\n            computedStyle,\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withInternalTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withInternalTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}