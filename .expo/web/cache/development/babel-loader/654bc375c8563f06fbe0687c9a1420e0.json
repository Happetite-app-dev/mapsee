{"ast":null,"code":"import * as React from 'react';\nexport default function useChildListeners() {\n  var _React$useRef = React.useRef({\n    action: [],\n    focus: []\n  }),\n      listeners = _React$useRef.current;\n\n  var addListener = React.useCallback(function (type, listener) {\n    listeners[type].push(listener);\n    return function () {\n      var index = listeners[type].indexOf(listener);\n      listeners[type].splice(index, 1);\n    };\n  }, [listeners]);\n  return {\n    listeners: listeners,\n    addListener: addListener\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,eAAe,SAASC,iBAAT,GAA6B;EAC1C,oBAA+BD,KAAK,CAACE,MAANF,CAE5B;IACDG,MAAM,EAAE,EADP;IAEDC,KAAK,EAAE;EAFN,CAF4BJ,CAA/B;EAAA,IAAiBK,SAAjB,iBAAQC,OAAR;;EAOA,IAAMC,WAAW,GAAGP,KAAK,CAACQ,WAANR,CAClB,UAA8BS,IAA9B,EAAuCC,QAAvC,EAAoE;IAElEL,SAAS,CAACI,IAAD,CAATJ,CAAgBM,IAAhBN,CAAqBK,QAArBL;IAEA,OAAO,YAAM;MAEX,IAAMO,KAAK,GAAGP,SAAS,CAACI,IAAD,CAATJ,CAAgBQ,OAAhBR,CAAwBK,QAAxBL,CAAd;MAEAA,SAAS,CAACI,IAAD,CAATJ,CAAgBS,MAAhBT,CAAuBO,KAAvBP,EAA8B,CAA9BA;IAJF;EALgB,GAYlB,CAACA,SAAD,CAZkBL,CAApB;EAeA,OAAO;IACLK,SADK,EACLA,SADK;IAELE;EAFK,CAAP;AAID","names":["React","useChildListeners","useRef","action","focus","listeners","current","addListener","useCallback","type","listener","push","index","indexOf","splice"],"sources":["useChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<{\n    [K in keyof ListenerMap]: ListenerMap[K][];\n  }>({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      listeners[type].push(listener);\n\n      return () => {\n        // @ts-expect-error: listener should be correct type according to `type`\n        const index = listeners[type].indexOf(listener);\n\n        listeners[type].splice(index, 1);\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}