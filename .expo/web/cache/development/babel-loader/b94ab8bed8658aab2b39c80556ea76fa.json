{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { createTheming } from '@callstack/react-theme-provider';\nimport color from 'color';\nimport { MD2DarkTheme, MD2LightTheme, MD3DarkTheme, MD3LightTheme } from \"../styles/themes\";\nexport var DefaultTheme = MD3LightTheme;\n\nvar _createTheming = createTheming(MD3LightTheme),\n    ThemeProvider = _createTheming.ThemeProvider,\n    withTheme = _createTheming.withTheme,\n    useAppTheme = _createTheming.useTheme;\n\nexport { ThemeProvider, withTheme, useAppTheme };\nexport function useTheme(overrides) {\n  return useAppTheme(overrides);\n}\nexport var useInternalTheme = function useInternalTheme(themeOverrides) {\n  return useAppTheme(themeOverrides);\n};\nexport var withInternalTheme = function withInternalTheme(WrappedComponent) {\n  return withTheme(WrappedComponent);\n};\nexport var defaultThemesByVersion = {\n  2: {\n    light: MD2LightTheme,\n    dark: MD2DarkTheme\n  },\n  3: {\n    light: MD3LightTheme,\n    dark: MD3DarkTheme\n  }\n};\nexport var getTheme = function getTheme() {\n  var isDark = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var isV3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var themeVersion = isV3 ? 3 : 2;\n  var scheme = isDark ? 'dark' : 'light';\n  return defaultThemesByVersion[themeVersion][scheme];\n};\nexport function adaptNavigationTheme(themes) {\n  var reactNavigationLight = themes.reactNavigationLight,\n      reactNavigationDark = themes.reactNavigationDark,\n      materialLight = themes.materialLight,\n      materialDark = themes.materialDark;\n\n  var getAdaptedTheme = function getAdaptedTheme(navigationTheme, MD3Theme) {\n    return _objectSpread(_objectSpread({}, navigationTheme), {}, {\n      colors: _objectSpread(_objectSpread({}, navigationTheme.colors), {}, {\n        primary: MD3Theme.colors.primary,\n        background: MD3Theme.colors.background,\n        card: MD3Theme.colors.elevation.level2,\n        text: MD3Theme.colors.onSurface,\n        border: MD3Theme.colors.outline,\n        notification: MD3Theme.colors.error\n      })\n    });\n  };\n\n  var MD3Themes = {\n    light: materialLight || MD3LightTheme,\n    dark: materialDark || MD3DarkTheme\n  };\n\n  if (reactNavigationLight && reactNavigationDark) {\n    var modes = ['light', 'dark'];\n    var NavigationThemes = {\n      light: reactNavigationLight,\n      dark: reactNavigationDark\n    };\n\n    var _modes$reduce = modes.reduce(function (prev, curr) {\n      return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, curr, getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr])));\n    }, {\n      light: reactNavigationLight,\n      dark: reactNavigationDark\n    }),\n        adaptedLight = _modes$reduce.light,\n        adaptedDark = _modes$reduce.dark;\n\n    return {\n      LightTheme: adaptedLight,\n      DarkTheme: adaptedDark\n    };\n  }\n\n  if (reactNavigationDark) {\n    return {\n      DarkTheme: getAdaptedTheme(reactNavigationDark, MD3Themes.dark)\n    };\n  }\n\n  return {\n    LightTheme: getAdaptedTheme(reactNavigationLight, MD3Themes.light)\n  };\n}\nexport var getDynamicThemeElevations = function getDynamicThemeElevations(scheme) {\n  var elevationValues = ['transparent', 0.05, 0.08, 0.11, 0.12, 0.14];\n  return elevationValues.reduce(function (elevations, elevationValue, index) {\n    return _objectSpread(_objectSpread({}, elevations), {}, _defineProperty({}, \"level\" + index, index === 0 ? elevationValue : color(scheme.surface).mix(color(scheme.primary), elevationValue).rgb().string()));\n  }, {});\n};","map":{"version":3,"mappings":"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","names":["createTheming","color","MD2DarkTheme","MD2LightTheme","MD3DarkTheme","MD3LightTheme","DefaultTheme","ThemeProvider","withTheme","useAppTheme","useTheme","overrides","useInternalTheme","themeOverrides","withInternalTheme","WrappedComponent","defaultThemesByVersion","light","dark","getTheme","isDark","isV3","themeVersion","scheme","adaptNavigationTheme","themes","reactNavigationLight","reactNavigationDark","materialLight","materialDark","getAdaptedTheme","navigationTheme","MD3Theme","colors","primary","background","card","elevation","level2","text","onSurface","border","outline","notification","error","MD3Themes","modes","NavigationThemes","reduce","prev","curr","adaptedLight","adaptedDark","LightTheme","DarkTheme","getDynamicThemeElevations","elevationValues","elevations","elevationValue","index","surface","mix","rgb","string"],"sources":["theming.tsx"],"sourcesContent":["import type { ComponentType } from 'react';\n\nimport { $DeepPartial, createTheming } from '@callstack/react-theme-provider';\nimport color from 'color';\n\nimport {\n  MD2DarkTheme,\n  MD2LightTheme,\n  MD3DarkTheme,\n  MD3LightTheme,\n} from '../styles/themes';\nimport type {\n  InternalTheme,\n  MD3Theme,\n  MD3AndroidColors,\n  NavigationTheme,\n} from '../types';\n\nexport const DefaultTheme = MD3LightTheme;\n\nexport const {\n  ThemeProvider,\n  withTheme,\n  useTheme: useAppTheme,\n} = createTheming<unknown>(MD3LightTheme);\n\nexport function useTheme<T = MD3Theme>(overrides?: $DeepPartial<T>) {\n  return useAppTheme<T>(overrides);\n}\n\nexport const useInternalTheme = (\n  themeOverrides?: $DeepPartial<InternalTheme>\n) => useAppTheme<InternalTheme>(themeOverrides);\n\nexport const withInternalTheme = <Props extends { theme: InternalTheme }, C>(\n  WrappedComponent: ComponentType<Props & { theme: InternalTheme }> & C\n) => withTheme<Props, C>(WrappedComponent);\n\nexport const defaultThemesByVersion = {\n  2: {\n    light: MD2LightTheme,\n    dark: MD2DarkTheme,\n  },\n  3: {\n    light: MD3LightTheme,\n    dark: MD3DarkTheme,\n  },\n};\n\nexport const getTheme = (isDark = false, isV3 = true) => {\n  const themeVersion = isV3 ? 3 : 2;\n  const scheme = isDark ? 'dark' : 'light';\n\n  return defaultThemesByVersion[themeVersion][scheme];\n};\n\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: {\n  reactNaivgationLight: NavigationTheme;\n  materialLight?: MD3Theme;\n}): {\n  LightTheme: NavigationTheme;\n};\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: {\n  reactNavigationDark: NavigationTheme;\n  materialDark?: MD3Theme;\n}): {\n  DarkTheme: NavigationTheme;\n};\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: {\n  reactNavigationLight: NavigationTheme;\n  reactNavigationDark: NavigationTheme;\n  materialLight?: MD3Theme;\n  materialDark?: MD3Theme;\n}): { LightTheme: NavigationTheme; DarkTheme: NavigationTheme };\n// eslint-disable-next-line no-redeclare\nexport function adaptNavigationTheme(themes: any) {\n  const {\n    reactNavigationLight,\n    reactNavigationDark,\n    materialLight,\n    materialDark,\n  } = themes;\n\n  const getAdaptedTheme = (\n    navigationTheme: NavigationTheme,\n    MD3Theme: MD3Theme\n  ) => {\n    return {\n      ...navigationTheme,\n      colors: {\n        ...navigationTheme.colors,\n        primary: MD3Theme.colors.primary,\n        background: MD3Theme.colors.background,\n        card: MD3Theme.colors.elevation.level2,\n        text: MD3Theme.colors.onSurface,\n        border: MD3Theme.colors.outline,\n        notification: MD3Theme.colors.error,\n      },\n    };\n  };\n\n  const MD3Themes = {\n    light: materialLight || MD3LightTheme,\n    dark: materialDark || MD3DarkTheme,\n  };\n\n  if (reactNavigationLight && reactNavigationDark) {\n    const modes = ['light', 'dark'] as const;\n\n    const NavigationThemes = {\n      light: reactNavigationLight,\n      dark: reactNavigationDark,\n    };\n\n    const { light: adaptedLight, dark: adaptedDark } = modes.reduce(\n      (prev, curr) => {\n        return {\n          ...prev,\n          [curr]: getAdaptedTheme(NavigationThemes[curr], MD3Themes[curr]),\n        };\n      },\n      {\n        light: reactNavigationLight,\n        dark: reactNavigationDark,\n      }\n    );\n\n    return {\n      LightTheme: adaptedLight,\n      DarkTheme: adaptedDark,\n    };\n  }\n\n  if (reactNavigationDark) {\n    return {\n      DarkTheme: getAdaptedTheme(reactNavigationDark, MD3Themes.dark),\n    };\n  }\n\n  return {\n    LightTheme: getAdaptedTheme(reactNavigationLight, MD3Themes.light),\n  };\n}\n\nexport const getDynamicThemeElevations = (scheme: MD3AndroidColors) => {\n  const elevationValues = ['transparent', 0.05, 0.08, 0.11, 0.12, 0.14];\n  return elevationValues.reduce((elevations, elevationValue, index) => {\n    return {\n      ...elevations,\n      [`level${index}`]:\n        index === 0\n          ? elevationValue\n          : color(scheme.surface)\n              .mix(color(scheme.primary), elevationValue as number)\n              .rgb()\n              .string(),\n    };\n  }, {});\n};\n"]},"metadata":{},"sourceType":"module"}