{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { onValue, ref } from \"@firebase/database\";\nimport { database } from \"../firebase\";\nimport { useEffect, useState } from \"react\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar gotoSingleFolderScreen = function gotoSingleFolderScreen(_ref) {\n  var navigation = _ref.navigation,\n      folderID = _ref.folderID,\n      myUID = _ref.myUID,\n      recordDataSource = _ref.recordDataSource,\n      setRecordDataSource = _ref.setRecordDataSource,\n      folderName = _ref.folderName,\n      folderColor = _ref.folderColor,\n      folderUserIDs = _ref.folderUserIDs;\n  var db = database;\n  onValue(ref(db, \"/folders/\" + folderID), function (snapshot) {\n    if (snapshot.child(\"userIDs\").val() && myUID in snapshot.child(\"userIDs\").val()) {\n      if (snapshot.child(\"placeRecords\").val() != (null || undefined)) {\n        Object.values(snapshot.child(\"placeRecords\").val()).map(function (recordIDObject) {\n          Object.keys(recordIDObject).map(function (recordID) {\n            onValue(ref(db, \"/records/\" + recordID), function (snapshot2) {\n              if (snapshot2.val() != (null || undefined)) {\n                setRecordDataSource(function (prev) {\n                  return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, recordID, {\n                    recordID: recordID,\n                    recordData: snapshot2.val()\n                  }));\n                });\n              }\n            });\n          });\n        });\n      }\n    }\n  });\n  navigation.navigate(\"SingleFolderScreen\", {\n    recordDataSource: recordDataSource,\n    folderID: folderID,\n    folderName: folderName,\n    folderColor: folderColor,\n    folderUserIDs: folderUserIDs\n  });\n};\n\nvar DispatchFolderInviteRequestList = function DispatchFolderInviteRequestList(_ref2) {\n  var approverObject = _ref2.approverObject,\n      folderObject = _ref2.folderObject,\n      folderID = _ref2.folderID,\n      navigation = _ref2.navigation,\n      myUID = _ref2.myUID;\n\n  var _useState = useState(approverObject || {\n    id: \"\",\n    firstName: \"\",\n    lastName: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      approverObj = _useState2[0],\n      setApproverObj = _useState2[1];\n\n  useEffect(function () {\n    if (approverObject != undefined) {\n      setApproverObj(approverObject);\n    }\n  }, [approverObject]);\n  var approverID = JSON.stringify(approverObj.id).slice(1, -1);\n  var approverFirstName = JSON.stringify(approverObj.firstName).slice(1, -1);\n  var approverLastName = JSON.stringify(approverObj.lastName).slice(1, -1);\n\n  var _useState3 = useState(folderObject || {\n    folderName: \"\",\n    folderColor: \"\",\n    folderUserIDs: []\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      folderObj = _useState4[0],\n      setFolderObj = _useState4[1];\n\n  useEffect(function () {\n    if (folderObject != undefined) {\n      setFolderObj(folderObject);\n    }\n  }, [folderObject]);\n  var folderName = JSON.stringify(folderObj.folderName).slice(1, -1);\n  var folderColor = JSON.stringify(folderObj.folderColor).slice(1, -1);\n  var folderUserIDs = folderObj.folderUserIDs;\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      recordDataSource = _useState6[0],\n      setRecordDataSource = _useState6[1];\n\n  if (folderObj == {\n    folderName: \"\",\n    folderColor: \"\",\n    folderUserIDs: []\n  }) {\n    return _jsx(_Fragment, {});\n  } else {\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        gotoSingleFolderScreen({\n          navigation: navigation,\n          folderID: folderID,\n          myUID: myUID,\n          recordDataSource: recordDataSource,\n          setRecordDataSource: setRecordDataSource,\n          folderName: folderName,\n          folderColor: folderColor,\n          folderUserIDs: folderUserIDs\n        });\n      },\n      style: {\n        flex: 1,\n        alignItems: \"center\",\n        marginBottom: 40\n      },\n      children: _jsx(View, {\n        style: {\n          width: 344,\n          height: 24,\n          borderRadius: 16,\n          flexDirection: \"row\"\n        },\n        children: _jsxs(Text, {\n          style: {\n            left: 16,\n            top: 5,\n            fontWeight: \"400\",\n            fontSize: 14,\n            lineHeight: 16,\n            letterSpacing: -0.5\n          },\n          children: [_jsxs(Text, {\n            style: {\n              fontWeight: \"700\"\n            },\n            children: [approverLastName, approverFirstName, \"(@\", approverID, \")\"]\n          }), \"\\uB2D8\\uC774\", _jsxs(Text, {\n            style: {\n              fontWeight: \"700\"\n            },\n            children: [\" \", folderName, \" \"]\n          }), \"\\uCD08\\uB300\\uB97C \\uC218\\uB77D\\uD588\\uC2B5\\uB2C8\\uB2E4.\"]\n        })\n      })\n    });\n  }\n};\n\nexport default DispatchFolderInviteRequestList;","map":{"version":3,"names":["onValue","ref","database","useEffect","useState","gotoSingleFolderScreen","navigation","folderID","myUID","recordDataSource","setRecordDataSource","folderName","folderColor","folderUserIDs","db","snapshot","child","val","undefined","Object","values","map","recordIDObject","keys","recordID","snapshot2","prev","recordData","navigate","DispatchFolderInviteRequestList","approverObject","folderObject","id","firstName","lastName","approverObj","setApproverObj","approverID","JSON","stringify","slice","approverFirstName","approverLastName","folderObj","setFolderObj","flex","alignItems","marginBottom","width","height","borderRadius","flexDirection","left","top","fontWeight","fontSize","lineHeight","letterSpacing"],"sources":["/Users/jeongin/mapsee_2/components/DispatchFolderInviteRequestList.js"],"sourcesContent":["import { onValue, ref } from \"@firebase/database\";\nimport { database } from \"../firebase\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Pressable,\n  SafeAreaView,\n  Text,\n  TouchableOpacity,\n  View,\n} from \"react-native\";\nconst gotoSingleFolderScreen = ({\n  navigation,\n  folderID,\n  myUID,\n  recordDataSource,\n  setRecordDataSource,\n  folderName,\n  folderColor,\n  folderUserIDs,\n}) => {\n  const db = database;\n  onValue(ref(db, \"/folders/\" + folderID), (snapshot) => {\n    //폴더 삭제 시 삭제된 폴더가 display되는 오류 방지를 위한 체크용 코드\n    if (\n      snapshot.child(\"userIDs\").val() &&\n      myUID in snapshot.child(\"userIDs\").val()\n    ) {\n      if (snapshot.child(\"placeRecords\").val() != (null || undefined)) {\n        //폴더는 있지만 빈폴더라서 record가 안에 없을 수 있어!!\n        //recordIDList_.push(...Object.keys(snapshot2.child('placeRecords').val()))  //해당 user가 소속된 각 폴더에 들어있는 recordIDList들을 합쳐서 하나로 만들어주기(버림)\n        Object.values(snapshot.child(\"placeRecords\").val()).map(\n          (recordIDObject) => {\n            //folders의 placeRecord 속에 있는 각 placeID에 대응되는 recordIDObject들에 대하여....\n            Object.keys(recordIDObject).map((recordID) => {\n              //각 recordObject에 있는 recordID에 대하여\n              onValue(ref(db, \"/records/\" + recordID), (snapshot2) => {\n                if (snapshot2.val() != (null || undefined)) {\n                  //masterDataSource 채워주기 --> 기존 record를 지웠을 때, 없는 recordID를 찾아서 null이 masterDataSource에 들어가는 경우를 방지하고자 함\n                  setRecordDataSource((prev) => ({\n                    ...prev,\n                    [recordID]: {\n                      recordID,\n                      recordData: snapshot2.val(),\n                    },\n                  })); //{recordID: recordID, recordData:{title: ~~, date: ~~, lctn: ~~, text: ~~, placeName: ~~}}가 쌓여있음\n                }\n              });\n            });\n          }\n        );\n      }\n    }\n  });\n\n  navigation.navigate(\"SingleFolderScreen\", {\n    recordDataSource,\n    folderID,\n    folderName,\n    folderColor,\n    folderUserIDs,\n  });\n};\nconst DispatchFolderInviteRequestList = ({\n  approverObject,\n  folderObject,\n  folderID,\n  navigation,\n  myUID,\n}) => {\n  const [approverObj, setApproverObj] = useState(\n    approverObject || { id: \"\", firstName: \"\", lastName: \"\" }\n  );\n  useEffect(() => {\n    if (approverObject != undefined) {\n      setApproverObj(approverObject);\n    }\n  }, [approverObject]);\n  const approverID = JSON.stringify(approverObj.id).slice(1, -1);\n  const approverFirstName = JSON.stringify(approverObj.firstName).slice(1, -1);\n  const approverLastName = JSON.stringify(approverObj.lastName).slice(1, -1);\n  const [folderObj, setFolderObj] = useState(\n    folderObject || { folderName: \"\", folderColor: \"\", folderUserIDs: [] }\n  );\n  useEffect(() => {\n    if (folderObject != undefined) {\n      setFolderObj(folderObject);\n    }\n  }, [folderObject]);\n  const folderName = JSON.stringify(folderObj.folderName).slice(1, -1);\n  const folderColor = JSON.stringify(folderObj.folderColor).slice(1, -1);\n  const folderUserIDs = folderObj.folderUserIDs;\n  const [recordDataSource, setRecordDataSource] = useState({});\n  if (folderObj == { folderName: \"\", folderColor: \"\", folderUserIDs: [] }) {\n    return <></>;\n  } else {\n    return (\n      <TouchableOpacity\n        onPress={() => {\n          gotoSingleFolderScreen({\n            navigation,\n            folderID,\n            myUID,\n            recordDataSource,\n            setRecordDataSource,\n            folderName,\n            folderColor,\n            folderUserIDs,\n          });\n        }}\n        style={{ flex: 1, alignItems: \"center\", marginBottom: 40 }}\n      >\n        <View\n          style={{\n            width: 344,\n            height: 24,\n            borderRadius: 16,\n            flexDirection: \"row\",\n          }}\n        >\n          <Text\n            style={{\n              left: 16,\n              top: 5,\n              fontWeight: \"400\",\n              fontSize: 14,\n              lineHeight: 16,\n              letterSpacing: -0.5,\n            }}\n          >\n            <Text style={{ fontWeight: \"700\" }}>\n              {approverLastName}\n              {approverFirstName}(@{approverID})\n            </Text>\n            님이\n            <Text style={{ fontWeight: \"700\" }}> {folderName} </Text>\n            초대를 수락했습니다.\n          </Text>\n        </View>\n      </TouchableOpacity>\n    );\n  }\n};\n\nexport default DispatchFolderInviteRequestList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}