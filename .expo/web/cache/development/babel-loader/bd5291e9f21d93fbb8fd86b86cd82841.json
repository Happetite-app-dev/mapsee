{"ast":null,"code":"import * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withInternalTheme } from \"../../core/theming\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport RadioButton from \"./RadioButton\";\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport RadioButtonIOS from \"./RadioButtonIOS\";\nimport { handlePress, isChecked } from \"./utils\";\n\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n      label = _ref.label,\n      style = _ref.style,\n      labelStyle = _ref.labelStyle,\n      _onPress = _ref.onPress,\n      disabled = _ref.disabled,\n      color = _ref.color,\n      uncheckedColor = _ref.uncheckedColor,\n      status = _ref.status,\n      theme = _ref.theme,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      _ref$labelVariant = _ref.labelVariant,\n      labelVariant = _ref$labelVariant === void 0 ? 'bodyLarge' : _ref$labelVariant;\n  var radioButtonProps = {\n    value: value,\n    disabled: disabled,\n    status: status,\n    color: color,\n    uncheckedColor: uncheckedColor\n  };\n  var isLeading = position === 'leading';\n  var radioButton;\n\n  if (mode === 'android') {\n    radioButton = React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = React.createElement(RadioButton, radioButtonProps);\n  }\n\n  var textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  var disabledTextColor = theme.isV3 ? theme.colors.onSurfaceDisabled : theme.colors.disabled;\n  var textAlign = isLeading ? 'right' : 'left';\n  var computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign: textAlign\n  };\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, {\n      onPress: function onPress(event) {\n        return handlePress({\n          onPress: _onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value,\n          event: event\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        checked: checked,\n        disabled: disabled\n      },\n      testID: testID,\n      disabled: disabled\n    }, React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, React.createElement(Text, {\n      variant: labelVariant,\n      style: [styles.label, !theme.isV3 && styles.font, computedStyle, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default withInternalTheme(RadioButtonItem);\nvar RadioButtonItemWithTheme = withInternalTheme(RadioButtonItem);\nexport { RadioButtonItemWithTheme as RadioButtonItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1\n  },\n  font: {\n    fontSize: 16\n  }\n});","map":{"version":3,"mappings":"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","names":["React","withInternalTheme","TouchableRipple","Text","RadioButton","RadioButtonAndroid","RadioButtonContext","RadioButtonIOS","handlePress","isChecked","RadioButtonItem","value","_ref","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","Consumer","context","checked","contextValue","event","onValueChange","accessibilityRole","accessibilityState","View","styles","container","pointerEvents","variant","font","displayName","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"sources":["RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={(event) =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n                event,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withInternalTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withInternalTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}